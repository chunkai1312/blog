{"title":"使用 React Context API 實現 i18n 多國語言","slug":"using-react-context-api-to-support-for-i18n","date":"2019-11-15T13:51:46.000Z","updated":"2021-09-05T09:20:26.334Z","comments":true,"path":"api/articles/using-react-context-api-to-support-for-i18n.json","excerpt":" [Figure] 本文透過實現一個簡易的 i18n (internationalization) 功能來演示 React Context API 的基本應用。","covers":["/2019/11/15/using-react-context-api-to-support-for-i18n/cover.jpg","/2019/11/15/using-react-context-api-to-support-for-i18n/react-i18n-example.jpg"],"content":"<p><img src=\"/2019/11/15/using-react-context-api-to-support-for-i18n/cover.jpg\"></p>\n<blockquote>\n<p>本文透過實現一個簡易的 i18n (internationalization) 功能來演示 React Context API 的基本應用。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"React-Context-API\"><a href=\"#React-Context-API\" class=\"headerlink\" title=\"React Context API\"></a>React Context API</h2><p>React Context 提供 component tree 傳遞資料的方法，而不必在每個級別傳遞 props。這很適合用在對於 React 應用程式中是屬於全域的資料，例如當前認證的用戶、主題或語言偏好。</p>\n<p>較早版本的 React 提供的 Context API 官方並不建議使用。React 16.3 發布的 New Context API 使用 <a href=\"https://reactjs.org/docs/render-props.html\">Render Props</a> pattern 實現將資料傳遞給 children。</p>\n<p>React 16.3+ Context API 核心包含：<code>React.createContext</code>、<code>Context.Provider</code>、<code>Context.Consumer</code>。</p>\n<h3 id=\"React-createContext\"><a href=\"#React-createContext\" class=\"headerlink\" title=\"React.createContext\"></a>React.createContext</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> MyContext = React.createContext(defaultValue);<br></code></pre></td></tr></table></figure>\n\n<p><code>React.createContext</code> 用於建立一個 Context 物件，該物件包含 <code>Provider</code> 和 <code>Consumer</code> 兩個 component。</p>\n<h3 id=\"Context-Provider\"><a href=\"#Context-Provider\" class=\"headerlink\" title=\"Context.Provider\"></a>Context.Provider</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;MyContext.Provider value=&#123;<span class=\"hljs-comment\">/* some value */</span>&#125;&gt;<br></code></pre></td></tr></table></figure>\n\n<p><code>Context.Provider</code> 提供 context 的值，通常會放在 component tree 接近最上層的位置。</p>\n<h3 id=\"Context-Consumer\"><a href=\"#Context-Consumer\" class=\"headerlink\" title=\"Context.Consumer\"></a>Context.Consumer</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;MyContext.Consumer&gt;<br>  &#123;<span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> <span class=\"hljs-comment\">/* render something based on the context value */</span>&#125;<br>&lt;/MyContext.Consumer&gt;<br></code></pre></td></tr></table></figure>\n\n<p><code>Context.Consumer</code> 接收 context 的值，可以在屬於 Provider 子元件的任何一層使用。</p>\n<h2 id=\"使用-Context-API-實現-i18n-功能\"><a href=\"#使用-Context-API-實現-i18n-功能\" class=\"headerlink\" title=\"使用 Context API 實現 i18n 功能\"></a>使用 Context API 實現 i18n 功能</h2><p>接下來會以實作 i18n 功能的例子說明如何使用 React Context API。我們以 <a href=\"https://create-react-app.dev/\">Create React App</a> 快速建立一個 React 應用程式範例，並建立 <code>src/i18n</code> 目錄。</p>\n<h3 id=\"I18nContext\"><a href=\"#I18nContext\" class=\"headerlink\" title=\"I18nContext\"></a>I18nContext</h3><p>我們使用 <code>React.createContext</code> 建立一個 <code>I18nContext</code> 及定義其初始狀態。這裡我們預計會提供三種方法來預計來實現多國語言轉換功能：</p>\n<ul>\n<li><code>t(key: string): string</code>: 將定義的鍵值翻譯成對應的語系內容</li>\n<li><code>getLocale()</code>: 取得當前語系</li>\n<li><code>setLocale()</code>: 設置/變更當前語系</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; createContext &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><br><span class=\"hljs-keyword\">const</span> I18nContext = createContext(&#123;<br>  t: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  getLocale: <span class=\"hljs-function\">() =&gt;</span> &#123;&#125;,<br>  setLocale: <span class=\"hljs-function\">() =&gt;</span> &#123;&#125;,<br>&#125;);<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> I18nContext;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"I18nProvider\"><a href=\"#I18nProvider\" class=\"headerlink\" title=\"I18nProvider\"></a>I18nProvider</h3><p>所以我們需要實作一個 <code>I18nProvider</code> 在 tree 的上層使用來提供 context 的值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React, &#123; useState &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> I18nContext <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./I18nContext&#x27;</span>;<br><br><span class=\"hljs-keyword\">const</span> I18nProvider ＝ (props) =&gt; &#123;<br>  <span class=\"hljs-keyword\">const</span> [ locale, setLocale ] = useState(<span class=\"hljs-string\">&#x27;en-US&#x27;</span>);<br><br>  <span class=\"hljs-keyword\">const</span> i18n = &#123; <br>    t: <span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> props.translations[locale][key],<br>    getLocale: <span class=\"hljs-function\">() =&gt;</span> locale,<br>    setLocale: <span class=\"hljs-function\"><span class=\"hljs-params\">locale</span> =&gt;</span> setLocale(locale),<br>  &#125;;<br><br>  <span class=\"hljs-keyword\">return</span> (<br>    &lt;I18nContext.Provider value=&#123;i18n&#125;&gt;<br>      &#123;props.children&#125;<br>    &lt;/I18nContext.Provider&gt;<br>  );<br>&#125;;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> I18nProvider;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"useI18n\"><a href=\"#useI18n\" class=\"headerlink\" title=\"useI18n\"></a>useI18n</h3><p>為了讀取 context 及訂閱變更的內容，我們實作一個 <code>useI18n</code> 的 React hook 方便我們在其他 functional component 使用多國語言。我們使用 <code>useContext</code> 接收 <code>I18nContext</code> 取得當前 context 的狀態：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; useContext &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> I18nContext <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./I18nContext&#x27;</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">useI18n</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> i18n = useContext(I18nContext);<br>  <span class=\"hljs-keyword\">return</span> i18n;<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> useI18n;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"withI18n\"><a href=\"#withI18n\" class=\"headerlink\" title=\"withI18n\"></a>withI18n</h3><p>自 React 16.8 <a href=\"https://reactjs.org/docs/hooks-intro.html\">Hooks</a> 功能釋出後，functional component 已經可以藉用 <code>useState</code> 與 <code>useEffect</code> 等 hooks 滿足大部分情境。如果要使用傳統的 class component 時，我們可以實作一個 <a href=\"https://reactjs.org/docs/higher-order-components.html\">HOC (higher-order component)</a> 來包裝 Context API 來使用 i18n：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> I18nContext, &#123; I18nContextProps &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./I18nContext&#x27;</span>;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> withI18n = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">WrappedComponent</span> =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> ComponentWithI18n = <span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> (<br>      &lt;I18nContext.Consumer&gt;<br>        &#123;<span class=\"hljs-function\"><span class=\"hljs-params\">i18n</span> =&gt;</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">WrappedComponent</span> &#123;<span class=\"hljs-attr\">...i18n</span>&#125; &#123;<span class=\"hljs-attr\">...props</span>&#125; /&gt;</span></span>&#125;<br>      &lt;/I18nContext.Consumer&gt;<br>    )<br>    <span class=\"hljs-keyword\">return</span> ComponentWithI18n<br>  &#125;<br>&#125;;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> withI18n;<br></code></pre></td></tr></table></figure>\n\n<p>最後在 <code>src/i18n/index.js</code> 將各個模組導出，方便在其他檔案中 import 它們。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> &#123; <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">as</span> I18nProvider &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./I18nProvider&#x27;</span>;<br><span class=\"hljs-keyword\">export</span> &#123; <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">as</span> useI18n &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./useI18n&#x27;</span>;<br><span class=\"hljs-keyword\">export</span> &#123; <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">as</span> withI18n &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./withI18n&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"在-React-中使用-I18nContext\"><a href=\"#在-React-中使用-I18nContext\" class=\"headerlink\" title=\"在 React 中使用 I18nContext\"></a>在 React 中使用 I18nContext</h2><p>接著可以在 React 應用程式使用我們建立好的 I18nContext 提供多國語言功能了。我們需要建立多個語系檔來決定轉譯的內容，在 <code>src/locales</code> 是我們要放置各語系檔案的目錄。以下以英文及中文為例：</p>\n<p><code>src/locales/en-US.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-string\">&#x27;getting_started&#x27;</span>: <span class=\"hljs-string\">&#x27;Edit &lt;code&gt;src/App.tsx&lt;/code&gt; and save to reload.&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;learn_react&#x27;</span>: <span class=\"hljs-string\">&#x27;Learn React&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p><code>src/locales/zh-TW.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-string\">&#x27;getting_started&#x27;</span>: <span class=\"hljs-string\">&#x27;編輯 &lt;code&gt;src/App.tsx&lt;/code&gt; 並儲存以重新載入。&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;learn_react&#x27;</span>: <span class=\"hljs-string\">&#x27;學習 React&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>在 React 應用程式入口 <code>src/index.js</code>，在 component tree 的上層引入 <code>I18nProvider</code>，並將語言包內容注入 Provider：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-dom&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;./index.css&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./App&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> serviceWorker <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./serviceWorker&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; I18nProvider &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./i18n&#x27;</span>;<br><br><span class=\"hljs-keyword\">const</span> locales = [ <span class=\"hljs-string\">&#x27;en-US&#x27;</span>, <span class=\"hljs-string\">&#x27;zh-TW&#x27;</span> ];<br><span class=\"hljs-keyword\">const</span> translations = &#123;<br>  <span class=\"hljs-string\">&#x27;en-US&#x27;</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./locales/en-US&#x27;</span>).default,<br>  <span class=\"hljs-string\">&#x27;zh-TW&#x27;</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./locales/zh-TW&#x27;</span>).default,<br>&#125;<br><br>ReactDOM.render(<br>  &lt;I18nProvider locales=&#123;locales&#125; translations=&#123;translations&#125;&gt;<br>    &lt;App /&gt;<br>  &lt;/I18nProvider&gt;,<br>  <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure>\n\n<p>然後在需要使用多國語言的 functional component 引入 <code>useI18n</code> hook 使用 <code>t</code> 函式來轉換對應的語系內容，<code>setLocale</code> 用來設置轉換語系：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> logo <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./logo.svg&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;./App.css&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; useI18n &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./i18n&#x27;</span>;<br><br><span class=\"hljs-keyword\">const</span> App: React.FC = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> &#123; t, setLocale &#125; = useI18n();<br><br>  <span class=\"hljs-keyword\">return</span> (<br>    &lt;div className=<span class=\"hljs-string\">&quot;App&quot;</span>&gt;<br>      &lt;header className=<span class=\"hljs-string\">&quot;App-header&quot;</span>&gt;<br>        &lt;img src=&#123;logo&#125; className=<span class=\"hljs-string\">&quot;App-logo&quot;</span> alt=<span class=\"hljs-string\">&quot;logo&quot;</span> /&gt;<br>        &lt;p dangerouslySetInnerHTML=&#123;&#123; <span class=\"hljs-attr\">__html</span>: t(<span class=\"hljs-string\">&#x27;getting_started&#x27;</span>) &#125;&#125; /&gt;<br>        &lt;a<br>          className=<span class=\"hljs-string\">&quot;App-link&quot;</span><br>          href=<span class=\"hljs-string\">&quot;https://reactjs.org&quot;</span><br>          target=<span class=\"hljs-string\">&quot;_blank&quot;</span><br>          rel=<span class=\"hljs-string\">&quot;noopener noreferrer&quot;</span><br>        &gt;<br>          &#123;t(<span class=\"hljs-string\">&#x27;learn_react&#x27;</span>)&#125;<br>        &lt;/a&gt;<br>      &lt;/header&gt;<br>      &lt;footer className=<span class=\"hljs-string\">&quot;App-Footer&quot;</span>&gt;<br>        &lt;span className=<span class=\"hljs-string\">&quot;App-Locale&quot;</span> onClick=&#123;<span class=\"hljs-function\">() =&gt;</span> setLocale(<span class=\"hljs-string\">&#x27;en-US&#x27;</span>)&#125;&gt;English&lt;/span&gt;<br>        &#123;<span class=\"hljs-string\">&#x27; | &#x27;</span>&#125;<br>        &lt;span className=<span class=\"hljs-string\">&quot;App-Locale&quot;</span> onClick=&#123;<span class=\"hljs-function\">() =&gt;</span> setLocale(<span class=\"hljs-string\">&#x27;zh-TW&#x27;</span>)&#125;&gt;正體中文&lt;/span&gt;<br>      &lt;/footer&gt;<br>    &lt;/div&gt;<br>  );<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;<br></code></pre></td></tr></table></figure>\n\n<p>最後執行 <code>npm start</code> 查看結果。</p>\n<p><img src=\"/2019/11/15/using-react-context-api-to-support-for-i18n/react-i18n-example.jpg\"></p>\n<h2 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h2><p>透過 React Context API 可以在 component 之間共享數據，結合 React Hook 與 HOC 可以很容易實現可複用的第三方 library。我們經由一個簡易的 i18n 功能展示如何使用它們，完整的範例可以參考 <a href=\"https://github.com/chunkai1312/react-i18n-example\">react-i18n-example</a>。</p>\n","more":"<h2 id=\"React-Context-API\"><a href=\"#React-Context-API\" class=\"headerlink\" title=\"React Context API\"></a>React Context API</h2><p>React Context 提供 component tree 傳遞資料的方法，而不必在每個級別傳遞 props。這很適合用在對於 React 應用程式中是屬於全域的資料，例如當前認證的用戶、主題或語言偏好。</p>\n<p>較早版本的 React 提供的 Context API 官方並不建議使用。React 16.3 發布的 New Context API 使用 <a href=\"https://reactjs.org/docs/render-props.html\">Render Props</a> pattern 實現將資料傳遞給 children。</p>\n<p>React 16.3+ Context API 核心包含：<code>React.createContext</code>、<code>Context.Provider</code>、<code>Context.Consumer</code>。</p>\n<h3 id=\"React-createContext\"><a href=\"#React-createContext\" class=\"headerlink\" title=\"React.createContext\"></a>React.createContext</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> MyContext = React.createContext(defaultValue);<br></code></pre></td></tr></table></figure>\n\n<p><code>React.createContext</code> 用於建立一個 Context 物件，該物件包含 <code>Provider</code> 和 <code>Consumer</code> 兩個 component。</p>\n<h3 id=\"Context-Provider\"><a href=\"#Context-Provider\" class=\"headerlink\" title=\"Context.Provider\"></a>Context.Provider</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;MyContext.Provider value=&#123;<span class=\"hljs-comment\">/* some value */</span>&#125;&gt;<br></code></pre></td></tr></table></figure>\n\n<p><code>Context.Provider</code> 提供 context 的值，通常會放在 component tree 接近最上層的位置。</p>\n<h3 id=\"Context-Consumer\"><a href=\"#Context-Consumer\" class=\"headerlink\" title=\"Context.Consumer\"></a>Context.Consumer</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;MyContext.Consumer&gt;<br>  &#123;<span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> <span class=\"hljs-comment\">/* render something based on the context value */</span>&#125;<br>&lt;/MyContext.Consumer&gt;<br></code></pre></td></tr></table></figure>\n\n<p><code>Context.Consumer</code> 接收 context 的值，可以在屬於 Provider 子元件的任何一層使用。</p>\n<h2 id=\"使用-Context-API-實現-i18n-功能\"><a href=\"#使用-Context-API-實現-i18n-功能\" class=\"headerlink\" title=\"使用 Context API 實現 i18n 功能\"></a>使用 Context API 實現 i18n 功能</h2><p>接下來會以實作 i18n 功能的例子說明如何使用 React Context API。我們以 <a href=\"https://create-react-app.dev/\">Create React App</a> 快速建立一個 React 應用程式範例，並建立 <code>src/i18n</code> 目錄。</p>\n<h3 id=\"I18nContext\"><a href=\"#I18nContext\" class=\"headerlink\" title=\"I18nContext\"></a>I18nContext</h3><p>我們使用 <code>React.createContext</code> 建立一個 <code>I18nContext</code> 及定義其初始狀態。這裡我們預計會提供三種方法來預計來實現多國語言轉換功能：</p>\n<ul>\n<li><code>t(key: string): string</code>: 將定義的鍵值翻譯成對應的語系內容</li>\n<li><code>getLocale()</code>: 取得當前語系</li>\n<li><code>setLocale()</code>: 設置/變更當前語系</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; createContext &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><br><span class=\"hljs-keyword\">const</span> I18nContext = createContext(&#123;<br>  t: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  getLocale: <span class=\"hljs-function\">() =&gt;</span> &#123;&#125;,<br>  setLocale: <span class=\"hljs-function\">() =&gt;</span> &#123;&#125;,<br>&#125;);<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> I18nContext;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"I18nProvider\"><a href=\"#I18nProvider\" class=\"headerlink\" title=\"I18nProvider\"></a>I18nProvider</h3><p>所以我們需要實作一個 <code>I18nProvider</code> 在 tree 的上層使用來提供 context 的值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React, &#123; useState &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> I18nContext <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./I18nContext&#x27;</span>;<br><br><span class=\"hljs-keyword\">const</span> I18nProvider ＝ (props) =&gt; &#123;<br>  <span class=\"hljs-keyword\">const</span> [ locale, setLocale ] = useState(<span class=\"hljs-string\">&#x27;en-US&#x27;</span>);<br><br>  <span class=\"hljs-keyword\">const</span> i18n = &#123; <br>    t: <span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> props.translations[locale][key],<br>    getLocale: <span class=\"hljs-function\">() =&gt;</span> locale,<br>    setLocale: <span class=\"hljs-function\"><span class=\"hljs-params\">locale</span> =&gt;</span> setLocale(locale),<br>  &#125;;<br><br>  <span class=\"hljs-keyword\">return</span> (<br>    &lt;I18nContext.Provider value=&#123;i18n&#125;&gt;<br>      &#123;props.children&#125;<br>    &lt;/I18nContext.Provider&gt;<br>  );<br>&#125;;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> I18nProvider;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"useI18n\"><a href=\"#useI18n\" class=\"headerlink\" title=\"useI18n\"></a>useI18n</h3><p>為了讀取 context 及訂閱變更的內容，我們實作一個 <code>useI18n</code> 的 React hook 方便我們在其他 functional component 使用多國語言。我們使用 <code>useContext</code> 接收 <code>I18nContext</code> 取得當前 context 的狀態：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; useContext &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> I18nContext <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./I18nContext&#x27;</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">useI18n</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> i18n = useContext(I18nContext);<br>  <span class=\"hljs-keyword\">return</span> i18n;<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> useI18n;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"withI18n\"><a href=\"#withI18n\" class=\"headerlink\" title=\"withI18n\"></a>withI18n</h3><p>自 React 16.8 <a href=\"https://reactjs.org/docs/hooks-intro.html\">Hooks</a> 功能釋出後，functional component 已經可以藉用 <code>useState</code> 與 <code>useEffect</code> 等 hooks 滿足大部分情境。如果要使用傳統的 class component 時，我們可以實作一個 <a href=\"https://reactjs.org/docs/higher-order-components.html\">HOC (higher-order component)</a> 來包裝 Context API 來使用 i18n：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> I18nContext, &#123; I18nContextProps &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./I18nContext&#x27;</span>;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> withI18n = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">WrappedComponent</span> =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> ComponentWithI18n = <span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> (<br>      &lt;I18nContext.Consumer&gt;<br>        &#123;<span class=\"hljs-function\"><span class=\"hljs-params\">i18n</span> =&gt;</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">WrappedComponent</span> &#123;<span class=\"hljs-attr\">...i18n</span>&#125; &#123;<span class=\"hljs-attr\">...props</span>&#125; /&gt;</span></span>&#125;<br>      &lt;/I18nContext.Consumer&gt;<br>    )<br>    <span class=\"hljs-keyword\">return</span> ComponentWithI18n<br>  &#125;<br>&#125;;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> withI18n;<br></code></pre></td></tr></table></figure>\n\n<p>最後在 <code>src/i18n/index.js</code> 將各個模組導出，方便在其他檔案中 import 它們。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> &#123; <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">as</span> I18nProvider &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./I18nProvider&#x27;</span>;<br><span class=\"hljs-keyword\">export</span> &#123; <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">as</span> useI18n &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./useI18n&#x27;</span>;<br><span class=\"hljs-keyword\">export</span> &#123; <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">as</span> withI18n &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./withI18n&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"在-React-中使用-I18nContext\"><a href=\"#在-React-中使用-I18nContext\" class=\"headerlink\" title=\"在 React 中使用 I18nContext\"></a>在 React 中使用 I18nContext</h2><p>接著可以在 React 應用程式使用我們建立好的 I18nContext 提供多國語言功能了。我們需要建立多個語系檔來決定轉譯的內容，在 <code>src/locales</code> 是我們要放置各語系檔案的目錄。以下以英文及中文為例：</p>\n<p><code>src/locales/en-US.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-string\">&#x27;getting_started&#x27;</span>: <span class=\"hljs-string\">&#x27;Edit &lt;code&gt;src/App.tsx&lt;/code&gt; and save to reload.&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;learn_react&#x27;</span>: <span class=\"hljs-string\">&#x27;Learn React&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p><code>src/locales/zh-TW.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-string\">&#x27;getting_started&#x27;</span>: <span class=\"hljs-string\">&#x27;編輯 &lt;code&gt;src/App.tsx&lt;/code&gt; 並儲存以重新載入。&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;learn_react&#x27;</span>: <span class=\"hljs-string\">&#x27;學習 React&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>在 React 應用程式入口 <code>src/index.js</code>，在 component tree 的上層引入 <code>I18nProvider</code>，並將語言包內容注入 Provider：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-dom&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;./index.css&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./App&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> serviceWorker <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./serviceWorker&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; I18nProvider &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./i18n&#x27;</span>;<br><br><span class=\"hljs-keyword\">const</span> locales = [ <span class=\"hljs-string\">&#x27;en-US&#x27;</span>, <span class=\"hljs-string\">&#x27;zh-TW&#x27;</span> ];<br><span class=\"hljs-keyword\">const</span> translations = &#123;<br>  <span class=\"hljs-string\">&#x27;en-US&#x27;</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./locales/en-US&#x27;</span>).default,<br>  <span class=\"hljs-string\">&#x27;zh-TW&#x27;</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./locales/zh-TW&#x27;</span>).default,<br>&#125;<br><br>ReactDOM.render(<br>  &lt;I18nProvider locales=&#123;locales&#125; translations=&#123;translations&#125;&gt;<br>    &lt;App /&gt;<br>  &lt;/I18nProvider&gt;,<br>  <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure>\n\n<p>然後在需要使用多國語言的 functional component 引入 <code>useI18n</code> hook 使用 <code>t</code> 函式來轉換對應的語系內容，<code>setLocale</code> 用來設置轉換語系：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> logo <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./logo.svg&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;./App.css&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; useI18n &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./i18n&#x27;</span>;<br><br><span class=\"hljs-keyword\">const</span> App: React.FC = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> &#123; t, setLocale &#125; = useI18n();<br><br>  <span class=\"hljs-keyword\">return</span> (<br>    &lt;div className=<span class=\"hljs-string\">&quot;App&quot;</span>&gt;<br>      &lt;header className=<span class=\"hljs-string\">&quot;App-header&quot;</span>&gt;<br>        &lt;img src=&#123;logo&#125; className=<span class=\"hljs-string\">&quot;App-logo&quot;</span> alt=<span class=\"hljs-string\">&quot;logo&quot;</span> /&gt;<br>        &lt;p dangerouslySetInnerHTML=&#123;&#123; <span class=\"hljs-attr\">__html</span>: t(<span class=\"hljs-string\">&#x27;getting_started&#x27;</span>) &#125;&#125; /&gt;<br>        &lt;a<br>          className=<span class=\"hljs-string\">&quot;App-link&quot;</span><br>          href=<span class=\"hljs-string\">&quot;https://reactjs.org&quot;</span><br>          target=<span class=\"hljs-string\">&quot;_blank&quot;</span><br>          rel=<span class=\"hljs-string\">&quot;noopener noreferrer&quot;</span><br>        &gt;<br>          &#123;t(<span class=\"hljs-string\">&#x27;learn_react&#x27;</span>)&#125;<br>        &lt;/a&gt;<br>      &lt;/header&gt;<br>      &lt;footer className=<span class=\"hljs-string\">&quot;App-Footer&quot;</span>&gt;<br>        &lt;span className=<span class=\"hljs-string\">&quot;App-Locale&quot;</span> onClick=&#123;<span class=\"hljs-function\">() =&gt;</span> setLocale(<span class=\"hljs-string\">&#x27;en-US&#x27;</span>)&#125;&gt;English&lt;/span&gt;<br>        &#123;<span class=\"hljs-string\">&#x27; | &#x27;</span>&#125;<br>        &lt;span className=<span class=\"hljs-string\">&quot;App-Locale&quot;</span> onClick=&#123;<span class=\"hljs-function\">() =&gt;</span> setLocale(<span class=\"hljs-string\">&#x27;zh-TW&#x27;</span>)&#125;&gt;正體中文&lt;/span&gt;<br>      &lt;/footer&gt;<br>    &lt;/div&gt;<br>  );<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;<br></code></pre></td></tr></table></figure>\n\n<p>最後執行 <code>npm start</code> 查看結果。</p>\n<p><img src=\"/2019/11/15/using-react-context-api-to-support-for-i18n/react-i18n-example.jpg\"></p>\n<h2 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h2><p>透過 React Context API 可以在 component 之間共享數據，結合 React Hook 與 HOC 可以很容易實現可複用的第三方 library。我們經由一個簡易的 i18n 功能展示如何使用它們，完整的範例可以參考 <a href=\"https://github.com/chunkai1312/react-i18n-example\">react-i18n-example</a>。</p>","categories":[{"name":"技術分享","path":"api/categories/技術分享.json"}],"tags":[{"name":"React","path":"api/tags/React.json"},{"name":"F2E","path":"api/tags/F2E.json"}]}
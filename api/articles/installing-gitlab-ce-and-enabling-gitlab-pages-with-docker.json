{"title":"使用 Docker 安裝 GitLab CE 並啟用 GitLab Pages","slug":"installing-gitlab-ce-and-enabling-gitlab-pages-with-docker","date":"2019-02-12T14:39:25.000Z","updated":"2021-09-05T09:20:10.812Z","comments":true,"path":"api/articles/installing-gitlab-ce-and-enabling-gitlab-pages-with-docker.json","excerpt":" [Figure] GitLab CE v8.16 版以後，支援 GitLab Pages 功能。就像 GitHub Pages 一樣，你可以為 GitLab 上的 project 建立靜態網站。","covers":["/2019/02/12/installing-gitlab-ce-and-enabling-gitlab-pages-with-docker/cover.jpg"],"content":"<p><img src=\"/2019/02/12/installing-gitlab-ce-and-enabling-gitlab-pages-with-docker/cover.jpg\"></p>\n<blockquote>\n<p>GitLab CE v8.16 版以後，支援 GitLab Pages 功能。就像 <a href=\"https://pages.github.com/\">GitHub Pages</a> 一樣，你可以為 GitLab 上的 project 建立靜態網站。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"使用-Docker-安裝-GitLab\"><a href=\"#使用-Docker-安裝-GitLab\" class=\"headerlink\" title=\"使用 Docker 安裝 GitLab\"></a>使用 Docker 安裝 GitLab</h2><p>以下使用 <a href=\"https://github.com/sameersbn/docker-gitlab\">sameersbn/docker-gitlab</a> 提供的鏡像檔安裝 GitLab 環境。最簡單的入門方式是透過 <a href=\"https://docs.docker.com/compose/\">docker-compose</a>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ wget https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml<br></code></pre></td></tr></table></figure>\n\n<p>使用以下命令啟動 GitLab：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>docker-compose up<br></code></pre></td></tr></table></figure>\n\n<p>將瀏覽器指向 <code>http://localhost:10080</code> 並使用預設的使用者名稱和密碼登錄：</p>\n<ul>\n<li>username: <code>root</code></li>\n<li>password: <code>5iveL!fe</code></li>\n</ul>\n<p><code>sameersbn/gitlab</code> 鏡像檔提供了可用的 <a href=\"https://github.com/sameersbn/docker-gitlab#available-configuration-parameters\">配置參數</a> 依照你想要的方式配置 GitLab。</p>\n<h2 id=\"配置-GitLab-Pages\"><a href=\"#配置-GitLab-Pages\" class=\"headerlink\" title=\"配置 GitLab Pages\"></a>配置 GitLab Pages</h2><h3 id=\"事前準備\"><a href=\"#事前準備\" class=\"headerlink\" title=\"事前準備\"></a>事前準備</h3><p>在設定 GitLab Pages 之前，需要：</p>\n<ol>\n<li>有一個單獨的網域名稱，在該網域下將提供 GitLab Pages。我們假設是 <code>example.io</code>。</li>\n<li>配置萬用字元（wildcard）DNS 記錄</li>\n<li>（Optional）如果決定在 HTTPS 下提供 Pages，需要為該網域提供萬用字元（wildcard）憑證。</li>\n<li>（Optional but recommended）請用共享的 GitLab Runners。</li>\n</ol>\n<h3 id=\"DNS-配置\"><a href=\"#DNS-配置\" class=\"headerlink\" title=\"DNS 配置\"></a>DNS 配置</h3><p>在 DNS 提供商配置一條 A 類型的萬用字元（wildcard）DNS 記錄，指向 GitLab 運行的主機。例如：</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">*.example.io. <span class=\"hljs-number\">1800</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">A</span> <span class=\"hljs-number\">1.1.1.1</span><br></code></pre></td></tr></table></figure>\n\n<p>其中 <code>example.io</code> 為 Gitlab Pages 的網域；而 <code>1.1.1.1</code> 是 GitLab 服務的 IP 位址。</p>\n<h3 id=\"啟用-GitLab-Pages\"><a href=\"#啟用-GitLab-Pages\" class=\"headerlink\" title=\"啟用 GitLab Pages\"></a>啟用 GitLab Pages</h3><p>要啟用 GitLab Pages 功能，需要寫入以下配置參數：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-string\">...</span><br>    <span class=\"hljs-attr\">envrironment:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">GITLAB_PAGES_ENABLED=true</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">GITLAB_PAGES_PORT=18080</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">GITLAB_PAGES_EXTERNAL_HTTP=:18080</span><br><span class=\"hljs-string\">...</span><br></code></pre></td></tr></table></figure>\n\n<p>GitLab Pages 預設跑在 docker 容器的 <code>8081</code> port。以下透過 docker-compose 設定對應到宿主機器的 <code>18080</code> port：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-string\">...</span><br>    <span class=\"hljs-attr\">ports:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;10080:80&quot;</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;10022:22&quot;</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;18080:8081&quot;</span><br><span class=\"hljs-string\">...</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"使用-Traefik-反向代理\"><a href=\"#使用-Traefik-反向代理\" class=\"headerlink\" title=\"使用 Traefik 反向代理\"></a>使用 Traefik 反向代理</h2><p><a href=\"https://traefik.io/\">Traefik</a> 是一套 HTTP 反向代理和負載均衡器，與 Docker 有深度的整合，可以輕鬆部署微服務。其安裝配置方式可參照 Traefik <a href=\"https://docs.traefik.io/user-guide/docker-and-lets-encrypt/\">官方文件</a>。</p>\n<p>假設底下是一份用於啟動 Traefik 服務的 <code>docker-compose.yml</code> 檔案：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&#x27;2&#x27;</span><br><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">traefik:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">traefik:1.5.4</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">80</span><span class=\"hljs-string\">:80</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">443</span><span class=\"hljs-string\">:443</span><br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">web</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/var/run/docker.sock:/var/run/docker.sock</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/opt/traefik/traefik.toml:/traefik.toml</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/opt/traefik/acme.json:/acme.json</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">traefik</span><br><br><span class=\"hljs-attr\">networks:</span><br>  <span class=\"hljs-attr\">web:</span><br>    <span class=\"hljs-attr\">external:</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<p>先建立一個 <code>web</code> 的 docker 虛擬網路：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker network create web<br></code></pre></td></tr></table></figure>\n\n<p>啟動 Traefik 服務：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker-compose up<br></code></pre></td></tr></table></figure>\n\n<p>然後我們修改原來 GitLab 的 <code>docker-compose.yml</code> 檔案，在 gitlab 服務下加入：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-string\">...</span><br>    <span class=\"hljs-attr\">labels:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;traefik.backend=gitlab&quot;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;traefik.gitlab.frontend.rule=Host:examole.com&quot;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;traefik.gitlab.port=80&quot;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;traefik.pages.frontend.rule=HostRegexp:&#123;subdomain:[a-z]+&#125;.examole.io&quot;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;traefik.pages.port=8081&quot;</span><br><span class=\"hljs-string\">...</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>將 <code>traefik.gitlab.frontend.rule=Host:examole.com</code> 中的 <code>examole.com</code> 換成你指定的 GitLab 網域名稱。</li>\n<li>將 <code>traefik.pages.frontend.rule=HostRegexp:&#123;subdomain:[a-z]+&#125;.examole.io</code> 中的 <code>examole.io</code> 換成你提供的 GitLab Pages 網域名稱。</li>\n</ul>\n<h2 id=\"建立-GitLab-Pages\"><a href=\"#建立-GitLab-Pages\" class=\"headerlink\" title=\"建立 GitLab Pages\"></a>建立 GitLab Pages</h2><p>GitLab 官方提供了許多建立 GitLab Pages 的 <a href=\"https://gitlab.com/pages\">範例</a>。以下以 <a href=\"https://github.com/GitbookIO/gitbook\">GitBook</a> 為例。</p>\n<p>我們在自架 GitLab 上建立一個 <code>docs</code> 的 group，並在底下建立 <code>gitbook</code> repo。然後將官方的 GitBook <a href=\"https://gitlab.com/pages/gitbook\">範例</a> clone 下來，push 至我們的 GitLab repo。</p>\n<p>官方預設已經寫好 <code>.gitlab-ci.yml</code> 腳本。如果 GitLab CI 運行沒問題，就會部署至 GitLab Pages。</p>\n<blockquote>\n<p>需要安裝 GitLab Runner 以執行 GitLab CI pipelines。</p>\n</blockquote>\n<p>打開瀏覽器，進入 <code>http://docs.example.io/gitbook</code> 查看內容是否正確。</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p><a href=\"http://www.damagehead.com/docker-gitlab/\">Docker Gitlab</a><br><a href=\"https://docs.gitlab.com/ce/user/project/pages/index.html\">GitLab Pages</a><br><a href=\"https://traefik.io/\">Traefik</a></p>\n","more":"<h2 id=\"使用-Docker-安裝-GitLab\"><a href=\"#使用-Docker-安裝-GitLab\" class=\"headerlink\" title=\"使用 Docker 安裝 GitLab\"></a>使用 Docker 安裝 GitLab</h2><p>以下使用 <a href=\"https://github.com/sameersbn/docker-gitlab\">sameersbn/docker-gitlab</a> 提供的鏡像檔安裝 GitLab 環境。最簡單的入門方式是透過 <a href=\"https://docs.docker.com/compose/\">docker-compose</a>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ wget https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml<br></code></pre></td></tr></table></figure>\n\n<p>使用以下命令啟動 GitLab：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>docker-compose up<br></code></pre></td></tr></table></figure>\n\n<p>將瀏覽器指向 <code>http://localhost:10080</code> 並使用預設的使用者名稱和密碼登錄：</p>\n<ul>\n<li>username: <code>root</code></li>\n<li>password: <code>5iveL!fe</code></li>\n</ul>\n<p><code>sameersbn/gitlab</code> 鏡像檔提供了可用的 <a href=\"https://github.com/sameersbn/docker-gitlab#available-configuration-parameters\">配置參數</a> 依照你想要的方式配置 GitLab。</p>\n<h2 id=\"配置-GitLab-Pages\"><a href=\"#配置-GitLab-Pages\" class=\"headerlink\" title=\"配置 GitLab Pages\"></a>配置 GitLab Pages</h2><h3 id=\"事前準備\"><a href=\"#事前準備\" class=\"headerlink\" title=\"事前準備\"></a>事前準備</h3><p>在設定 GitLab Pages 之前，需要：</p>\n<ol>\n<li>有一個單獨的網域名稱，在該網域下將提供 GitLab Pages。我們假設是 <code>example.io</code>。</li>\n<li>配置萬用字元（wildcard）DNS 記錄</li>\n<li>（Optional）如果決定在 HTTPS 下提供 Pages，需要為該網域提供萬用字元（wildcard）憑證。</li>\n<li>（Optional but recommended）請用共享的 GitLab Runners。</li>\n</ol>\n<h3 id=\"DNS-配置\"><a href=\"#DNS-配置\" class=\"headerlink\" title=\"DNS 配置\"></a>DNS 配置</h3><p>在 DNS 提供商配置一條 A 類型的萬用字元（wildcard）DNS 記錄，指向 GitLab 運行的主機。例如：</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">*.example.io. <span class=\"hljs-number\">1800</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">A</span> <span class=\"hljs-number\">1.1.1.1</span><br></code></pre></td></tr></table></figure>\n\n<p>其中 <code>example.io</code> 為 Gitlab Pages 的網域；而 <code>1.1.1.1</code> 是 GitLab 服務的 IP 位址。</p>\n<h3 id=\"啟用-GitLab-Pages\"><a href=\"#啟用-GitLab-Pages\" class=\"headerlink\" title=\"啟用 GitLab Pages\"></a>啟用 GitLab Pages</h3><p>要啟用 GitLab Pages 功能，需要寫入以下配置參數：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-string\">...</span><br>    <span class=\"hljs-attr\">envrironment:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">GITLAB_PAGES_ENABLED=true</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">GITLAB_PAGES_PORT=18080</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">GITLAB_PAGES_EXTERNAL_HTTP=:18080</span><br><span class=\"hljs-string\">...</span><br></code></pre></td></tr></table></figure>\n\n<p>GitLab Pages 預設跑在 docker 容器的 <code>8081</code> port。以下透過 docker-compose 設定對應到宿主機器的 <code>18080</code> port：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-string\">...</span><br>    <span class=\"hljs-attr\">ports:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;10080:80&quot;</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;10022:22&quot;</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;18080:8081&quot;</span><br><span class=\"hljs-string\">...</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"使用-Traefik-反向代理\"><a href=\"#使用-Traefik-反向代理\" class=\"headerlink\" title=\"使用 Traefik 反向代理\"></a>使用 Traefik 反向代理</h2><p><a href=\"https://traefik.io/\">Traefik</a> 是一套 HTTP 反向代理和負載均衡器，與 Docker 有深度的整合，可以輕鬆部署微服務。其安裝配置方式可參照 Traefik <a href=\"https://docs.traefik.io/user-guide/docker-and-lets-encrypt/\">官方文件</a>。</p>\n<p>假設底下是一份用於啟動 Traefik 服務的 <code>docker-compose.yml</code> 檔案：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&#x27;2&#x27;</span><br><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">traefik:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">traefik:1.5.4</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">80</span><span class=\"hljs-string\">:80</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">443</span><span class=\"hljs-string\">:443</span><br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">web</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/var/run/docker.sock:/var/run/docker.sock</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/opt/traefik/traefik.toml:/traefik.toml</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/opt/traefik/acme.json:/acme.json</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">traefik</span><br><br><span class=\"hljs-attr\">networks:</span><br>  <span class=\"hljs-attr\">web:</span><br>    <span class=\"hljs-attr\">external:</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<p>先建立一個 <code>web</code> 的 docker 虛擬網路：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker network create web<br></code></pre></td></tr></table></figure>\n\n<p>啟動 Traefik 服務：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker-compose up<br></code></pre></td></tr></table></figure>\n\n<p>然後我們修改原來 GitLab 的 <code>docker-compose.yml</code> 檔案，在 gitlab 服務下加入：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-string\">...</span><br>    <span class=\"hljs-attr\">labels:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;traefik.backend=gitlab&quot;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;traefik.gitlab.frontend.rule=Host:examole.com&quot;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;traefik.gitlab.port=80&quot;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;traefik.pages.frontend.rule=HostRegexp:&#123;subdomain:[a-z]+&#125;.examole.io&quot;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;traefik.pages.port=8081&quot;</span><br><span class=\"hljs-string\">...</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>將 <code>traefik.gitlab.frontend.rule=Host:examole.com</code> 中的 <code>examole.com</code> 換成你指定的 GitLab 網域名稱。</li>\n<li>將 <code>traefik.pages.frontend.rule=HostRegexp:&#123;subdomain:[a-z]+&#125;.examole.io</code> 中的 <code>examole.io</code> 換成你提供的 GitLab Pages 網域名稱。</li>\n</ul>\n<h2 id=\"建立-GitLab-Pages\"><a href=\"#建立-GitLab-Pages\" class=\"headerlink\" title=\"建立 GitLab Pages\"></a>建立 GitLab Pages</h2><p>GitLab 官方提供了許多建立 GitLab Pages 的 <a href=\"https://gitlab.com/pages\">範例</a>。以下以 <a href=\"https://github.com/GitbookIO/gitbook\">GitBook</a> 為例。</p>\n<p>我們在自架 GitLab 上建立一個 <code>docs</code> 的 group，並在底下建立 <code>gitbook</code> repo。然後將官方的 GitBook <a href=\"https://gitlab.com/pages/gitbook\">範例</a> clone 下來，push 至我們的 GitLab repo。</p>\n<p>官方預設已經寫好 <code>.gitlab-ci.yml</code> 腳本。如果 GitLab CI 運行沒問題，就會部署至 GitLab Pages。</p>\n<blockquote>\n<p>需要安裝 GitLab Runner 以執行 GitLab CI pipelines。</p>\n</blockquote>\n<p>打開瀏覽器，進入 <code>http://docs.example.io/gitbook</code> 查看內容是否正確。</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p><a href=\"http://www.damagehead.com/docker-gitlab/\">Docker Gitlab</a><br><a href=\"https://docs.gitlab.com/ce/user/project/pages/index.html\">GitLab Pages</a><br><a href=\"https://traefik.io/\">Traefik</a></p>","categories":[{"name":"技術分享","path":"api/categories/技術分享.json"}],"tags":[{"name":"GitLab","path":"api/tags/GitLab.json"},{"name":"GitLab Pages","path":"api/tags/GitLab Pages.json"},{"name":"Docker","path":"api/tags/Docker.json"},{"name":"Traefik","path":"api/tags/Traefik.json"}]}
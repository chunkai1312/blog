{"title":"使用 Slack Incoming Webhook 為 Express 應用程式建立警報通知","slug":"using-slack-incoming-webhook-as-alert-notification-for-express-application","date":"2017-01-21T13:11:40.000Z","updated":"2021-09-05T09:19:07.063Z","comments":true,"path":"api/articles/using-slack-incoming-webhook-as-alert-notification-for-express-application.json","excerpt":" [Figure] 有時候我們可能需要檢查應用程式的錯誤日誌，來確認錯誤的發生原因。Slack 作為團隊內部的溝通工具非常方便，其 Incoming Webhooks 提供 API 可以直接向 Slack Channel 發送訊息。本文將介紹如何使用 Slack Incoming Webhooks API 為 Express 應用程式提供即時的錯誤警告通知服務。","covers":["/2017/01/21/using-slack-incoming-webhook-as-alert-notification-for-express-application/cover.jpg","/2017/01/21/using-slack-incoming-webhook-as-alert-notification-for-express-application/4xx.png","/2017/01/21/using-slack-incoming-webhook-as-alert-notification-for-express-application/5xx.png"],"content":"<p><img src=\"/2017/01/21/using-slack-incoming-webhook-as-alert-notification-for-express-application/cover.jpg\"></p>\n<blockquote>\n<p>有時候我們可能需要檢查應用程式的錯誤日誌，來確認錯誤的發生原因。<a href=\"https://slack.com/\">Slack</a> 作為團隊內部的溝通工具非常方便，其 <a href=\"https://punwave.slack.com/apps/A0F7XDUAZ-incoming-webhooks\">Incoming Webhooks</a> 提供 API 可以直接向 Slack Channel 發送訊息。本文將介紹如何使用 <a href=\"https://api.slack.com/incoming-webhooks\">Slack Incoming Webhooks API</a> 為 Express 應用程式提供即時的錯誤警告通知服務。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"Using-Slack’s-Incoming-Webhooks-API\"><a href=\"#Using-Slack’s-Incoming-Webhooks-API\" class=\"headerlink\" title=\"Using Slack’s Incoming Webhooks API\"></a>Using Slack’s Incoming Webhooks API</h2><p>為了使用 Slack 的 Incoming Webhooks API，我們需要以下幾個步驟：</p>\n<ul>\n<li>請至 <a href=\"https://slack.com/apps/A0F7XDUAZ-incoming-webhooks\">Incoming WebHooks</a> 頁面，如果尚未登入 Slack ，請點選 <code>Sign in to install</code> 。</li>\n<li>點選 <code>Add Configuration</code> ，可以選擇既有的 Channel，也可以選擇 <strong>create a new channel</strong> 。然後按下 <code>Add Incoming WebHooks integration</code> 。</li>\n<li>設置 Incoming WebHooks ，選項很多，可依個人喜好進行配置。最重要的是取得 <code>Webhook URL</code> 。完成後請點選 <code>Save Settings</code> 。</li>\n</ul>\n<p>到這裡，我們的設定就已經完成了，您可以從官方的 <a href=\"https://api.slack.com/incoming-webhooks\">Slack API</a> 文件查看詳細的使用說明。</p>\n<h2 id=\"Sending-Express-Server-Error-to-Slack\"><a href=\"#Sending-Express-Server-Error-to-Slack\" class=\"headerlink\" title=\"Sending Express Server Error to Slack\"></a>Sending Express Server Error to Slack</h2><p><a href=\"http://expressjs.com/\">Express</a> 目前是 Node.js 使用最廣泛的 Web 開發框架，這裡就不多做介紹。為求方便，我已經實作 <a href=\"https://github.com/chunkai1312/express-error-slack\">express-error-slack</a> 模組，使用方式非常簡單，只要掛上 middleware ，設定剛剛從 Slack 上取得的 <code>Webhook URI</code> 即可，以下是一個簡單的範例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;express&#x27;</span>)<br><span class=\"hljs-keyword\">const</span> errorToSlack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;express-error-slack&#x27;</span>)<br><br><span class=\"hljs-keyword\">const</span> app = express()<br><span class=\"hljs-comment\">// some middlewares here</span><br>app.use(errorToSlack(&#123; <span class=\"hljs-attr\">webhookUri</span>: <span class=\"hljs-string\">&#x27;YOUR_SLACK_WEBHOOK_URI&#x27;</span> &#125;))<br><span class=\"hljs-comment\">// final middleware here</span><br><br>app.listen(<span class=\"hljs-number\">3000</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;Example app listening on port 3000!&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>啟動 Express Server 後，只要發生 Http Status 4xx 或 5xx 的錯誤，就會將錯誤的 call stack 以及 request log，立即發送至所設定的 Slack Channel。以下為結果範例：</p>\n<ul>\n<li><p>4xx<br><img src=\"/2017/01/21/using-slack-incoming-webhook-as-alert-notification-for-express-application/4xx.png\"></p>\n</li>\n<li><p>5xx<br><img src=\"/2017/01/21/using-slack-incoming-webhook-as-alert-notification-for-express-application/5xx.png\"></p>\n</li>\n</ul>\n<p>如果使用上有任何問題及想法，歡迎 Pull Request 或者聯繫我。</p>\n<p>更新：新增一個 <code>option.skip</code> 的可選自訂函式，以便決定是否忽略錯誤或將錯誤發送至 Slack。</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://api.slack.com/incoming-webhooks\">Slack API - Incoming Webhooks</a></li>\n<li><a href=\"https://github.com/chunkai1312/express-error-slack#express-error-slack\">express-error-slack</a></li>\n</ul>\n","more":"<h2 id=\"Using-Slack’s-Incoming-Webhooks-API\"><a href=\"#Using-Slack’s-Incoming-Webhooks-API\" class=\"headerlink\" title=\"Using Slack’s Incoming Webhooks API\"></a>Using Slack’s Incoming Webhooks API</h2><p>為了使用 Slack 的 Incoming Webhooks API，我們需要以下幾個步驟：</p>\n<ul>\n<li>請至 <a href=\"https://slack.com/apps/A0F7XDUAZ-incoming-webhooks\">Incoming WebHooks</a> 頁面，如果尚未登入 Slack ，請點選 <code>Sign in to install</code> 。</li>\n<li>點選 <code>Add Configuration</code> ，可以選擇既有的 Channel，也可以選擇 <strong>create a new channel</strong> 。然後按下 <code>Add Incoming WebHooks integration</code> 。</li>\n<li>設置 Incoming WebHooks ，選項很多，可依個人喜好進行配置。最重要的是取得 <code>Webhook URL</code> 。完成後請點選 <code>Save Settings</code> 。</li>\n</ul>\n<p>到這裡，我們的設定就已經完成了，您可以從官方的 <a href=\"https://api.slack.com/incoming-webhooks\">Slack API</a> 文件查看詳細的使用說明。</p>\n<h2 id=\"Sending-Express-Server-Error-to-Slack\"><a href=\"#Sending-Express-Server-Error-to-Slack\" class=\"headerlink\" title=\"Sending Express Server Error to Slack\"></a>Sending Express Server Error to Slack</h2><p><a href=\"http://expressjs.com/\">Express</a> 目前是 Node.js 使用最廣泛的 Web 開發框架，這裡就不多做介紹。為求方便，我已經實作 <a href=\"https://github.com/chunkai1312/express-error-slack\">express-error-slack</a> 模組，使用方式非常簡單，只要掛上 middleware ，設定剛剛從 Slack 上取得的 <code>Webhook URI</code> 即可，以下是一個簡單的範例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;express&#x27;</span>)<br><span class=\"hljs-keyword\">const</span> errorToSlack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;express-error-slack&#x27;</span>)<br><br><span class=\"hljs-keyword\">const</span> app = express()<br><span class=\"hljs-comment\">// some middlewares here</span><br>app.use(errorToSlack(&#123; <span class=\"hljs-attr\">webhookUri</span>: <span class=\"hljs-string\">&#x27;YOUR_SLACK_WEBHOOK_URI&#x27;</span> &#125;))<br><span class=\"hljs-comment\">// final middleware here</span><br><br>app.listen(<span class=\"hljs-number\">3000</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;Example app listening on port 3000!&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>啟動 Express Server 後，只要發生 Http Status 4xx 或 5xx 的錯誤，就會將錯誤的 call stack 以及 request log，立即發送至所設定的 Slack Channel。以下為結果範例：</p>\n<ul>\n<li><p>4xx<br><img src=\"/2017/01/21/using-slack-incoming-webhook-as-alert-notification-for-express-application/4xx.png\"></p>\n</li>\n<li><p>5xx<br><img src=\"/2017/01/21/using-slack-incoming-webhook-as-alert-notification-for-express-application/5xx.png\"></p>\n</li>\n</ul>\n<p>如果使用上有任何問題及想法，歡迎 Pull Request 或者聯繫我。</p>\n<p>更新：新增一個 <code>option.skip</code> 的可選自訂函式，以便決定是否忽略錯誤或將錯誤發送至 Slack。</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://api.slack.com/incoming-webhooks\">Slack API - Incoming Webhooks</a></li>\n<li><a href=\"https://github.com/chunkai1312/express-error-slack#express-error-slack\">express-error-slack</a></li>\n</ul>","categories":[{"name":"技術分享","path":"api/categories/技術分享.json"}],"tags":[{"name":"NodeJS","path":"api/tags/NodeJS.json"},{"name":"Slack","path":"api/tags/Slack.json"},{"name":"Express","path":"api/tags/Express.json"}]}
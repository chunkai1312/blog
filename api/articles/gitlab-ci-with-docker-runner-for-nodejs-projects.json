{"title":"使用 Docker Runner 建立 GitLab CI 為 Node.js 專案進行持續整合","slug":"gitlab-ci-with-docker-runner-for-nodejs-projects","date":"2017-01-07T11:02:44.000Z","updated":"2021-09-05T09:19:03.506Z","comments":true,"path":"api/articles/gitlab-ci-with-docker-runner-for-nodejs-projects.json","excerpt":" [Figure] 本篇文章將介紹如何在 GitLab 上使用 GitLab CI 為 Node.js 應用程式進行持續整合。首先，必須建置好 GitLab 環境，並在一台主機上安裝好 Docker，作為 CI Server 。","covers":["/2017/01/07/gitlab-ci-with-docker-runner-for-nodejs-projects/cover.jpg","/2017/01/07/gitlab-ci-with-docker-runner-for-nodejs-projects/build.png","/2017/01/07/gitlab-ci-with-docker-runner-for-nodejs-projects/readme.png"],"content":"<p><img src=\"/2017/01/07/gitlab-ci-with-docker-runner-for-nodejs-projects/cover.jpg\"></p>\n<blockquote>\n<p>本篇文章將介紹如何在 GitLab 上使用 GitLab CI 為 Node.js 應用程式進行持續整合。首先，必須建置好 GitLab 環境，並在一台主機上安裝好 Docker，作為 CI Server 。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"Install-GitLab-Runner\"><a href=\"#Install-GitLab-Runner\" class=\"headerlink\" title=\"Install GitLab Runner\"></a>Install GitLab Runner</h2><p>使用 GitLab 官方提供的 Docker 的映像檔 <a href=\"https://hub.docker.com/r/gitlab/gitlab-runner/\">gitlab/gitlab-runner</a> 安裝 GitLab Runner：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ sudo docker run -d --name gitlab-runner --restart always \\<br>  -v /var/run/docker.sock:/var/run/docker.sock \\<br>  -v /srv/gitlab-runner/config:/etc/gitlab-runner \\<br>  gitlab/gitlab-runner:latest<br></code></pre></td></tr></table></figure>\n\n<p>確認 Docker Container 是否正常運行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ sudo docker ps<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Register-GitLab-Runner\"><a href=\"#Register-GitLab-Runner\" class=\"headerlink\" title=\"Register GitLab Runner\"></a>Register GitLab Runner</h2><p>使用 Docker 安裝好 GitLab Runner 後，我們需要在 GitLab 上註冊這個 Runner 用來跑 CI：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ sudo docker <span class=\"hljs-built_in\">exec</span> -it gitlab-runner gitlab-runner register<br></code></pre></td></tr></table></figure>\n\n<p>接著會要求輸入必要的配置訊息。其中，會要求輸入 <strong>Registration Token</strong> ， 這可以在 GitLab 的 project 設定下進入 Runners 頁面找到。 </p>\n<p>或者，您也可以直接加入參數進行配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ sudo docker <span class=\"hljs-built_in\">exec</span> -it gitlab-runner gitlab-runner register -n \\<br>  --url https://gitlab.com/ci \\<br>  --registration-token REGISTRATION_TOKEN \\<br>  --executor docker \\<br>  --description <span class=\"hljs-string\">&quot;My Docker Runner&quot;</span> \\<br>  --docker-image <span class=\"hljs-string\">&quot;node:boron&quot;</span> \\<br>  --docker-volumes /var/run/docker.sock:/var/run/docker.sock<br></code></pre></td></tr></table></figure>\n\n<p>這裡我們預設要進行 CI 的環境為 Node.js v6，並且使用官方提供的 Docker 映像檔 <code>node:boron</code> 。</p>\n<p>配置完畢後，應會在 terminal 上顯示 <code>Registering runner... succeeded</code> 。然後在 GitLab 上的 project 底下的 Runners 頁面，可以在 <code>Available specific runners</code> 區塊看到啟動的 Runner 。</p>\n<p>在該 runner 右側點選按鈕 <code>Enable for this project</code> ，我們就可以將此 runner 用在該 project。</p>\n<h2 id=\"Create-a-Node-js-Application\"><a href=\"#Create-a-Node-js-Application\" class=\"headerlink\" title=\"Create a Node.js Application\"></a>Create a Node.js Application</h2><p>接著我們會建立一個名為 <code>gitlab-ci-demo</code> 的 Node.js 應用程式，來測試 GitLab CI 。首先，我們創建一個目錄，然後配置 <code>package.json</code> 檔案：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;gitlab-ci-demo&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;version&quot;</span>: <span class=\"hljs-string\">&quot;1.0.0&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;scripts&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;start&quot;</span>: <span class=\"hljs-string\">&quot;node app.js&quot;</span>,<br>    <span class=\"hljs-attr\">&quot;test&quot;</span>: <span class=\"hljs-string\">&quot;nyc --reporter=text-summary mocha test/**/*test.js&quot;</span><br>  &#125;,<br>  <span class=\"hljs-attr\">&quot;dependencies&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;express&quot;</span>: <span class=\"hljs-string\">&quot;^4.14.0&quot;</span><br>  &#125;,<br>  <span class=\"hljs-attr\">&quot;devDependencies&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;mocha&quot;</span>: <span class=\"hljs-string\">&quot;^3.2.0&quot;</span>,<br>    <span class=\"hljs-attr\">&quot;nyc&quot;</span>: <span class=\"hljs-string\">&quot;^10.0.0&quot;</span>,<br>    <span class=\"hljs-attr\">&quot;supertest&quot;</span>: <span class=\"hljs-string\">&quot;^2.0.1&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接著安裝依賴套件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ npm install<br></code></pre></td></tr></table></figure>\n\n<p>在該目錄下，建立 <code>app.js</code> 檔案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-meta\">&#x27;use strict&#x27;</span><br><br><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;express&#x27;</span>)<br><br><span class=\"hljs-keyword\">const</span> app = express()<br><br>app.get(<span class=\"hljs-string\">&#x27;/&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class=\"hljs-string\">&#x27;Hello World&#x27;</span>)<br>&#125;)<br><br>app.listen(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;Running on http://localhost:8080&#x27;</span>)  <br>&#125;)<br><br><span class=\"hljs-built_in\">module</span>.exports = app<br></code></pre></td></tr></table></figure>\n\n<p>這是一個非常簡單的 <a href=\"https://expressjs.com/\">express</a> 範例。完成後，我們試著執行啟動它：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ npm start<br></code></pre></td></tr></table></figure>\n\n<p>命令列顯示 <code>Running on http://localhost:8080</code> 表示已經啟動該 server。</p>\n<p>打開瀏覽器，鍵入網址 <code>http://localhost:8080</code> ，頁面上應會顯示 <code>Hello World</code> 。</p>\n<h2 id=\"Write-Test\"><a href=\"#Write-Test\" class=\"headerlink\" title=\"Write Test\"></a>Write Test</h2><p>在這裡，我們使用 <a href=\"https://mochajs.org/\">mocha</a> 作為測試框架，以 <a href=\"https://github.com/visionmedia/supertest\">supertest</a> 來測試 express 應用。</p>\n<p>為了撰寫測試，在 project 根目錄下新增 <code>test</code> 目錄，然後建立 <code>app.test.js</code> 檔案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-meta\">&#x27;use strict&#x27;</span><br><br><span class=\"hljs-keyword\">const</span> request = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;supertest&#x27;</span>)<br><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;../app&#x27;</span>)<br><br>describe(<span class=\"hljs-string\">&#x27;GET /&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  it(<span class=\"hljs-string\">&#x27;should respond &quot;Hello World&quot;&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">done</span>) =&gt;</span> &#123;<br>    request(app)<br>      .get(<span class=\"hljs-string\">&#x27;/&#x27;</span>)<br>      .expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&#x27;Hello World&#x27;</span>, done)<br>  &#125;)<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>接著執行測試：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ npm <span class=\"hljs-built_in\">test</span><br></code></pre></td></tr></table></figure>\n\n<p>若無意外，應會顯示類似以下訊息，表示通過測試：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">Running on http://localhost:8080<br><span class=\"hljs-code\">  GET /</span><br><span class=\"hljs-code\">    ✓ should respond &quot;Hello World&quot; (49ms)</span><br><br><br><span class=\"hljs-code\">  1 passing (59ms)</span><br><br><br>=============================== Coverage summary ===============================<br>Statements   : 100% ( 7/7 )<br>Branches     : 100% ( 0/0 )<br>Functions    : 100% ( 2/2 )<br>Lines        : 100% ( 7/7 )<br>================================================================================<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"CI-Configuration\"><a href=\"#CI-Configuration\" class=\"headerlink\" title=\"CI Configuration\"></a>CI Configuration</h2><p>在 project 根目錄下加入 <code>.gitlab-ci.yml</code> 檔案來定義 CI 流程。相關配置可參考<a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html\">官方文件</a>，以下是一個簡單的範例：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">cache:</span><br>  <span class=\"hljs-attr\">paths:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">node_modules/</span><br><br><span class=\"hljs-attr\">before_script:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span><br>  <br><span class=\"hljs-attr\">test:</span><br>  <span class=\"hljs-attr\">script:</span><br>   <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">test</span><br></code></pre></td></tr></table></figure>\n\n<p>簡單說明一下這個配置。我們會在跑 script 前，執行 <code>npm install</code> 來安裝依賴套件，然後執行 <code>npm test</code> 運行測試。如果過程中沒有發生錯誤，並且通過測試，就視為 <strong>build pass</strong> 。</p>\n<p>至此，我們已經準備好專案了。我們建立一個簡單的 Node.js 應用程式，並寫好測試，接著就將專案推送至 GitLab 。</p>\n<p>如果有在 Runners 設定 <code>Enable for this project</code> ，此時就會開始跑 CI ， 然後可以在 GitLab 查看 build 狀態與結果。</p>\n<p><img src=\"/2017/01/07/gitlab-ci-with-docker-runner-for-nodejs-projects/build.png\"></p>\n<h2 id=\"Build-Status-amp-Coverage-Report\"><a href=\"#Build-Status-amp-Coverage-Report\" class=\"headerlink\" title=\"Build Status &amp; Coverage Report\"></a>Build Status &amp; Coverage Report</h2><p>最後，我們可以為 project 的 <code>README.md</code> 檔案加入 build status 和 test coverage 圖示。</p>\n<p>在 GitLab 的 project 設定下進入 CI/CD Pipelines 頁面，在 <strong>Test coverage parsing</strong> 欄位填入 <code>^Lines\\s*:\\s*([^%]+)</code> 。然後將下面 <code>Build status</code> 與 <code>Coverage report</code> 的 Markdown 語法寫入 <code>README.md</code> 檔案。</p>\n<p><img src=\"/2017/01/07/gitlab-ci-with-docker-runner-for-nodejs-projects/readme.png\"></p>\n<p>大功告成。</p>\n","more":"<h2 id=\"Install-GitLab-Runner\"><a href=\"#Install-GitLab-Runner\" class=\"headerlink\" title=\"Install GitLab Runner\"></a>Install GitLab Runner</h2><p>使用 GitLab 官方提供的 Docker 的映像檔 <a href=\"https://hub.docker.com/r/gitlab/gitlab-runner/\">gitlab/gitlab-runner</a> 安裝 GitLab Runner：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ sudo docker run -d --name gitlab-runner --restart always \\<br>  -v /var/run/docker.sock:/var/run/docker.sock \\<br>  -v /srv/gitlab-runner/config:/etc/gitlab-runner \\<br>  gitlab/gitlab-runner:latest<br></code></pre></td></tr></table></figure>\n\n<p>確認 Docker Container 是否正常運行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ sudo docker ps<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Register-GitLab-Runner\"><a href=\"#Register-GitLab-Runner\" class=\"headerlink\" title=\"Register GitLab Runner\"></a>Register GitLab Runner</h2><p>使用 Docker 安裝好 GitLab Runner 後，我們需要在 GitLab 上註冊這個 Runner 用來跑 CI：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ sudo docker <span class=\"hljs-built_in\">exec</span> -it gitlab-runner gitlab-runner register<br></code></pre></td></tr></table></figure>\n\n<p>接著會要求輸入必要的配置訊息。其中，會要求輸入 <strong>Registration Token</strong> ， 這可以在 GitLab 的 project 設定下進入 Runners 頁面找到。 </p>\n<p>或者，您也可以直接加入參數進行配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ sudo docker <span class=\"hljs-built_in\">exec</span> -it gitlab-runner gitlab-runner register -n \\<br>  --url https://gitlab.com/ci \\<br>  --registration-token REGISTRATION_TOKEN \\<br>  --executor docker \\<br>  --description <span class=\"hljs-string\">&quot;My Docker Runner&quot;</span> \\<br>  --docker-image <span class=\"hljs-string\">&quot;node:boron&quot;</span> \\<br>  --docker-volumes /var/run/docker.sock:/var/run/docker.sock<br></code></pre></td></tr></table></figure>\n\n<p>這裡我們預設要進行 CI 的環境為 Node.js v6，並且使用官方提供的 Docker 映像檔 <code>node:boron</code> 。</p>\n<p>配置完畢後，應會在 terminal 上顯示 <code>Registering runner... succeeded</code> 。然後在 GitLab 上的 project 底下的 Runners 頁面，可以在 <code>Available specific runners</code> 區塊看到啟動的 Runner 。</p>\n<p>在該 runner 右側點選按鈕 <code>Enable for this project</code> ，我們就可以將此 runner 用在該 project。</p>\n<h2 id=\"Create-a-Node-js-Application\"><a href=\"#Create-a-Node-js-Application\" class=\"headerlink\" title=\"Create a Node.js Application\"></a>Create a Node.js Application</h2><p>接著我們會建立一個名為 <code>gitlab-ci-demo</code> 的 Node.js 應用程式，來測試 GitLab CI 。首先，我們創建一個目錄，然後配置 <code>package.json</code> 檔案：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;gitlab-ci-demo&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;version&quot;</span>: <span class=\"hljs-string\">&quot;1.0.0&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;scripts&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;start&quot;</span>: <span class=\"hljs-string\">&quot;node app.js&quot;</span>,<br>    <span class=\"hljs-attr\">&quot;test&quot;</span>: <span class=\"hljs-string\">&quot;nyc --reporter=text-summary mocha test/**/*test.js&quot;</span><br>  &#125;,<br>  <span class=\"hljs-attr\">&quot;dependencies&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;express&quot;</span>: <span class=\"hljs-string\">&quot;^4.14.0&quot;</span><br>  &#125;,<br>  <span class=\"hljs-attr\">&quot;devDependencies&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;mocha&quot;</span>: <span class=\"hljs-string\">&quot;^3.2.0&quot;</span>,<br>    <span class=\"hljs-attr\">&quot;nyc&quot;</span>: <span class=\"hljs-string\">&quot;^10.0.0&quot;</span>,<br>    <span class=\"hljs-attr\">&quot;supertest&quot;</span>: <span class=\"hljs-string\">&quot;^2.0.1&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接著安裝依賴套件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ npm install<br></code></pre></td></tr></table></figure>\n\n<p>在該目錄下，建立 <code>app.js</code> 檔案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-meta\">&#x27;use strict&#x27;</span><br><br><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;express&#x27;</span>)<br><br><span class=\"hljs-keyword\">const</span> app = express()<br><br>app.get(<span class=\"hljs-string\">&#x27;/&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class=\"hljs-string\">&#x27;Hello World&#x27;</span>)<br>&#125;)<br><br>app.listen(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;Running on http://localhost:8080&#x27;</span>)  <br>&#125;)<br><br><span class=\"hljs-built_in\">module</span>.exports = app<br></code></pre></td></tr></table></figure>\n\n<p>這是一個非常簡單的 <a href=\"https://expressjs.com/\">express</a> 範例。完成後，我們試著執行啟動它：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ npm start<br></code></pre></td></tr></table></figure>\n\n<p>命令列顯示 <code>Running on http://localhost:8080</code> 表示已經啟動該 server。</p>\n<p>打開瀏覽器，鍵入網址 <code>http://localhost:8080</code> ，頁面上應會顯示 <code>Hello World</code> 。</p>\n<h2 id=\"Write-Test\"><a href=\"#Write-Test\" class=\"headerlink\" title=\"Write Test\"></a>Write Test</h2><p>在這裡，我們使用 <a href=\"https://mochajs.org/\">mocha</a> 作為測試框架，以 <a href=\"https://github.com/visionmedia/supertest\">supertest</a> 來測試 express 應用。</p>\n<p>為了撰寫測試，在 project 根目錄下新增 <code>test</code> 目錄，然後建立 <code>app.test.js</code> 檔案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-meta\">&#x27;use strict&#x27;</span><br><br><span class=\"hljs-keyword\">const</span> request = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;supertest&#x27;</span>)<br><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;../app&#x27;</span>)<br><br>describe(<span class=\"hljs-string\">&#x27;GET /&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  it(<span class=\"hljs-string\">&#x27;should respond &quot;Hello World&quot;&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">done</span>) =&gt;</span> &#123;<br>    request(app)<br>      .get(<span class=\"hljs-string\">&#x27;/&#x27;</span>)<br>      .expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&#x27;Hello World&#x27;</span>, done)<br>  &#125;)<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>接著執行測試：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ npm <span class=\"hljs-built_in\">test</span><br></code></pre></td></tr></table></figure>\n\n<p>若無意外，應會顯示類似以下訊息，表示通過測試：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">Running on http://localhost:8080<br><span class=\"hljs-code\">  GET /</span><br><span class=\"hljs-code\">    ✓ should respond &quot;Hello World&quot; (49ms)</span><br><br><br><span class=\"hljs-code\">  1 passing (59ms)</span><br><br><br>=============================== Coverage summary ===============================<br>Statements   : 100% ( 7/7 )<br>Branches     : 100% ( 0/0 )<br>Functions    : 100% ( 2/2 )<br>Lines        : 100% ( 7/7 )<br>================================================================================<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"CI-Configuration\"><a href=\"#CI-Configuration\" class=\"headerlink\" title=\"CI Configuration\"></a>CI Configuration</h2><p>在 project 根目錄下加入 <code>.gitlab-ci.yml</code> 檔案來定義 CI 流程。相關配置可參考<a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html\">官方文件</a>，以下是一個簡單的範例：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">cache:</span><br>  <span class=\"hljs-attr\">paths:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">node_modules/</span><br><br><span class=\"hljs-attr\">before_script:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span><br>  <br><span class=\"hljs-attr\">test:</span><br>  <span class=\"hljs-attr\">script:</span><br>   <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">test</span><br></code></pre></td></tr></table></figure>\n\n<p>簡單說明一下這個配置。我們會在跑 script 前，執行 <code>npm install</code> 來安裝依賴套件，然後執行 <code>npm test</code> 運行測試。如果過程中沒有發生錯誤，並且通過測試，就視為 <strong>build pass</strong> 。</p>\n<p>至此，我們已經準備好專案了。我們建立一個簡單的 Node.js 應用程式，並寫好測試，接著就將專案推送至 GitLab 。</p>\n<p>如果有在 Runners 設定 <code>Enable for this project</code> ，此時就會開始跑 CI ， 然後可以在 GitLab 查看 build 狀態與結果。</p>\n<p><img src=\"/2017/01/07/gitlab-ci-with-docker-runner-for-nodejs-projects/build.png\"></p>\n<h2 id=\"Build-Status-amp-Coverage-Report\"><a href=\"#Build-Status-amp-Coverage-Report\" class=\"headerlink\" title=\"Build Status &amp; Coverage Report\"></a>Build Status &amp; Coverage Report</h2><p>最後，我們可以為 project 的 <code>README.md</code> 檔案加入 build status 和 test coverage 圖示。</p>\n<p>在 GitLab 的 project 設定下進入 CI/CD Pipelines 頁面，在 <strong>Test coverage parsing</strong> 欄位填入 <code>^Lines\\s*:\\s*([^%]+)</code> 。然後將下面 <code>Build status</code> 與 <code>Coverage report</code> 的 Markdown 語法寫入 <code>README.md</code> 檔案。</p>\n<p><img src=\"/2017/01/07/gitlab-ci-with-docker-runner-for-nodejs-projects/readme.png\"></p>\n<p>大功告成。</p>","categories":[{"name":"技術分享","path":"api/categories/技術分享.json"}],"tags":[{"name":"Git","path":"api/tags/Git.json"},{"name":"NodeJS","path":"api/tags/NodeJS.json"},{"name":"GitLab","path":"api/tags/GitLab.json"},{"name":"Docker","path":"api/tags/Docker.json"},{"name":"CI","path":"api/tags/CI.json"},{"name":"GitLab CI","path":"api/tags/GitLab CI.json"}]}
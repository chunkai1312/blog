{"title":"使用 Shell Script 建立命令列程式","slug":"building-cli-program-with-shell-script","date":"2017-05-30T07:12:48.000Z","updated":"2021-09-05T09:19:27.606Z","comments":true,"path":"api/articles/building-cli-program-with-shell-script.json","excerpt":" [Figure] 最近開始需要撰寫一些 shell script 來執行 DevOps 自動化的工作。這篇主要記錄如何使用 shell script 來建立一個簡單的命令列程式。","covers":["/2017/05/30/building-cli-program-with-shell-script/cover.jpg"],"content":"<p><img src=\"/2017/05/30/building-cli-program-with-shell-script/cover.jpg\"></p>\n<blockquote>\n<p>最近開始需要撰寫一些 shell script 來執行 DevOps 自動化的工作。這篇主要記錄如何使用 shell script 來建立一個簡單的命令列程式。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"Writing-a-Shell-Script\"><a href=\"#Writing-a-Shell-Script\" class=\"headerlink\" title=\"Writing a Shell Script\"></a>Writing a Shell Script</h2><p>為了成功地建立與執行一個 shell script ，我們需要做三件事：</p>\n<ol>\n<li>寫一個 script</li>\n<li>使 script 可執行</li>\n<li>將 script 放置到 shell 能夠找到的地方</li>\n</ol>\n<h3 id=\"Script-File-Format\"><a href=\"#Script-File-Format\" class=\"headerlink\" title=\"Script File Format\"></a>Script File Format</h3><p>以一個印出 <code>Hello World!</code> 的程式為例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/bin/bash</span><br><span class=\"hljs-comment\"># My first script</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Hello World!&quot;</span><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li>第一行是 <a href=\"https://en.wikipedia.org/wiki/Shebang_%28Unix%29\">Shebang</a> ，告訴系統要用什麼樣的直譯器來執行該 script 。這裡我們使用的是 UNIX 系統最常見的 <a href=\"https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\">Bash</a> 。</li>\n<li>第二行是註解，在 <code>#</code> 符號之後的都會被忽略。</li>\n<li>第三行我們使用 <code>echo</code> 命令印出 <code>Hello World!</code> 。</li>\n</ol>\n<h3 id=\"Executable-Permissions\"><a href=\"#Executable-Permissions\" class=\"headerlink\" title=\"Executable Permissions\"></a>Executable Permissions</h3><p>為了讓 script 可執行，我們需要給予 script file 可執行權限。以 <code>hello_world</code> 為例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ chmod 755 hello_world<br></code></pre></td></tr></table></figure>\n\n<p>對於 script file，有兩個常見的權限設置：</p>\n<ol>\n<li>為 script 指定 <code>755</code> 讓所有人都能執行</li>\n<li>為 script 指定 <code>700</code> 只有擁有者能夠執行。</li>\n</ol>\n<p>注意為了能夠執行 script，script 必須是可讀取的。</p>\n<h3 id=\"Script-File-Location\"><a href=\"#Script-File-Location\" class=\"headerlink\" title=\"Script File Location\"></a>Script File Location</h3><p>設定權限之後，就能執行 script ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ ./hello_world<br>Hello World!<br></code></pre></td></tr></table></figure>\n\n<p>為了執行 script ，必須將確切路徑置於 script 名稱前。若沒有，就會得到如下結果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hello_world<br>-bash: hello_world: <span class=\"hljs-built_in\">command</span> not found<br></code></pre></td></tr></table></figure>\n\n<p>這是因為該 script 位置不在 PATH 變數之目錄清單中。可輸入以下指令檢視目前 PATH 變數內容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$PAH</span></span><br></code></pre></td></tr></table></figure>\n\n<p>若 script 就在這個清單裡的任何一個目錄下，就可以在任何地方執行 scipt 。大部分 Linux 分支套件會將 PATH 變數包含使用者家目錄下的 <code>bin</code> 目錄，允許使用者執行自有程式。若 PATH 變數裡沒有該目錄，可以編輯以下內容到 <code>.bashrc</code> 裡：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-builtin-name\">export</span> <span class=\"hljs-attribute\">PATH</span>=<span class=\"hljs-string\">&quot;~bin:<span class=\"hljs-variable\">$PATH</span>&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>完成變更後它會影響每個新終端機的 session 。要將變動套用到現行終端機 session，必須讓 shell 重新讀取 <code>.bashrc</code> 檔，可透過 <code>sourcing</code> 來完成：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ . .bashrc<br></code></pre></td></tr></table></figure>\n\n<p>確認設定好 PATH 環境變數後，我們在使用者的家目錄下建立一個 <code>bin</code> 目錄，然後將 script 置於此並執行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> ~<br>$ mkdir bin<br>$ mv hello_world bin<br>$ hello_world<br>Hello World!<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Good-Locations-For-Scripts\"><a href=\"#Good-Locations-For-Scripts\" class=\"headerlink\" title=\"Good Locations For Scripts\"></a>Good Locations For Scripts</h4><ol>\n<li><code>~/bin</code> 目錄是存放為個人使用 script 的好地方。</li>\n<li>若寫了一個允許系統裡所有人使用的 script，傳統位置會是 <code>/usr/local/bin</code>。</li>\n<li>供系統管理員使用的 script 經常放到 <code>/usr/local/sbin</code> 目錄下。</li>\n<li>多數情況下，本機提供的軟體，不論是 script 還是編譯過的程式，應該都放在 <code>/usr/local</code> 目錄下，而非 <code>/bin</code> 或 <code>/usr/bin</code> 目錄。</li>\n</ol>\n<h2 id=\"Building-a-Simple-CLI-Program\"><a href=\"#Building-a-Simple-CLI-Program\" class=\"headerlink\" title=\"Building a Simple CLI Program\"></a>Building a Simple CLI Program</h2><p>這裡提供一個簡單的 CLI (command-line interface) <a href=\"(https://github.com/chunkai1312/shell-template\">程式範例</a>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/bin/bash</span><br><br>PROGRAM=$(basename <span class=\"hljs-variable\">$0</span>)<br>VERSION=<span class=\"hljs-string\">&quot;1.0.0&quot;</span><br>DESCRIPTION=<span class=\"hljs-string\">&quot;This is a script template.&quot;</span><br><br><span class=\"hljs-function\"><span class=\"hljs-title\">usage</span></span> () &#123;<br>  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;</span><br><span class=\"hljs-string\">  Usage: <span class=\"hljs-variable\">$PROGRAM</span> [options]</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">  <span class=\"hljs-variable\">$DESCRIPTION</span></span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">  Options:</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">    -h, --help     output usage information</span><br><span class=\"hljs-string\">    -v, --version  output the version number</span><br><span class=\"hljs-string\">    -p, --print    print \\&quot;Hello World!\\&quot;</span><br><span class=\"hljs-string\">  &quot;</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-title\">print</span></span> () &#123;<br>  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&#x27;Hello World!&#x27;</span><br>&#125;<br><br><span class=\"hljs-comment\"># process command line options</span><br><br><span class=\"hljs-keyword\">while</span> [[ -n <span class=\"hljs-variable\">$1</span> ]]; <span class=\"hljs-keyword\">do</span><br>  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-variable\">$1</span> <span class=\"hljs-keyword\">in</span><br>    -h | --<span class=\"hljs-built_in\">help</span>)      usage<br>                      <span class=\"hljs-built_in\">exit</span><br>                      ;;<br>    -v | --version)   <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$VERSION</span><br>                      <span class=\"hljs-built_in\">exit</span><br>                      ;;<br>    -p | --<span class=\"hljs-built_in\">print</span>)     <span class=\"hljs-built_in\">print</span><br>                      <span class=\"hljs-built_in\">exit</span><br>                      ;;<br>    *)                usage &gt;&amp;2<br>                      <span class=\"hljs-built_in\">exit</span> 1<br>                      ;;<br>  <span class=\"hljs-keyword\">esac</span><br>  <span class=\"hljs-built_in\">shift</span><br><span class=\"hljs-keyword\">done</span><br></code></pre></td></tr></table></figure>\n\n<p>這是一個不到 50 行的 script ，原理是使用 <code>while-do</code> 迴圈一個一個讀取命令列參數，若符合參數條件就執行對應的指令或函式。假設 script 名稱為 <code>program</code> ，並給予可執行權限且至於 PATH 環境變數之目錄清單下。</p>\n<p>執行 <code>program -h</code> 顯示程式使用方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ program -h<br><br>  Usage: program [options]<br><br>  This is a script template.<br><br>  Options:<br><br>    -h, --<span class=\"hljs-built_in\">help</span>     output usage information<br>    -v, --version  output the version number<br>    -p, --<span class=\"hljs-built_in\">print</span>    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&quot;Hello World!&quot;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>執行 <code>program -v</code> 顯示程式版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ program -v<br>1.0.0<br></code></pre></td></tr></table></figure>\n\n<p>執行 <code>program -p</code> 印出 <code>Hello World!</code> ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ program -p<br>Hello World!<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p><a href=\"http://linuxcommand.org/lc3_wss0010.php\">Writing Your First Script And Getting It To Work</a><br><a href=\"http://billie66.github.io/TLCL/\">TLCL</a></p>\n","more":"<h2 id=\"Writing-a-Shell-Script\"><a href=\"#Writing-a-Shell-Script\" class=\"headerlink\" title=\"Writing a Shell Script\"></a>Writing a Shell Script</h2><p>為了成功地建立與執行一個 shell script ，我們需要做三件事：</p>\n<ol>\n<li>寫一個 script</li>\n<li>使 script 可執行</li>\n<li>將 script 放置到 shell 能夠找到的地方</li>\n</ol>\n<h3 id=\"Script-File-Format\"><a href=\"#Script-File-Format\" class=\"headerlink\" title=\"Script File Format\"></a>Script File Format</h3><p>以一個印出 <code>Hello World!</code> 的程式為例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/bin/bash</span><br><span class=\"hljs-comment\"># My first script</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Hello World!&quot;</span><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li>第一行是 <a href=\"https://en.wikipedia.org/wiki/Shebang_%28Unix%29\">Shebang</a> ，告訴系統要用什麼樣的直譯器來執行該 script 。這裡我們使用的是 UNIX 系統最常見的 <a href=\"https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\">Bash</a> 。</li>\n<li>第二行是註解，在 <code>#</code> 符號之後的都會被忽略。</li>\n<li>第三行我們使用 <code>echo</code> 命令印出 <code>Hello World!</code> 。</li>\n</ol>\n<h3 id=\"Executable-Permissions\"><a href=\"#Executable-Permissions\" class=\"headerlink\" title=\"Executable Permissions\"></a>Executable Permissions</h3><p>為了讓 script 可執行，我們需要給予 script file 可執行權限。以 <code>hello_world</code> 為例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ chmod 755 hello_world<br></code></pre></td></tr></table></figure>\n\n<p>對於 script file，有兩個常見的權限設置：</p>\n<ol>\n<li>為 script 指定 <code>755</code> 讓所有人都能執行</li>\n<li>為 script 指定 <code>700</code> 只有擁有者能夠執行。</li>\n</ol>\n<p>注意為了能夠執行 script，script 必須是可讀取的。</p>\n<h3 id=\"Script-File-Location\"><a href=\"#Script-File-Location\" class=\"headerlink\" title=\"Script File Location\"></a>Script File Location</h3><p>設定權限之後，就能執行 script ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ ./hello_world<br>Hello World!<br></code></pre></td></tr></table></figure>\n\n<p>為了執行 script ，必須將確切路徑置於 script 名稱前。若沒有，就會得到如下結果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hello_world<br>-bash: hello_world: <span class=\"hljs-built_in\">command</span> not found<br></code></pre></td></tr></table></figure>\n\n<p>這是因為該 script 位置不在 PATH 變數之目錄清單中。可輸入以下指令檢視目前 PATH 變數內容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$PAH</span></span><br></code></pre></td></tr></table></figure>\n\n<p>若 script 就在這個清單裡的任何一個目錄下，就可以在任何地方執行 scipt 。大部分 Linux 分支套件會將 PATH 變數包含使用者家目錄下的 <code>bin</code> 目錄，允許使用者執行自有程式。若 PATH 變數裡沒有該目錄，可以編輯以下內容到 <code>.bashrc</code> 裡：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-builtin-name\">export</span> <span class=\"hljs-attribute\">PATH</span>=<span class=\"hljs-string\">&quot;~bin:<span class=\"hljs-variable\">$PATH</span>&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>完成變更後它會影響每個新終端機的 session 。要將變動套用到現行終端機 session，必須讓 shell 重新讀取 <code>.bashrc</code> 檔，可透過 <code>sourcing</code> 來完成：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ . .bashrc<br></code></pre></td></tr></table></figure>\n\n<p>確認設定好 PATH 環境變數後，我們在使用者的家目錄下建立一個 <code>bin</code> 目錄，然後將 script 置於此並執行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> ~<br>$ mkdir bin<br>$ mv hello_world bin<br>$ hello_world<br>Hello World!<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Good-Locations-For-Scripts\"><a href=\"#Good-Locations-For-Scripts\" class=\"headerlink\" title=\"Good Locations For Scripts\"></a>Good Locations For Scripts</h4><ol>\n<li><code>~/bin</code> 目錄是存放為個人使用 script 的好地方。</li>\n<li>若寫了一個允許系統裡所有人使用的 script，傳統位置會是 <code>/usr/local/bin</code>。</li>\n<li>供系統管理員使用的 script 經常放到 <code>/usr/local/sbin</code> 目錄下。</li>\n<li>多數情況下，本機提供的軟體，不論是 script 還是編譯過的程式，應該都放在 <code>/usr/local</code> 目錄下，而非 <code>/bin</code> 或 <code>/usr/bin</code> 目錄。</li>\n</ol>\n<h2 id=\"Building-a-Simple-CLI-Program\"><a href=\"#Building-a-Simple-CLI-Program\" class=\"headerlink\" title=\"Building a Simple CLI Program\"></a>Building a Simple CLI Program</h2><p>這裡提供一個簡單的 CLI (command-line interface) <a href=\"(https://github.com/chunkai1312/shell-template\">程式範例</a>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/bin/bash</span><br><br>PROGRAM=$(basename <span class=\"hljs-variable\">$0</span>)<br>VERSION=<span class=\"hljs-string\">&quot;1.0.0&quot;</span><br>DESCRIPTION=<span class=\"hljs-string\">&quot;This is a script template.&quot;</span><br><br><span class=\"hljs-function\"><span class=\"hljs-title\">usage</span></span> () &#123;<br>  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;</span><br><span class=\"hljs-string\">  Usage: <span class=\"hljs-variable\">$PROGRAM</span> [options]</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">  <span class=\"hljs-variable\">$DESCRIPTION</span></span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">  Options:</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">    -h, --help     output usage information</span><br><span class=\"hljs-string\">    -v, --version  output the version number</span><br><span class=\"hljs-string\">    -p, --print    print \\&quot;Hello World!\\&quot;</span><br><span class=\"hljs-string\">  &quot;</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-title\">print</span></span> () &#123;<br>  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&#x27;Hello World!&#x27;</span><br>&#125;<br><br><span class=\"hljs-comment\"># process command line options</span><br><br><span class=\"hljs-keyword\">while</span> [[ -n <span class=\"hljs-variable\">$1</span> ]]; <span class=\"hljs-keyword\">do</span><br>  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-variable\">$1</span> <span class=\"hljs-keyword\">in</span><br>    -h | --<span class=\"hljs-built_in\">help</span>)      usage<br>                      <span class=\"hljs-built_in\">exit</span><br>                      ;;<br>    -v | --version)   <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$VERSION</span><br>                      <span class=\"hljs-built_in\">exit</span><br>                      ;;<br>    -p | --<span class=\"hljs-built_in\">print</span>)     <span class=\"hljs-built_in\">print</span><br>                      <span class=\"hljs-built_in\">exit</span><br>                      ;;<br>    *)                usage &gt;&amp;2<br>                      <span class=\"hljs-built_in\">exit</span> 1<br>                      ;;<br>  <span class=\"hljs-keyword\">esac</span><br>  <span class=\"hljs-built_in\">shift</span><br><span class=\"hljs-keyword\">done</span><br></code></pre></td></tr></table></figure>\n\n<p>這是一個不到 50 行的 script ，原理是使用 <code>while-do</code> 迴圈一個一個讀取命令列參數，若符合參數條件就執行對應的指令或函式。假設 script 名稱為 <code>program</code> ，並給予可執行權限且至於 PATH 環境變數之目錄清單下。</p>\n<p>執行 <code>program -h</code> 顯示程式使用方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ program -h<br><br>  Usage: program [options]<br><br>  This is a script template.<br><br>  Options:<br><br>    -h, --<span class=\"hljs-built_in\">help</span>     output usage information<br>    -v, --version  output the version number<br>    -p, --<span class=\"hljs-built_in\">print</span>    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&quot;Hello World!&quot;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>執行 <code>program -v</code> 顯示程式版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ program -v<br>1.0.0<br></code></pre></td></tr></table></figure>\n\n<p>執行 <code>program -p</code> 印出 <code>Hello World!</code> ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ program -p<br>Hello World!<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p><a href=\"http://linuxcommand.org/lc3_wss0010.php\">Writing Your First Script And Getting It To Work</a><br><a href=\"http://billie66.github.io/TLCL/\">TLCL</a></p>","categories":[{"name":"技術分享","path":"api/categories/技術分享.json"}],"tags":[{"name":"Shell","path":"api/tags/Shell.json"},{"name":"Bash","path":"api/tags/Bash.json"}]}
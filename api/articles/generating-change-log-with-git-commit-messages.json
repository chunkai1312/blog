{"title":"使用 Git 提交訊息產生 Change Log","slug":"generating-change-log-with-git-commit-messages","date":"2019-03-04T15:17:43.000Z","updated":"2021-09-05T09:20:23.050Z","comments":true,"path":"api/articles/generating-change-log-with-git-commit-messages.json","excerpt":" [Figure] Conventional Commits 是一種編寫 git commit messages 的規範約定，它提供了一組用於建立提交歷史的簡單規則，可以透過自動化工具來追蹤版本變動紀錄（Change Log），這個約定與 Semantic Versioning 相吻合，可以在提交訊息中描述新功能（features）、bug 修復（fixes）和破壞性變更（breaking changes）。有一個共同約定的版本控制提交歷史，這在開源專案和團隊開發中尤為重要。","covers":["/2019/03/04/generating-change-log-with-git-commit-messages/cover.jpg"],"content":"<p><img src=\"/2019/03/04/generating-change-log-with-git-commit-messages/cover.jpg\"></p>\n<blockquote>\n<p><a href=\"https://www.conventionalcommits.org/\">Conventional Commits</a> 是一種編寫 git commit messages 的規範約定，它提供了一組用於建立提交歷史的簡單規則，可以透過自動化工具來追蹤版本變動紀錄（Change Log），這個約定與 <a href=\"http://semver.org/\">Semantic Versioning</a> 相吻合，可以在提交訊息中描述新功能（features）、bug 修復（fixes）和破壞性變更（breaking changes）。有一個共同約定的版本控制提交歷史，這在開源專案和團隊開發中尤為重要。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"Conventional-Commits\"><a href=\"#Conventional-Commits\" class=\"headerlink\" title=\"Conventional Commits\"></a>Conventional Commits</h2><p>遵循 Conventional Commits 的 commmit message 結構應如下所示：</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs fortran\">&lt;<span class=\"hljs-keyword\">type</span>&gt;[<span class=\"hljs-keyword\">optional</span> scope]: &lt;description&gt;<br><br>[<span class=\"hljs-keyword\">optional</span> body]<br><br>[<span class=\"hljs-keyword\">optional</span> footer]<br></code></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>fix</strong>: type 為 <code>fix</code> 的提交表示在 codebase 中修復了一個 bug（這和語義化版本中的 <a href=\"http://semver.org/#summary\"><code>PATCH</code></a> 相對應）。</li>\n<li><strong>feat</strong>: type 為 <code>feat</code> 的提交表示在 codebase 中新增了一個功能（這和語義化版本中的 <a href=\"http://semver.org/#summary\"><code>MINOR</code></a> 相對應）。</li>\n<li><strong>BREAKING CHANGE</strong>: 在 optional body 或 footer 的起始位置帶有 <code>BREAKING CHANGE:</code> 的提交，表示引入了破壞性 API 變更（這和語義化版本中的 <a href=\"(http://semver.org/#summary\"><code>MAJOR</code></a> 相對應）。破壞性變更可以是任意 type 的提交。</li>\n<li>其它情況: 除 <code>fix:</code> 和 <code>feat:</code> 之外的提交類型也是被允許的，例如 <a href=\"https://github.com/conventional-changelog/commitlint/tree/master/%40commitlint/config-conventional\">@commitlint/config-conventional</a> （基於 <a href=\"https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines\">the Angular convention</a>）中推薦的 <code>chore:</code>、<code>docs:</code>、<code>style:</code>、<code>refactor:</code>、<code>perf:</code>、<code>test:</code> 及其他。</li>\n</ol>\n<h2 id=\"Commitizen\"><a href=\"#Commitizen\" class=\"headerlink\" title=\"Commitizen\"></a>Commitizen</h2><p><a href=\"https://github.com/commitizen/cz-cli\">Commitizen</a> 可以用來協助建立符合 Conventional Commits 規範的提交訊息（commit messages）。</p>\n<h3 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h3><p>假設已經有一個專案目錄，在這個目錄下執行：</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs q\">$ npm install commitizen --<span class=\"hljs-built_in\">save</span>-<span class=\"hljs-built_in\">dev</span><br></code></pre></td></tr></table></figure>\n\n<p>這裡採用本地安裝方式，確保開發人員在每台電腦上運行相同的 Commitizen 版本。然後執行：</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs q\">$ npx commitizen init cz-conventional-changelog --<span class=\"hljs-built_in\">save</span>-<span class=\"hljs-built_in\">dev</span> --<span class=\"hljs-built_in\">save</span>-exact<br></code></pre></td></tr></table></figure>\n\n<p>完成後，會在 <code>package.json</code> 檔案下加入：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">...<br>  &quot;config&quot;: &#123;<br>    &quot;commitizen&quot;: &#123;<br>      &quot;path&quot;: &quot;./node_modules/cz-conventional-changelog&quot;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>然後，你可以在 <code>package.json</code> 檔案加入一條 npm script 用來運行 commitizen：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">...<br>  &quot;scripts&quot;: &#123;<br>    &quot;commit&quot;: &quot;git-cz&quot;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>如此，可使用 <code>npm run commit</code> 取代 <code>git commit</code> 協助建立符合規範的 git 提交訊息。</p>\n<h2 id=\"Commitlint\"><a href=\"#Commitlint\" class=\"headerlink\" title=\"Commitlint\"></a>Commitlint</h2><p><a href=\"https://github.com/conventional-changelog/commitlint\">Commitlint</a> 用來檢查你的 git 提交訊息。是否符合規範；若沒有通過，則該次提交不成功。</p>\n<h3 id=\"Install-1\"><a href=\"#Install-1\" class=\"headerlink\" title=\"Install\"></a>Install</h3><p>在專案目錄下執行：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coffeescript\">$ <span class=\"hljs-built_in\">npm</span> install --save-dev @commitlint/config-conventional @commitlint/cli<br></code></pre></td></tr></table></figure>\n\n<p>然後在 <code>package.json</code> 檔案下加入：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">...<br>  &quot;commitlint&quot;: &#123;<br>    &quot;extends&quot;: [&quot;@commitlint/config-conventional&quot;]<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>或者，透過以下指令建立一份配置檔案 <code>commitlint.config.js</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;module.exports = &#123;extends: [&#x27;@commitlint/config-conventional&#x27;]&#125;&quot;</span> &gt; commitlint.config.js</span><br></code></pre></td></tr></table></figure>\n\n<p>接著，安裝 <a href=\"https://github.com/typicode/husky\">Husky</a> 以使用 <code>commit-msg</code> hook：</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs q\">$ npm install --<span class=\"hljs-built_in\">save</span>-<span class=\"hljs-built_in\">dev</span> husky<br></code></pre></td></tr></table></figure>\n\n<p>安裝完成後，在 <code>package.json</code> 檔案下加入：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">...<br>  &quot;husky&quot;: &#123;<br>    &quot;hooks&quot;: &#123;<br>      &quot;commit-msg&quot;: &quot;commitlint -E HUSKY_GIT_PARAMS&quot;<br>    &#125;  <br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>或者，建立 <code>.huskyrc</code> 配置檔案：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;hooks&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;commit-msg&quot;</span>: <span class=\"hljs-string\">&quot;commitlint -E HUSKY_GIT_PARAMS&quot;</span><br>  &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如此，每次進行 git 提交就會確認訊息格式是否符合規範。</p>\n<h2 id=\"Standard-Version\"><a href=\"#Standard-Version\" class=\"headerlink\" title=\"Standard Version\"></a>Standard Version</h2><p>如果你的提交歷史都符合規範，那麼就可以使用 <a href=\"https://github.com/conventional-changelog/standard-version\">Standard Version</a> 建立 Change Log 並釋出符合 <a href=\"http://semver.org/\">Semantic Versioning</a> 的版本號。</p>\n<h3 id=\"Install-2\"><a href=\"#Install-2\" class=\"headerlink\" title=\"Install\"></a>Install</h3><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs q\">$ npm install --<span class=\"hljs-built_in\">save</span>-<span class=\"hljs-built_in\">dev</span> standard-version<br></code></pre></td></tr></table></figure>\n\n<p>然後在 <code>package.json</code> 檔案加入一條 npm script：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">...<br>&quot;scripts&quot;: &#123;<br>  &quot;release&quot;: &quot;standard-version&quot;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>當你要建立 change log 並釋出版本時，執行 <code>npm run release</code>。以下是常用的附加參數：</p>\n<ul>\n<li>第一次釋出版本：<code>npm run release -- --first-release</code></li>\n<li>釋出預發行版本：<code>npm run release -- --prerelease &lt;name&gt;</code></li>\n<li>釋出特定版本號：<code>npm run release -- --release-as &lt;version&gt;</code></li>\n<li>釋出 major 版本：<code>npm run release -- --release-as major</code></li>\n<li>釋出 minor 版本：<code>npm run release -- --release-as minor</code></li>\n<li>釋出 patch 版本：<code>npm run release -- --release-as patch</code></li>\n</ul>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p><a href=\"https://www.conventionalcommits.org/\">Conventional Commits</a><br><a href=\"http://semver.org/\">Semantic Versioning</a><br><a href=\"https://github.com/commitizen/cz-cli\">Commitizen</a><br><a href=\"https://github.com/conventional-changelog/commitlint\">Commitlint</a><br><a href=\"https://github.com/typicode/husky\">Husky</a><br><a href=\"https://github.com/conventional-changelog/standard-version\">Standard Version</a></p>\n","more":"<h2 id=\"Conventional-Commits\"><a href=\"#Conventional-Commits\" class=\"headerlink\" title=\"Conventional Commits\"></a>Conventional Commits</h2><p>遵循 Conventional Commits 的 commmit message 結構應如下所示：</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs fortran\">&lt;<span class=\"hljs-keyword\">type</span>&gt;[<span class=\"hljs-keyword\">optional</span> scope]: &lt;description&gt;<br><br>[<span class=\"hljs-keyword\">optional</span> body]<br><br>[<span class=\"hljs-keyword\">optional</span> footer]<br></code></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>fix</strong>: type 為 <code>fix</code> 的提交表示在 codebase 中修復了一個 bug（這和語義化版本中的 <a href=\"http://semver.org/#summary\"><code>PATCH</code></a> 相對應）。</li>\n<li><strong>feat</strong>: type 為 <code>feat</code> 的提交表示在 codebase 中新增了一個功能（這和語義化版本中的 <a href=\"http://semver.org/#summary\"><code>MINOR</code></a> 相對應）。</li>\n<li><strong>BREAKING CHANGE</strong>: 在 optional body 或 footer 的起始位置帶有 <code>BREAKING CHANGE:</code> 的提交，表示引入了破壞性 API 變更（這和語義化版本中的 <a href=\"(http://semver.org/#summary\"><code>MAJOR</code></a> 相對應）。破壞性變更可以是任意 type 的提交。</li>\n<li>其它情況: 除 <code>fix:</code> 和 <code>feat:</code> 之外的提交類型也是被允許的，例如 <a href=\"https://github.com/conventional-changelog/commitlint/tree/master/%40commitlint/config-conventional\">@commitlint/config-conventional</a> （基於 <a href=\"https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines\">the Angular convention</a>）中推薦的 <code>chore:</code>、<code>docs:</code>、<code>style:</code>、<code>refactor:</code>、<code>perf:</code>、<code>test:</code> 及其他。</li>\n</ol>\n<h2 id=\"Commitizen\"><a href=\"#Commitizen\" class=\"headerlink\" title=\"Commitizen\"></a>Commitizen</h2><p><a href=\"https://github.com/commitizen/cz-cli\">Commitizen</a> 可以用來協助建立符合 Conventional Commits 規範的提交訊息（commit messages）。</p>\n<h3 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h3><p>假設已經有一個專案目錄，在這個目錄下執行：</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs q\">$ npm install commitizen --<span class=\"hljs-built_in\">save</span>-<span class=\"hljs-built_in\">dev</span><br></code></pre></td></tr></table></figure>\n\n<p>這裡採用本地安裝方式，確保開發人員在每台電腦上運行相同的 Commitizen 版本。然後執行：</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs q\">$ npx commitizen init cz-conventional-changelog --<span class=\"hljs-built_in\">save</span>-<span class=\"hljs-built_in\">dev</span> --<span class=\"hljs-built_in\">save</span>-exact<br></code></pre></td></tr></table></figure>\n\n<p>完成後，會在 <code>package.json</code> 檔案下加入：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">...<br>  &quot;config&quot;: &#123;<br>    &quot;commitizen&quot;: &#123;<br>      &quot;path&quot;: &quot;./node_modules/cz-conventional-changelog&quot;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>然後，你可以在 <code>package.json</code> 檔案加入一條 npm script 用來運行 commitizen：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">...<br>  &quot;scripts&quot;: &#123;<br>    &quot;commit&quot;: &quot;git-cz&quot;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>如此，可使用 <code>npm run commit</code> 取代 <code>git commit</code> 協助建立符合規範的 git 提交訊息。</p>\n<h2 id=\"Commitlint\"><a href=\"#Commitlint\" class=\"headerlink\" title=\"Commitlint\"></a>Commitlint</h2><p><a href=\"https://github.com/conventional-changelog/commitlint\">Commitlint</a> 用來檢查你的 git 提交訊息。是否符合規範；若沒有通過，則該次提交不成功。</p>\n<h3 id=\"Install-1\"><a href=\"#Install-1\" class=\"headerlink\" title=\"Install\"></a>Install</h3><p>在專案目錄下執行：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coffeescript\">$ <span class=\"hljs-built_in\">npm</span> install --save-dev @commitlint/config-conventional @commitlint/cli<br></code></pre></td></tr></table></figure>\n\n<p>然後在 <code>package.json</code> 檔案下加入：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">...<br>  &quot;commitlint&quot;: &#123;<br>    &quot;extends&quot;: [&quot;@commitlint/config-conventional&quot;]<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>或者，透過以下指令建立一份配置檔案 <code>commitlint.config.js</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;module.exports = &#123;extends: [&#x27;@commitlint/config-conventional&#x27;]&#125;&quot;</span> &gt; commitlint.config.js</span><br></code></pre></td></tr></table></figure>\n\n<p>接著，安裝 <a href=\"https://github.com/typicode/husky\">Husky</a> 以使用 <code>commit-msg</code> hook：</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs q\">$ npm install --<span class=\"hljs-built_in\">save</span>-<span class=\"hljs-built_in\">dev</span> husky<br></code></pre></td></tr></table></figure>\n\n<p>安裝完成後，在 <code>package.json</code> 檔案下加入：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">...<br>  &quot;husky&quot;: &#123;<br>    &quot;hooks&quot;: &#123;<br>      &quot;commit-msg&quot;: &quot;commitlint -E HUSKY_GIT_PARAMS&quot;<br>    &#125;  <br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>或者，建立 <code>.huskyrc</code> 配置檔案：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;hooks&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;commit-msg&quot;</span>: <span class=\"hljs-string\">&quot;commitlint -E HUSKY_GIT_PARAMS&quot;</span><br>  &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如此，每次進行 git 提交就會確認訊息格式是否符合規範。</p>\n<h2 id=\"Standard-Version\"><a href=\"#Standard-Version\" class=\"headerlink\" title=\"Standard Version\"></a>Standard Version</h2><p>如果你的提交歷史都符合規範，那麼就可以使用 <a href=\"https://github.com/conventional-changelog/standard-version\">Standard Version</a> 建立 Change Log 並釋出符合 <a href=\"http://semver.org/\">Semantic Versioning</a> 的版本號。</p>\n<h3 id=\"Install-2\"><a href=\"#Install-2\" class=\"headerlink\" title=\"Install\"></a>Install</h3><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs q\">$ npm install --<span class=\"hljs-built_in\">save</span>-<span class=\"hljs-built_in\">dev</span> standard-version<br></code></pre></td></tr></table></figure>\n\n<p>然後在 <code>package.json</code> 檔案加入一條 npm script：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">...<br>&quot;scripts&quot;: &#123;<br>  &quot;release&quot;: &quot;standard-version&quot;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>當你要建立 change log 並釋出版本時，執行 <code>npm run release</code>。以下是常用的附加參數：</p>\n<ul>\n<li>第一次釋出版本：<code>npm run release -- --first-release</code></li>\n<li>釋出預發行版本：<code>npm run release -- --prerelease &lt;name&gt;</code></li>\n<li>釋出特定版本號：<code>npm run release -- --release-as &lt;version&gt;</code></li>\n<li>釋出 major 版本：<code>npm run release -- --release-as major</code></li>\n<li>釋出 minor 版本：<code>npm run release -- --release-as minor</code></li>\n<li>釋出 patch 版本：<code>npm run release -- --release-as patch</code></li>\n</ul>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p><a href=\"https://www.conventionalcommits.org/\">Conventional Commits</a><br><a href=\"http://semver.org/\">Semantic Versioning</a><br><a href=\"https://github.com/commitizen/cz-cli\">Commitizen</a><br><a href=\"https://github.com/conventional-changelog/commitlint\">Commitlint</a><br><a href=\"https://github.com/typicode/husky\">Husky</a><br><a href=\"https://github.com/conventional-changelog/standard-version\">Standard Version</a></p>","categories":[{"name":"技術分享","path":"api/categories/技術分享.json"}],"tags":[{"name":"Git","path":"api/tags/Git.json"},{"name":"Conventional Commits","path":"api/tags/Conventional Commits.json"},{"name":"Semantic Versioning","path":"api/tags/Semantic Versioning.json"}]}
{"title":"使用 React 作為 Express 的樣板引擎建構 Universal 應用程式","slug":"using-react-as-template-engine-for-universal-express-applications","date":"2017-04-30T16:09:26.000Z","updated":"2021-09-05T09:19:30.128Z","comments":true,"path":"api/articles/using-react-as-template-engine-for-universal-express-applications.json","excerpt":" [Figure] 使用 Express 建構頁面時，可能會搭配各式的 template engines 來協助渲染視圖 (views) 。 在 React 社區中有 express-react-views 使用 React 作為 template engine 的伺服端渲染 (server-side rendering) 例子。不過該方案僅用在伺服端輸出靜態頁面，不支援 client side mounting 。相較之下，Paypal 的 react-engine 提供一個 universal 的解決方案，並可搭配 react-router 一起使用。","covers":["/2017/05/01/using-react-as-template-engine-for-universal-express-applications/cover.jpg"],"content":"<p><img src=\"/2017/05/01/using-react-as-template-engine-for-universal-express-applications/cover.jpg\"></p>\n<blockquote>\n<p>使用 <a href=\"https://expressjs.com/\">Express</a> 建構頁面時，可能會搭配各式的 <a href=\"https://github.com/expressjs/express/wiki?&_ga=1.57492066.918787517.1490850939#template-engines\">template engines</a> 來協助渲染視圖 (views) 。 在 React 社區中有 <a href=\"https://github.com/reactjs/express-react-views\">express-react-views</a> 使用 React 作為 template engine 的伺服端渲染 (server-side rendering) 例子。不過該方案僅用在伺服端輸出靜態頁面，不支援 client side mounting 。相較之下，Paypal 的 <a href=\"https://github.com/paypal/react-engine\">react-engine</a> 提供一個 universal 的解決方案，並可搭配 <a href=\"https://github.com/reactjs/react-router\">react-router</a> 一起使用。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"Creating-an-Express-Application\"><a href=\"#Creating-an-Express-Application\" class=\"headerlink\" title=\"Creating an Express Application\"></a>Creating an Express Application</h2><p>為了簡單示例，這邊直接使用 <code>express-generator</code> 建立一個名為 <code>express-react-engine-example</code> 的專案：</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">$ npm install -g <span class=\"hljs-built_in\">express</span>-generator<br>$ exresss <span class=\"hljs-built_in\">express</span>-react-engine-<span class=\"hljs-built_in\">example</span><br></code></pre></td></tr></table></figure>\n\n<p>接著進入建立的專案目錄，並安裝預設依賴套件：</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">$ cd <span class=\"hljs-built_in\">express</span>-react-engine-<span class=\"hljs-built_in\">example</span> &amp;&amp; npm install<br></code></pre></td></tr></table></figure>\n\n<p>然後執行：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-variable\">$</span> npm <span class=\"hljs-built_in\">start</span><br></code></pre></td></tr></table></figure>\n\n<p>此時 Express 應用程式會跑在 <code>http://localhost:3000/</code> 。</p>\n<h2 id=\"Set-up-Babel-and-Browserify\"><a href=\"#Set-up-Babel-and-Browserify\" class=\"headerlink\" title=\"Set up Babel and Browserify\"></a>Set up Babel and Browserify</h2><h3 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h3><p>在開發模式下，我們使用 <a href=\"https://babeljs.io/\">Babel</a> 進行轉碼，請安裝以下依賴套件：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">$ npm <span class=\"hljs-keyword\">install </span>--save-dev <span class=\"hljs-keyword\">babel-register </span><span class=\"hljs-keyword\">babel-preset-es2015 </span><span class=\"hljs-keyword\">babel-preset-react</span><br></code></pre></td></tr></table></figure>\n\n<p><a href=\"http://babeljs.io/docs/usage/babelrc/\">.babelrc</a> 是 Babel 用來設置轉碼規則與定義 plugins 的文件。我們在根目錄下新增檔案 <code>.babelrc</code> ：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;presets&quot;</span>: [<span class=\"hljs-string\">&quot;es2015&quot;</span>, <span class=\"hljs-string\">&quot;react&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>express-react-engine-example/bin/www</code> 是 <code>express-generator</code> 預設產生的程式的進入點，我們需要在該文件頂部引入 <a href=\"https://babeljs.io/docs/usage/babel-register\">babel-register</a>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-meta\">#!/usr/bin/env node</span><br><br>require(<span class=\"hljs-string\">&#x27;babel-register&#x27;</span>);<br></code></pre></td></tr></table></figure>\n\n<p>如此，只要使用 <code>require</code> 載入副檔名為 <code>.es6</code>、<code>.es</code>、<code>.jsx</code>、<code>.js</code> 的文件，即會使用 babel 進行轉碼。</p>\n<h3 id=\"Browserify\"><a href=\"#Browserify\" class=\"headerlink\" title=\"Browserify\"></a>Browserify</h3><p>如果要開發複雜的 Single Page Spplication ，使用 <a href=\"https://webpack.js.org/\">Webpack</a> 仍是目前前端模組化方案的首選。不過在我們的場景下，使用 <a href=\"http://browserify.org/\">Browserify</a> 即可滿足需求。除了 <code>browserify</code> 外，我們還需要透過 <code>babelify</code> 將 ES6 程式碼轉換成 ES5 以兼容瀏覽器：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coffeescript\">$ <span class=\"hljs-built_in\">npm</span> browserify babelify<br></code></pre></td></tr></table></figure>\n\n<p>安裝好依賴檔案後，我們需要改寫 <code>package.json</code> 中的 <code>scripts</code> 指令：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&quot;scripts&quot;: &#123;<br>  &quot;start&quot;: &quot;browserify -t babelify views/index.js -o public/javascripts/bundle.js &amp;&amp; node ./bin/www&quot;<br>&#125;,<br></code></pre></td></tr></table></figure>\n\n<p>我們將 browserify 的 entry 定義在 <code>express-react-engine-example/views/index.js</code> ，並將打包的檔案輸出至 <code>express-react-engine-example/public/javascripts/bundle.js</code> 。</p>\n<h2 id=\"Using-React-as-Template-Engine\"><a href=\"#Using-React-as-Template-Engine\" class=\"headerlink\" title=\"Using React as Template Engine\"></a>Using React as Template Engine</h2><p><code>express-generator</code> 預設使用 <code>jade</code> (現已更名為 <a href=\"https://github.com/pugjs/pug\">pug</a>) 作為 template engine，我們將使 <code>react-engine</code> 取代之。請安裝以下依賴：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>npm install --save react-engine react react-dom react-router<span class=\"hljs-variable\">@3</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Setting-React-Engine-on-Server-Side\"><a href=\"#Setting-React-Engine-on-Server-Side\" class=\"headerlink\" title=\"Setting React Engine on Server Side\"></a>Setting React Engine on Server Side</h3><p>開啟根目錄下 <code>app.js</code> 檔案，引入 <code>react-engine</code> 模組：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> ReactEngine = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;react-engine&#x27;</span>);<br></code></pre></td></tr></table></figure>\n\n<p>在設置 <code>view engine</code> 部分，改寫設定如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// view engine setup</span><br><span class=\"hljs-keyword\">var</span> engine = ReactEngine.server.create(&#123;<br>  routes: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./views/routes&#x27;</span>),<br>  routesFilePath: path.join(__dirname, <span class=\"hljs-string\">&#x27;views/routes.js&#x27;</span>),<br>&#125;);<br><br>app.engine(<span class=\"hljs-string\">&#x27;js&#x27;</span>, engine);<br>app.set(<span class=\"hljs-string\">&#x27;views&#x27;</span>, path.join(__dirname, <span class=\"hljs-string\">&#x27;views&#x27;</span>));<br>app.set(<span class=\"hljs-string\">&#x27;view engine&#x27;</span>, <span class=\"hljs-string\">&#x27;js&#x27;</span>);<br>app.set(<span class=\"hljs-string\">&#x27;view&#x27;</span>, <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;react-engine/lib/expressView&#x27;</span>));<br></code></pre></td></tr></table></figure>\n\n<p><code>react-engine</code> 整合了 <code>react-router</code> ，為了匹配路由規則渲染出正確的 component ，請在 express 的 render function 改寫為 <code>res.render(req.url, [,locals])</code> 。如果有傳入 locals 物件，則會以 <code>PropTypes</code> 的形式讓 React Component 接收。</p>\n<h3 id=\"Setting-React-Engine-on-Client-Side\"><a href=\"#Setting-React-Engine-on-Client-Side\" class=\"headerlink\" title=\"Setting React Engine on Client Side\"></a>Setting React Engine on Client Side</h3><p>由於我們使用 <code>react-engine</code> 取代 <code>jade</code>，因此可以移除預設存在的檔案 <code>layout.jade</code>、<code>index.jade</code>、<code>error.jade</code>。</p>\n<p>請在 <code>express-react-engine-example/views</code> 目錄下建立 <code>index.js</code> 檔案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-meta\">&#x27;use strict&#x27;</span>;<br><br><span class=\"hljs-comment\">// import the react-router routes</span><br><span class=\"hljs-keyword\">var</span> Routes = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./routes.jsx&#x27;</span>);<br><br><span class=\"hljs-comment\">// import the react-engine&#x27;s client side booter</span><br><span class=\"hljs-keyword\">var</span> ReactEngineClient = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;react-engine/lib/client&#x27;</span>);<br><br><span class=\"hljs-comment\">// boot options</span><br><span class=\"hljs-keyword\">var</span> options = &#123;<br>  routes: Routes,<br><br>  <span class=\"hljs-comment\">// supply a function that can be called</span><br>  <span class=\"hljs-comment\">// to resolve the file that was rendered.</span><br>  viewResolver: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">viewName</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./views/&#x27;</span> + viewName);<br>  &#125;<br>&#125;;<br><br><span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">&#x27;DOMContentLoaded&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onLoad</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-comment\">// boot the app when the DOM is ready</span><br>  ReactEngineClient.boot(options);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>然後在 <code>express-react-engine-example/views</code> 目錄下建立 <code>routes.js</code> 檔案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; Router, Route, IndexRoute, browserHistory &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-router&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> Layout <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./Layout&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> IndexPage <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./IndexPage&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> ErrorPage <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./ErrorPage&#x27;</span>;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> (<br>  &lt;Router history=&#123;browserHistory&#125;&gt;<br>    &lt;Route path=<span class=\"hljs-string\">&#x27;/&#x27;</span> component=&#123;Layout&#125;&gt;<br>      &lt;IndexRoute component=&#123;IndexPage&#125; /&gt;<br>      &lt;Route path=<span class=\"hljs-string\">&#x27;/*&#x27;</span> component=&#123;ErrorPage&#125; /&gt;<br>    &lt;/Route&gt;<br>  &lt;/Router&gt;<br>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Creating-React-Components\"><a href=\"#Creating-React-Components\" class=\"headerlink\" title=\"Creating React Components\"></a>Creating React Components</h3><p>接下來，我們要撰寫 React Components 對應原先的 <code>jade</code> templates。在 <code>express-react-engine-example/views</code> 目錄下新增檔案 <code>Layout.js</code>、<code>IndexPage.js</code>、<code>ErrorPage.js</code>。</p>\n<p><code>express-react-engine-example/views/Layout.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React, &#123; Component &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Layout</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>&#123;<br>  render () &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      &lt;html&gt;<br>        &lt;head&gt;<br>          &lt;title&gt;&#123;<span class=\"hljs-built_in\">this</span>.props.title&#125;&lt;/title&gt;<br>          &lt;link rel=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> href=<span class=\"hljs-string\">&quot;/stylesheets/style.css&quot;</span> /&gt;<br>        &lt;/head&gt;<br>        &lt;body&gt;<br>          &#123;<span class=\"hljs-built_in\">this</span>.props.children&#125;<br>        &lt;/body&gt;<br>      &lt;/html&gt;<br>    )<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Layout<br></code></pre></td></tr></table></figure>\n\n<p><code>express-react-engine-example/views/IndexPage.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React, &#123; Component &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IndexPage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>&#123;<br>  render () &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      &lt;div&gt;<br>        &lt;h1&gt;&#123;<span class=\"hljs-built_in\">this</span>.props.title&#125;&lt;/h1&gt;<br>        &lt;p&gt;Welcome to &#123;<span class=\"hljs-built_in\">this</span>.props.title&#125;&lt;/p&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> IndexPage<br></code></pre></td></tr></table></figure>\n\n<p><code>express-react-engine-example/views/ErrorPage.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React, &#123; Component &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ErrorPage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>&#123;<br>  render () &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      &lt;div&gt;<br>        &lt;h1&gt;&#123;<span class=\"hljs-built_in\">this</span>.props.message&#125;&lt;/h1&gt;<br>        &lt;h2&gt;&#123;<span class=\"hljs-built_in\">this</span>.props.error.status&#125;&lt;/h2&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> ErrorPage<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Run-Your-Express-Application\"><a href=\"#Run-Your-Express-Application\" class=\"headerlink\" title=\"Run Your Express Application\"></a>Run Your Express Application</h2><p>執行：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-variable\">$</span> npm <span class=\"hljs-built_in\">start</span><br></code></pre></td></tr></table></figure>\n\n<p>此時， browserify &amp; babelify 將 <code>views</code> 目錄下的檔案打包成一份 <code>bundle.js</code>，然後再啟動 Express 應用程式。打開瀏覽器，進入網址 <code>http://localhost:3000/</code>，顯示 <code>Welcome to Express</code> 即完成 <code>react-engine</code> 的基本設定。</p>\n<p>範例程式<a href=\"https://github.com/chunkai1312/express-react-engine-example\">在此</a>。</p>\n<p>另外，我建立一個名為 <a href=\"https://github.com/chunkai1312/express-react-engine-boilerplate\">express-react-engine-boilerplate</a> 的專案，這是一個功能更豐富的樣板，整合了 <a href=\"https://github.com/substack/watchify\">watchify</a> 以及 <a href=\"https://github.com/mishoo/UglifyJS2\">uglify-js</a> 等 workflow ，並使用 <a href=\"https://github.com/AgentME/browserify-hmr\">browserify-hmr</a> 實現模組熱替換 (Hot Module Replacement)，針對程式碼修改或調整的部份，不必重新整理瀏覽器而達到即時刷新頁面的效果，讓開發過程更為快速流暢。</p>\n<p>順便一提，<a href=\"https://github.com/zeit/next.js\">Next.js</a> 是一個新興的框架，基於 React 的 Universal JavaScript Framework ，目前已有超過一萬個 stars 的關注，不妨可以參考看看。</p>\n","more":"<h2 id=\"Creating-an-Express-Application\"><a href=\"#Creating-an-Express-Application\" class=\"headerlink\" title=\"Creating an Express Application\"></a>Creating an Express Application</h2><p>為了簡單示例，這邊直接使用 <code>express-generator</code> 建立一個名為 <code>express-react-engine-example</code> 的專案：</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">$ npm install -g <span class=\"hljs-built_in\">express</span>-generator<br>$ exresss <span class=\"hljs-built_in\">express</span>-react-engine-<span class=\"hljs-built_in\">example</span><br></code></pre></td></tr></table></figure>\n\n<p>接著進入建立的專案目錄，並安裝預設依賴套件：</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">$ cd <span class=\"hljs-built_in\">express</span>-react-engine-<span class=\"hljs-built_in\">example</span> &amp;&amp; npm install<br></code></pre></td></tr></table></figure>\n\n<p>然後執行：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-variable\">$</span> npm <span class=\"hljs-built_in\">start</span><br></code></pre></td></tr></table></figure>\n\n<p>此時 Express 應用程式會跑在 <code>http://localhost:3000/</code> 。</p>\n<h2 id=\"Set-up-Babel-and-Browserify\"><a href=\"#Set-up-Babel-and-Browserify\" class=\"headerlink\" title=\"Set up Babel and Browserify\"></a>Set up Babel and Browserify</h2><h3 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h3><p>在開發模式下，我們使用 <a href=\"https://babeljs.io/\">Babel</a> 進行轉碼，請安裝以下依賴套件：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">$ npm <span class=\"hljs-keyword\">install </span>--save-dev <span class=\"hljs-keyword\">babel-register </span><span class=\"hljs-keyword\">babel-preset-es2015 </span><span class=\"hljs-keyword\">babel-preset-react</span><br></code></pre></td></tr></table></figure>\n\n<p><a href=\"http://babeljs.io/docs/usage/babelrc/\">.babelrc</a> 是 Babel 用來設置轉碼規則與定義 plugins 的文件。我們在根目錄下新增檔案 <code>.babelrc</code> ：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;presets&quot;</span>: [<span class=\"hljs-string\">&quot;es2015&quot;</span>, <span class=\"hljs-string\">&quot;react&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>express-react-engine-example/bin/www</code> 是 <code>express-generator</code> 預設產生的程式的進入點，我們需要在該文件頂部引入 <a href=\"https://babeljs.io/docs/usage/babel-register\">babel-register</a>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-meta\">#!/usr/bin/env node</span><br><br>require(<span class=\"hljs-string\">&#x27;babel-register&#x27;</span>);<br></code></pre></td></tr></table></figure>\n\n<p>如此，只要使用 <code>require</code> 載入副檔名為 <code>.es6</code>、<code>.es</code>、<code>.jsx</code>、<code>.js</code> 的文件，即會使用 babel 進行轉碼。</p>\n<h3 id=\"Browserify\"><a href=\"#Browserify\" class=\"headerlink\" title=\"Browserify\"></a>Browserify</h3><p>如果要開發複雜的 Single Page Spplication ，使用 <a href=\"https://webpack.js.org/\">Webpack</a> 仍是目前前端模組化方案的首選。不過在我們的場景下，使用 <a href=\"http://browserify.org/\">Browserify</a> 即可滿足需求。除了 <code>browserify</code> 外，我們還需要透過 <code>babelify</code> 將 ES6 程式碼轉換成 ES5 以兼容瀏覽器：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coffeescript\">$ <span class=\"hljs-built_in\">npm</span> browserify babelify<br></code></pre></td></tr></table></figure>\n\n<p>安裝好依賴檔案後，我們需要改寫 <code>package.json</code> 中的 <code>scripts</code> 指令：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&quot;scripts&quot;: &#123;<br>  &quot;start&quot;: &quot;browserify -t babelify views/index.js -o public/javascripts/bundle.js &amp;&amp; node ./bin/www&quot;<br>&#125;,<br></code></pre></td></tr></table></figure>\n\n<p>我們將 browserify 的 entry 定義在 <code>express-react-engine-example/views/index.js</code> ，並將打包的檔案輸出至 <code>express-react-engine-example/public/javascripts/bundle.js</code> 。</p>\n<h2 id=\"Using-React-as-Template-Engine\"><a href=\"#Using-React-as-Template-Engine\" class=\"headerlink\" title=\"Using React as Template Engine\"></a>Using React as Template Engine</h2><p><code>express-generator</code> 預設使用 <code>jade</code> (現已更名為 <a href=\"https://github.com/pugjs/pug\">pug</a>) 作為 template engine，我們將使 <code>react-engine</code> 取代之。請安裝以下依賴：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>npm install --save react-engine react react-dom react-router<span class=\"hljs-variable\">@3</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Setting-React-Engine-on-Server-Side\"><a href=\"#Setting-React-Engine-on-Server-Side\" class=\"headerlink\" title=\"Setting React Engine on Server Side\"></a>Setting React Engine on Server Side</h3><p>開啟根目錄下 <code>app.js</code> 檔案，引入 <code>react-engine</code> 模組：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> ReactEngine = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;react-engine&#x27;</span>);<br></code></pre></td></tr></table></figure>\n\n<p>在設置 <code>view engine</code> 部分，改寫設定如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// view engine setup</span><br><span class=\"hljs-keyword\">var</span> engine = ReactEngine.server.create(&#123;<br>  routes: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./views/routes&#x27;</span>),<br>  routesFilePath: path.join(__dirname, <span class=\"hljs-string\">&#x27;views/routes.js&#x27;</span>),<br>&#125;);<br><br>app.engine(<span class=\"hljs-string\">&#x27;js&#x27;</span>, engine);<br>app.set(<span class=\"hljs-string\">&#x27;views&#x27;</span>, path.join(__dirname, <span class=\"hljs-string\">&#x27;views&#x27;</span>));<br>app.set(<span class=\"hljs-string\">&#x27;view engine&#x27;</span>, <span class=\"hljs-string\">&#x27;js&#x27;</span>);<br>app.set(<span class=\"hljs-string\">&#x27;view&#x27;</span>, <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;react-engine/lib/expressView&#x27;</span>));<br></code></pre></td></tr></table></figure>\n\n<p><code>react-engine</code> 整合了 <code>react-router</code> ，為了匹配路由規則渲染出正確的 component ，請在 express 的 render function 改寫為 <code>res.render(req.url, [,locals])</code> 。如果有傳入 locals 物件，則會以 <code>PropTypes</code> 的形式讓 React Component 接收。</p>\n<h3 id=\"Setting-React-Engine-on-Client-Side\"><a href=\"#Setting-React-Engine-on-Client-Side\" class=\"headerlink\" title=\"Setting React Engine on Client Side\"></a>Setting React Engine on Client Side</h3><p>由於我們使用 <code>react-engine</code> 取代 <code>jade</code>，因此可以移除預設存在的檔案 <code>layout.jade</code>、<code>index.jade</code>、<code>error.jade</code>。</p>\n<p>請在 <code>express-react-engine-example/views</code> 目錄下建立 <code>index.js</code> 檔案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-meta\">&#x27;use strict&#x27;</span>;<br><br><span class=\"hljs-comment\">// import the react-router routes</span><br><span class=\"hljs-keyword\">var</span> Routes = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./routes.jsx&#x27;</span>);<br><br><span class=\"hljs-comment\">// import the react-engine&#x27;s client side booter</span><br><span class=\"hljs-keyword\">var</span> ReactEngineClient = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;react-engine/lib/client&#x27;</span>);<br><br><span class=\"hljs-comment\">// boot options</span><br><span class=\"hljs-keyword\">var</span> options = &#123;<br>  routes: Routes,<br><br>  <span class=\"hljs-comment\">// supply a function that can be called</span><br>  <span class=\"hljs-comment\">// to resolve the file that was rendered.</span><br>  viewResolver: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">viewName</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./views/&#x27;</span> + viewName);<br>  &#125;<br>&#125;;<br><br><span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">&#x27;DOMContentLoaded&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onLoad</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-comment\">// boot the app when the DOM is ready</span><br>  ReactEngineClient.boot(options);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>然後在 <code>express-react-engine-example/views</code> 目錄下建立 <code>routes.js</code> 檔案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; Router, Route, IndexRoute, browserHistory &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-router&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> Layout <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./Layout&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> IndexPage <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./IndexPage&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> ErrorPage <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./ErrorPage&#x27;</span>;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> (<br>  &lt;Router history=&#123;browserHistory&#125;&gt;<br>    &lt;Route path=<span class=\"hljs-string\">&#x27;/&#x27;</span> component=&#123;Layout&#125;&gt;<br>      &lt;IndexRoute component=&#123;IndexPage&#125; /&gt;<br>      &lt;Route path=<span class=\"hljs-string\">&#x27;/*&#x27;</span> component=&#123;ErrorPage&#125; /&gt;<br>    &lt;/Route&gt;<br>  &lt;/Router&gt;<br>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Creating-React-Components\"><a href=\"#Creating-React-Components\" class=\"headerlink\" title=\"Creating React Components\"></a>Creating React Components</h3><p>接下來，我們要撰寫 React Components 對應原先的 <code>jade</code> templates。在 <code>express-react-engine-example/views</code> 目錄下新增檔案 <code>Layout.js</code>、<code>IndexPage.js</code>、<code>ErrorPage.js</code>。</p>\n<p><code>express-react-engine-example/views/Layout.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React, &#123; Component &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Layout</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>&#123;<br>  render () &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      &lt;html&gt;<br>        &lt;head&gt;<br>          &lt;title&gt;&#123;<span class=\"hljs-built_in\">this</span>.props.title&#125;&lt;/title&gt;<br>          &lt;link rel=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> href=<span class=\"hljs-string\">&quot;/stylesheets/style.css&quot;</span> /&gt;<br>        &lt;/head&gt;<br>        &lt;body&gt;<br>          &#123;<span class=\"hljs-built_in\">this</span>.props.children&#125;<br>        &lt;/body&gt;<br>      &lt;/html&gt;<br>    )<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Layout<br></code></pre></td></tr></table></figure>\n\n<p><code>express-react-engine-example/views/IndexPage.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React, &#123; Component &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IndexPage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>&#123;<br>  render () &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      &lt;div&gt;<br>        &lt;h1&gt;&#123;<span class=\"hljs-built_in\">this</span>.props.title&#125;&lt;/h1&gt;<br>        &lt;p&gt;Welcome to &#123;<span class=\"hljs-built_in\">this</span>.props.title&#125;&lt;/p&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> IndexPage<br></code></pre></td></tr></table></figure>\n\n<p><code>express-react-engine-example/views/ErrorPage.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React, &#123; Component &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ErrorPage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>&#123;<br>  render () &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      &lt;div&gt;<br>        &lt;h1&gt;&#123;<span class=\"hljs-built_in\">this</span>.props.message&#125;&lt;/h1&gt;<br>        &lt;h2&gt;&#123;<span class=\"hljs-built_in\">this</span>.props.error.status&#125;&lt;/h2&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> ErrorPage<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Run-Your-Express-Application\"><a href=\"#Run-Your-Express-Application\" class=\"headerlink\" title=\"Run Your Express Application\"></a>Run Your Express Application</h2><p>執行：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-variable\">$</span> npm <span class=\"hljs-built_in\">start</span><br></code></pre></td></tr></table></figure>\n\n<p>此時， browserify &amp; babelify 將 <code>views</code> 目錄下的檔案打包成一份 <code>bundle.js</code>，然後再啟動 Express 應用程式。打開瀏覽器，進入網址 <code>http://localhost:3000/</code>，顯示 <code>Welcome to Express</code> 即完成 <code>react-engine</code> 的基本設定。</p>\n<p>範例程式<a href=\"https://github.com/chunkai1312/express-react-engine-example\">在此</a>。</p>\n<p>另外，我建立一個名為 <a href=\"https://github.com/chunkai1312/express-react-engine-boilerplate\">express-react-engine-boilerplate</a> 的專案，這是一個功能更豐富的樣板，整合了 <a href=\"https://github.com/substack/watchify\">watchify</a> 以及 <a href=\"https://github.com/mishoo/UglifyJS2\">uglify-js</a> 等 workflow ，並使用 <a href=\"https://github.com/AgentME/browserify-hmr\">browserify-hmr</a> 實現模組熱替換 (Hot Module Replacement)，針對程式碼修改或調整的部份，不必重新整理瀏覽器而達到即時刷新頁面的效果，讓開發過程更為快速流暢。</p>\n<p>順便一提，<a href=\"https://github.com/zeit/next.js\">Next.js</a> 是一個新興的框架，基於 React 的 Universal JavaScript Framework ，目前已有超過一萬個 stars 的關注，不妨可以參考看看。</p>","categories":[{"name":"技術分享","path":"api/categories/技術分享.json"}],"tags":[{"name":"NodeJS","path":"api/tags/NodeJS.json"},{"name":"Express","path":"api/tags/Express.json"},{"name":"React","path":"api/tags/React.json"},{"name":"Universal JavaScript","path":"api/tags/Universal JavaScript.json"}]}
{"title":"使用 AngularJS v1.5+ 建立 component-based 應用程式","slug":"component-based-application-using-angularjs-v1.5+","date":"2016-12-23T18:02:30.000Z","updated":"2021-09-05T09:19:12.875Z","comments":true,"path":"api/articles/component-based-application-using-angularjs-v1.5+.json","excerpt":" [Figure] angular.component() 是在 Angular 1.5 版本中新增的方法，它是基於 angular.directive()，更簡單地說，即是 controller + template 。有了 angular.component() 這個新利器，我們可以很容易地將 Angular 寫成像 React 一樣的元件化應用程式 (component-based application)。","covers":["/2016/12/24/component-based-application-using-angularjs-v1.5+/cover.jpg"],"content":"<p><img src=\"/2016/12/24/component-based-application-using-angularjs-v1.5+/cover.jpg\"></p>\n<blockquote>\n<p><code>angular.component()</code> 是在 Angular 1.5 版本中新增的方法，它是基於 <code>angular.directive()</code>，更簡單地說，即是 <strong>controller + template</strong> 。有了 <code>angular.component()</code> 這個新利器，我們可以很容易地將 Angular 寫成像 React 一樣的元件化應用程式 (component-based application)。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"Code-Example\"><a href=\"#Code-Example\" class=\"headerlink\" title=\"Code Example\"></a>Code Example</h2><p>直接來看看實際的例子，以下是 <a href=\"https://facebook.github.io/react\">React</a> 官方網站上一個簡單的 todo app 範例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TodoApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> &#123;<br>    <span class=\"hljs-built_in\">super</span>(props);<br>    <span class=\"hljs-built_in\">this</span>.handleChange = <span class=\"hljs-built_in\">this</span>.handleChange.bind(<span class=\"hljs-built_in\">this</span>);<br>    <span class=\"hljs-built_in\">this</span>.handleSubmit = <span class=\"hljs-built_in\">this</span>.handleSubmit.bind(<span class=\"hljs-built_in\">this</span>);<br>    <span class=\"hljs-built_in\">this</span>.state = &#123;<span class=\"hljs-attr\">items</span>: [], <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>&#125;;<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      &lt;div&gt;<br>        &lt;h3&gt;TODO&lt;/h3&gt;<br>        &lt;TodoList items=&#123;<span class=\"hljs-built_in\">this</span>.state.items&#125; /&gt;<br>        &lt;form onSubmit=&#123;<span class=\"hljs-built_in\">this</span>.handleSubmit&#125;&gt;<br>          &lt;input onChange=&#123;<span class=\"hljs-built_in\">this</span>.handleChange&#125; value=&#123;<span class=\"hljs-built_in\">this</span>.state.text&#125; /&gt;<br>          &lt;button&gt;&#123;<span class=\"hljs-string\">&#x27;Add #&#x27;</span> + (<span class=\"hljs-built_in\">this</span>.state.items.length + <span class=\"hljs-number\">1</span>)&#125;&lt;/button&gt;<br>        &lt;/form&gt;<br>      &lt;/div&gt;<br>    );<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-title\">handleChange</span>(<span class=\"hljs-params\">e</span>)</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.setState(&#123;<span class=\"hljs-attr\">text</span>: e.target.value&#125;);<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-title\">handleSubmit</span>(<span class=\"hljs-params\">e</span>)</span> &#123;<br>    e.preventDefault();<br>    <span class=\"hljs-keyword\">var</span> newItem = &#123;<br>      text: <span class=\"hljs-built_in\">this</span>.state.text,<br>      id: <span class=\"hljs-built_in\">Date</span>.now()<br>    &#125;;<br>    <span class=\"hljs-built_in\">this</span>.setState(<span class=\"hljs-function\">(<span class=\"hljs-params\">prevState</span>) =&gt;</span> (&#123;<br>      items: prevState.items.concat(newItem),<br>      text: <span class=\"hljs-string\">&#x27;&#x27;</span><br>    &#125;));<br>  &#125;<br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TodoList</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      &lt;ul&gt;<br>        &#123;<span class=\"hljs-built_in\">this</span>.props.items.map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> (<br>          &lt;li key=&#123;item.id&#125;&gt;&#123;item.text&#125;&lt;/li&gt;<br>        ))&#125;<br>      &lt;/ul&gt;<br>    );<br>  &#125;<br>&#125;<br><br>ReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TodoApp</span> /&gt;</span></span>, mountNode);<br></code></pre></td></tr></table></figure>\n\n<p>這個範例定義的 2 個 component。 <code>TodoApp</code> 為 root component，包含一個 input text field 用來輸入 todo；<code>TodoList</code> 則用來展示 todo list。</p>\n<p>接著我們來看看使用 Angular 1.5 提供的 <code>angular.component()</code> 來寫這段範例會是什麼樣子。以下是我將上面的 React 範例寫成 Angular 版本：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TodoAppController</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.items = [];<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-title\">handleSubmit</span>(<span class=\"hljs-params\">e</span>)</span> &#123;<br>    e.preventDefault();<br>    <span class=\"hljs-keyword\">var</span> newItem = &#123;<br>      text: <span class=\"hljs-built_in\">this</span>.text,<br>      id: <span class=\"hljs-built_in\">Date</span>.now()<br>    &#125;;<br>    <span class=\"hljs-built_in\">this</span>.items = <span class=\"hljs-built_in\">this</span>.items.concat(newItem);<br>    <span class=\"hljs-built_in\">this</span>.text = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> todoAppComponent = &#123;<br>  controller: TodoAppController,<br>  template: <span class=\"hljs-string\">`</span><br><span class=\"hljs-string\">    &lt;div&gt;</span><br><span class=\"hljs-string\">      &lt;h3&gt;TODO&lt;/h3&gt;</span><br><span class=\"hljs-string\">      &lt;todo-list items=&quot;$ctrl.items&quot;&gt;&lt;/todo-list&gt;</span><br><span class=\"hljs-string\">      &lt;form ng-submit=&quot;$ctrl.handleSubmit($event)&quot;&gt;</span><br><span class=\"hljs-string\">        &lt;input ng-model=&quot;$ctrl.text&quot; /&gt;</span><br><span class=\"hljs-string\">        &lt;button&gt;Add # &#123;&#123;$ctrl.items.length + 1&#125;&#125;&lt;/button&gt;</span><br><span class=\"hljs-string\">      &lt;/form&gt;</span><br><span class=\"hljs-string\">    &lt;/div&gt;</span><br><span class=\"hljs-string\">  `</span><br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TodoListController</span> </span>&#123; &#125;<br><br><span class=\"hljs-keyword\">const</span> todoListComponent = &#123;<br>  bindings: &#123; <span class=\"hljs-attr\">items</span>: <span class=\"hljs-string\">&#x27;&lt;&#x27;</span> &#125;,<br>  contorller: TodoListController,<br>  template: <span class=\"hljs-string\">`</span><br><span class=\"hljs-string\">    &lt;ul&gt;</span><br><span class=\"hljs-string\">      &lt;li ng-repeat=&quot;item in $ctrl.items&quot;&gt;&#123;&#123;item.text&#125;&#125;&lt;/li&gt;</span><br><span class=\"hljs-string\">    &lt;/ul&gt;</span><br><span class=\"hljs-string\">  `</span><br>&#125;<br><br>angular<br>  .module(<span class=\"hljs-string\">&#x27;todoApp&#x27;</span>, [])<br>  .component(<span class=\"hljs-string\">&#x27;todoApp&#x27;</span>, todoAppComponent)<br>  .component(<span class=\"hljs-string\">&#x27;todoList&#x27;</span>, todoListComponent)<br></code></pre></td></tr></table></figure>\n\n<p>這裡我們使用 ES6/ES2015 的 <code>class</code> 來定義 controller，template的 <code>$ctrl</code> 會指向 controller 的 <code>this</code>，此為 angular 所預設。您也可以在 <code>component</code> 加上 <code>controllerAs</code> 選項將 <code>$ctrl</code> 命名為您想指定的變數名稱。</p>\n<p><code>bindings</code> 的前身其實就是 <code>angular.directive()</code> 選項的 <code>scope</code>，如果需要外部的資料引入 component，我們可以定義於此。換作 React 的說法，大概就是 <code>props</code>。<code>bindings</code> 的屬性定義 <code>&lt;</code> 符號表示單向綁定，有別於 <code>=</code> 符號的雙向綁定，它只作用於該 component，不會去改變外部資料。</p>\n<p>我們可以發現，用上 <code>angular.component()</code> 後，除了 React 用 JSX，而 Angular 用 template 以外，我們還在 Angular 版本用了 <code>ngModel</code> 讓程式少寫了一點，其他看起來其實已經跟 React 版本相去不遠。</p>\n<p>將 Angular 應用程式元件化之後，我們還可以結合在 React 生態圈被廣泛使用的 <a href=\"http://redux.js.org/\">Redux</a> 做狀態管理，讓整個程式資料流變得可預測、更清楚。</p>\n<p>TodoMVC 是一個經典範例，也是比上面稍微複雜一點的例子，這裡我用 <a href=\"https://github.com/angular-redux/ng-redux\">ng-redux</a> 寫了一個 <a href=\"https://ng-redux-todomvc.herokuapp.com/\">demo</a>，並附上 Github <a href=\"https://github.com/chunkai1312/ng-redux-todomvc\">repo</a> 供參考。</p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>Angular 1 曾經紅極一時，但在 2016 年，可能相對被認為過時了一點。話雖如此，許多使用 Angular 1 開發的舊專案還是要繼續維護。從目前幾個熱門的前端框架，如 <a href=\"https://facebook.github.io/react\">React</a>、<a href=\"https://angular.io/\">Angular 2</a> 、<a href=\"https://vuejs.org/\">Vue</a> 來看，不難發現前端應用程式元件化已經是大勢所趨，將既有程式使用 <code>angular.component()</code> 重構，除了讓程式變得好維護外，日後若要升級 Angular 2，甚至遷移到 React 或 Vue，都會比較容易一些。</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://docs.angularjs.org/guide/component\">Understanding Components</a></li>\n<li><a href=\"http://blog.grossman.io/angular-1-using-redux-architecture\">Angular 1 using redux architecture</a></li>\n</ul>\n","more":"<h2 id=\"Code-Example\"><a href=\"#Code-Example\" class=\"headerlink\" title=\"Code Example\"></a>Code Example</h2><p>直接來看看實際的例子，以下是 <a href=\"https://facebook.github.io/react\">React</a> 官方網站上一個簡單的 todo app 範例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TodoApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> &#123;<br>    <span class=\"hljs-built_in\">super</span>(props);<br>    <span class=\"hljs-built_in\">this</span>.handleChange = <span class=\"hljs-built_in\">this</span>.handleChange.bind(<span class=\"hljs-built_in\">this</span>);<br>    <span class=\"hljs-built_in\">this</span>.handleSubmit = <span class=\"hljs-built_in\">this</span>.handleSubmit.bind(<span class=\"hljs-built_in\">this</span>);<br>    <span class=\"hljs-built_in\">this</span>.state = &#123;<span class=\"hljs-attr\">items</span>: [], <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>&#125;;<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      &lt;div&gt;<br>        &lt;h3&gt;TODO&lt;/h3&gt;<br>        &lt;TodoList items=&#123;<span class=\"hljs-built_in\">this</span>.state.items&#125; /&gt;<br>        &lt;form onSubmit=&#123;<span class=\"hljs-built_in\">this</span>.handleSubmit&#125;&gt;<br>          &lt;input onChange=&#123;<span class=\"hljs-built_in\">this</span>.handleChange&#125; value=&#123;<span class=\"hljs-built_in\">this</span>.state.text&#125; /&gt;<br>          &lt;button&gt;&#123;<span class=\"hljs-string\">&#x27;Add #&#x27;</span> + (<span class=\"hljs-built_in\">this</span>.state.items.length + <span class=\"hljs-number\">1</span>)&#125;&lt;/button&gt;<br>        &lt;/form&gt;<br>      &lt;/div&gt;<br>    );<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-title\">handleChange</span>(<span class=\"hljs-params\">e</span>)</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.setState(&#123;<span class=\"hljs-attr\">text</span>: e.target.value&#125;);<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-title\">handleSubmit</span>(<span class=\"hljs-params\">e</span>)</span> &#123;<br>    e.preventDefault();<br>    <span class=\"hljs-keyword\">var</span> newItem = &#123;<br>      text: <span class=\"hljs-built_in\">this</span>.state.text,<br>      id: <span class=\"hljs-built_in\">Date</span>.now()<br>    &#125;;<br>    <span class=\"hljs-built_in\">this</span>.setState(<span class=\"hljs-function\">(<span class=\"hljs-params\">prevState</span>) =&gt;</span> (&#123;<br>      items: prevState.items.concat(newItem),<br>      text: <span class=\"hljs-string\">&#x27;&#x27;</span><br>    &#125;));<br>  &#125;<br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TodoList</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      &lt;ul&gt;<br>        &#123;<span class=\"hljs-built_in\">this</span>.props.items.map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> (<br>          &lt;li key=&#123;item.id&#125;&gt;&#123;item.text&#125;&lt;/li&gt;<br>        ))&#125;<br>      &lt;/ul&gt;<br>    );<br>  &#125;<br>&#125;<br><br>ReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TodoApp</span> /&gt;</span></span>, mountNode);<br></code></pre></td></tr></table></figure>\n\n<p>這個範例定義的 2 個 component。 <code>TodoApp</code> 為 root component，包含一個 input text field 用來輸入 todo；<code>TodoList</code> 則用來展示 todo list。</p>\n<p>接著我們來看看使用 Angular 1.5 提供的 <code>angular.component()</code> 來寫這段範例會是什麼樣子。以下是我將上面的 React 範例寫成 Angular 版本：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TodoAppController</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.items = [];<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-title\">handleSubmit</span>(<span class=\"hljs-params\">e</span>)</span> &#123;<br>    e.preventDefault();<br>    <span class=\"hljs-keyword\">var</span> newItem = &#123;<br>      text: <span class=\"hljs-built_in\">this</span>.text,<br>      id: <span class=\"hljs-built_in\">Date</span>.now()<br>    &#125;;<br>    <span class=\"hljs-built_in\">this</span>.items = <span class=\"hljs-built_in\">this</span>.items.concat(newItem);<br>    <span class=\"hljs-built_in\">this</span>.text = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> todoAppComponent = &#123;<br>  controller: TodoAppController,<br>  template: <span class=\"hljs-string\">`</span><br><span class=\"hljs-string\">    &lt;div&gt;</span><br><span class=\"hljs-string\">      &lt;h3&gt;TODO&lt;/h3&gt;</span><br><span class=\"hljs-string\">      &lt;todo-list items=&quot;$ctrl.items&quot;&gt;&lt;/todo-list&gt;</span><br><span class=\"hljs-string\">      &lt;form ng-submit=&quot;$ctrl.handleSubmit($event)&quot;&gt;</span><br><span class=\"hljs-string\">        &lt;input ng-model=&quot;$ctrl.text&quot; /&gt;</span><br><span class=\"hljs-string\">        &lt;button&gt;Add # &#123;&#123;$ctrl.items.length + 1&#125;&#125;&lt;/button&gt;</span><br><span class=\"hljs-string\">      &lt;/form&gt;</span><br><span class=\"hljs-string\">    &lt;/div&gt;</span><br><span class=\"hljs-string\">  `</span><br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TodoListController</span> </span>&#123; &#125;<br><br><span class=\"hljs-keyword\">const</span> todoListComponent = &#123;<br>  bindings: &#123; <span class=\"hljs-attr\">items</span>: <span class=\"hljs-string\">&#x27;&lt;&#x27;</span> &#125;,<br>  contorller: TodoListController,<br>  template: <span class=\"hljs-string\">`</span><br><span class=\"hljs-string\">    &lt;ul&gt;</span><br><span class=\"hljs-string\">      &lt;li ng-repeat=&quot;item in $ctrl.items&quot;&gt;&#123;&#123;item.text&#125;&#125;&lt;/li&gt;</span><br><span class=\"hljs-string\">    &lt;/ul&gt;</span><br><span class=\"hljs-string\">  `</span><br>&#125;<br><br>angular<br>  .module(<span class=\"hljs-string\">&#x27;todoApp&#x27;</span>, [])<br>  .component(<span class=\"hljs-string\">&#x27;todoApp&#x27;</span>, todoAppComponent)<br>  .component(<span class=\"hljs-string\">&#x27;todoList&#x27;</span>, todoListComponent)<br></code></pre></td></tr></table></figure>\n\n<p>這裡我們使用 ES6/ES2015 的 <code>class</code> 來定義 controller，template的 <code>$ctrl</code> 會指向 controller 的 <code>this</code>，此為 angular 所預設。您也可以在 <code>component</code> 加上 <code>controllerAs</code> 選項將 <code>$ctrl</code> 命名為您想指定的變數名稱。</p>\n<p><code>bindings</code> 的前身其實就是 <code>angular.directive()</code> 選項的 <code>scope</code>，如果需要外部的資料引入 component，我們可以定義於此。換作 React 的說法，大概就是 <code>props</code>。<code>bindings</code> 的屬性定義 <code>&lt;</code> 符號表示單向綁定，有別於 <code>=</code> 符號的雙向綁定，它只作用於該 component，不會去改變外部資料。</p>\n<p>我們可以發現，用上 <code>angular.component()</code> 後，除了 React 用 JSX，而 Angular 用 template 以外，我們還在 Angular 版本用了 <code>ngModel</code> 讓程式少寫了一點，其他看起來其實已經跟 React 版本相去不遠。</p>\n<p>將 Angular 應用程式元件化之後，我們還可以結合在 React 生態圈被廣泛使用的 <a href=\"http://redux.js.org/\">Redux</a> 做狀態管理，讓整個程式資料流變得可預測、更清楚。</p>\n<p>TodoMVC 是一個經典範例，也是比上面稍微複雜一點的例子，這裡我用 <a href=\"https://github.com/angular-redux/ng-redux\">ng-redux</a> 寫了一個 <a href=\"https://ng-redux-todomvc.herokuapp.com/\">demo</a>，並附上 Github <a href=\"https://github.com/chunkai1312/ng-redux-todomvc\">repo</a> 供參考。</p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>Angular 1 曾經紅極一時，但在 2016 年，可能相對被認為過時了一點。話雖如此，許多使用 Angular 1 開發的舊專案還是要繼續維護。從目前幾個熱門的前端框架，如 <a href=\"https://facebook.github.io/react\">React</a>、<a href=\"https://angular.io/\">Angular 2</a> 、<a href=\"https://vuejs.org/\">Vue</a> 來看，不難發現前端應用程式元件化已經是大勢所趨，將既有程式使用 <code>angular.component()</code> 重構，除了讓程式變得好維護外，日後若要升級 Angular 2，甚至遷移到 React 或 Vue，都會比較容易一些。</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://docs.angularjs.org/guide/component\">Understanding Components</a></li>\n<li><a href=\"http://blog.grossman.io/angular-1-using-redux-architecture\">Angular 1 using redux architecture</a></li>\n</ul>","categories":[{"name":"技術分享","path":"api/categories/技術分享.json"}],"tags":[{"name":"AngularJS","path":"api/tags/AngularJS.json"},{"name":"前端工程","path":"api/tags/前端工程.json"}]}
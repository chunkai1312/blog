{"title":"NestJS x Fugle API x LINE Notify：打造股票交易訊號通知系統","slug":"trading-signal-notifier","date":"2023-11-27T16:00:00.000Z","updated":"2023-11-29T06:26:53.084Z","comments":true,"path":"api/articles/trading-signal-notifier.json","excerpt":" [Figure] 前言在瞬息萬變的金融市場中，抓住投資機會並應對風險至關重要，你可能已經擁有自己的交易策略，但要時刻關注市場動態並非易事，因此需要一套可靠行情監控工具，幫助你隨時掌握市場的脈動。","covers":["/2023/11/28/trading-signal-notifier/cover.png","./nodejs.png","./nodejs-official-site.png","./nestjs.png","./nest-cli.png","./fugle-api-1.png","./fugle-api-2.png","./fugle-api-3.png","./line-notify-1.png","./line-notify-2.png","./line-notify-3.png","./line-notify-4.png","./line-notify-5.png","./notification.png","./docker.png","./MP22331_banner_1800-410.jpg"],"content":"<p><img src=\"/2023/11/28/trading-signal-notifier/cover.png\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在瞬息萬變的金融市場中，抓住投資機會並應對風險至關重要，你可能已經擁有自己的交易策略，但要時刻關注市場動態並非易事，因此需要一套可靠行情監控工具，幫助你隨時掌握市場的脈動。</p>\n<span id=\"more\"></span>\n\n<p>打造一個量身定制的行情監控系統，不僅能節省大量盯盤的時間，還能根據你的投資風格和目標，設定警示和提醒，更精準地捕捉符合策略的市場事件。這個系統能追蹤行情變化，即時地向你發送通知，讓你專注於更深入的投資研究，進而制定相應的交易策略。</p>\n<p>許多投資者選擇運用技術指標來決定進出場時機，在坊間流行一種以 <strong>KD 指標</strong> 來操作 <strong>元大台灣50</strong>（0050） 的交易策略。KD（KDJ）是一種擺盪指標，它是由隨機指標（Stochastic Oscillator）演變而來，由三個線構成：K 線（快速隨機線）、D 線（慢速隨機線）和 J 線。KD 指標的主要功能在於判斷市場的超買和超賣狀態，並提供進出場的參考。例如：</p>\n<ul>\n<li>當 K 值大於 80 時，表示市場處於超買狀態，投資者可以考慮賣出。</li>\n<li>當 K 值小於 20 時，表示市場處於超賣狀態，投資者可以考慮買進。</li>\n</ul>\n<p>本篇文章將以 NestJS 運用 Fugle API 及 LINE Notify 來打造股票進出場訊號通知系統，並以 <strong>元大台灣50</strong> 為例，使用 KD 指標作為進出場的參考，並在每個交易日的 <code>13:25</code> 時發送通知。這個時間點可供投資者運用收盤前 5 分鐘進行試撮期間，以便在考慮是否進行交易。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">WARNING:</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">本篇文章僅作為範例說明，而非投資建議。</td>\n</tr>\n</tbody></table>\n<h2 id=\"目錄\"><a href=\"#目錄\" class=\"headerlink\" title=\"目錄\"></a>目錄</h2><ul>\n<li><a href=\"#%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99\">事前準備</a><ul>\n<li><a href=\"#%E5%AE%89%E8%A3%9D-nodejs\">安裝 Node.js</a></li>\n<li><a href=\"#%E5%AE%89%E8%A3%9D-nest-cli\">安裝 Nest CLI</a></li>\n<li><a href=\"#%E5%8F%96%E5%BE%97-fugle-api-%E9%87%91%E9%91%B0\">取得 Fugle API 金鑰</a></li>\n<li><a href=\"#%E5%8F%96%E5%BE%97-line-notify-%E5%AD%98%E5%8F%96%E6%AC%8A%E6%9D%96\">取得 LINE Notify 存取權杖</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%A8%AD%E5%AE%9A%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F\">設定應用程式</a><ul>\n<li><a href=\"#%E5%BB%BA%E7%AB%8B-nest-%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F\">建立 Nest 應用程式</a></li>\n<li><a href=\"#%E5%AE%89%E8%A3%9D%E4%BE%9D%E8%B3%B4%E6%A8%A1%E7%B5%84\">安裝依賴模組</a></li>\n<li><a href=\"#%E8%A8%AD%E5%AE%9A%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8\">設定環境變數</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%AF%A6%E4%BD%9C%E9%80%9A%E7%9F%A5%E6%9C%8D%E5%8B%99\">實作通知服務</a><ul>\n<li><a href=\"#%E5%8C%AF%E5%85%A5%E6%A8%A1%E7%B5%84%E8%88%87%E4%BE%9D%E8%B3%B4%E6%B3%A8%E5%85%A5\">匯入模組與依賴注入</a></li>\n<li><a href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E8%88%87-k-%E7%B7%9A%E6%95%B8%E6%93%9A\">初始化應用程式與 K 線數據</a></li>\n<li><a href=\"#%E5%AE%9A%E6%99%82%E5%8F%96%E5%BE%97%E5%8D%B3%E6%99%82%E5%A0%B1%E5%83%B9\">定時取得即時報價</a></li>\n<li><a href=\"#%E7%99%BC%E9%80%81-line-notify-%E9%80%9A%E7%9F%A5\">發送 LINE Notify 通知</a></li>\n<li><a href=\"#%E5%9F%B7%E8%A1%8C%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F\">執行應用程式</a></li>\n</ul>\n</li>\n<li><a href=\"#bonus%E5%AE%B9%E5%99%A8%E5%8C%96%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E9%83%A8%E7%BD%B2\">Bonus：容器化應用程式部署</a><ul>\n<li><a href=\"#%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E8%A1%93%E8%88%87-docker\">容器化技術與 Docker</a></li>\n<li><a href=\"#%E6%BA%96%E5%82%99-docker-%E7%92%B0%E5%A2%83\">準備 Docker 環境</a></li>\n<li><a href=\"#%E5%BB%BA%E6%A7%8B-docker-%E6%98%A0%E5%83%8F%E6%AA%94\">建構 Docker 映像檔</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8-docker-compose-%E5%9F%B7%E8%A1%8C%E5%AE%B9%E5%99%A8%E5%8C%96%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F\">使用 Docker Compose 執行容器化應用程式</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"事前準備\"><a href=\"#事前準備\" class=\"headerlink\" title=\"事前準備\"></a>事前準備</h2><p>在開始實作前，請先準備好你的開發環境，正如俗話說：「工欲善其事，必先利其器。」</p>\n<p>安裝開發環境時，請留意不同作業系統和版本之間的差異，為確保安裝工具能順利運作，請先確認你的本機執行環境，詳細閱讀官方文件和教學後，再進行安裝及相關設定。</p>\n<h3 id=\"安裝-Node-js\"><a href=\"#安裝-Node-js\" class=\"headerlink\" title=\"安裝 Node.js\"></a>安裝 Node.js</h3><p><strong>Node.js</strong> 是基於 Chrome V8 JavaScript 引擎的開放原始碼、跨平台、可用於伺服器端應用程式的執行環境，它提供事件驅動、非阻塞的I/O 模型，讓你能有效率地建立可擴展的網路應用程式。</p>\n<figure>\n  <img src=\"./nodejs.png\" width=\"320\" alt=\"圖 1：Node.js\" align=\"center\">\n  <figcaption><em>圖 1：Node.js</em></figcaption>\n  <br><br>\n</figure>\n\n<p>首先，你需要安裝 Node.js 環境，請前往 Node.js <a href=\"https://nodejs.org/\">官方網站</a> 下載適合你作業系統的安裝檔，通常建議選擇 LTS（Long Term Support）版本，這是官方提供長期支援的穩定版本。當然，如果你想體驗 Node.js 最新功能，也可以選擇下載最新版。</p>\n<figure>\n  <img src=\"./nodejs-official-site.png\" alt=\"圖 2：Node.js 官方網站\" align=\"center\">\n  <figcaption><em>圖 2：Node.js 官方網站</em></figcaption>\n  <br><br>\n</figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">TIP:</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">你還可以使用 <a href=\"https://github.com/nvm-sh/nvm\">NVM</a>（Node Version Manager）這個版本管理工具來安裝 Node.js，它能讓你輕鬆切換不同版本的 Node.js。NVM 也有 <a href=\"https://github.com/coreybutler/nvm-windows\">Windows</a> 版本，你可以根據作業系統環境來進行安裝。</td>\n</tr>\n</tbody></table>\n<h3 id=\"安裝-Nest-CLI\"><a href=\"#安裝-Nest-CLI\" class=\"headerlink\" title=\"安裝 Nest CLI\"></a>安裝 Nest CLI</h3><p><strong>Nest</strong>（NestJS）是基於 Node.js 和 TypeScript 開發的框架，能幫助你打造高效、可靠且易於擴展的應用程式，它提供了多種實用功能，支援常用的伺服端技術。透過模組化的結構，你能更方便地管理和組織程式碼。</p>\n<figure>\n  <img src=\"./nestjs.png\" width=\"248\" alt=\"圖 3：NestJS\" align=\"center\">\n  <figcaption><em>圖 3：NestJS</em></figcaption>\n  <br><br>\n</figure>\n\n<p>Nest CLI 是由 NestJS 提供的命令列工具，能讓你輕鬆地建立、執行和管理 Nest 應用程式的各種操作。只要你已安裝好 Node.js，打開終端機並執行以下指令，即可安裝 Nest CLI：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ npm install -g @nestjs/cli<br></code></pre></td></tr></table></figure>\n\n<p>安裝完成後，你可以輸入以下指令，查看 Nest CLI 提供的指令及其使用方式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ nest -h<br></code></pre></td></tr></table></figure>\n\n<figure>\n  <img src=\"./nest-cli.png\" alt=\"圖 4：Nest CLI 指令列表\" align=\"center\">\n  <figcaption><em>圖 4：Nest CLI 指令列表</em></figcaption>\n  <br><br>\n</figure>\n\n<h3 id=\"取得-Fugle-API-金鑰\"><a href=\"#取得-Fugle-API-金鑰\" class=\"headerlink\" title=\"取得 Fugle API 金鑰\"></a>取得 Fugle API 金鑰</h3><p>在使用 Fugle API 之前，你必須註冊成為富果會員。請至富果網站完成會員註冊並且登入後 ，然後進行以下步驟。</p>\n<p><strong>STEP 1</strong>：前往富果帳戶開發者網站首頁（developer.fugle.tw），點選「文件」→「行情」。</p>\n<figure>\n  <img src=\"./fugle-api-1.png\" alt=\"圖 5\" align=\"center\">\n  <figcaption><em>圖 5</em></figcaption>\n  <br><br>\n</figure>\n\n<p><strong>STEP 2</strong>：跳轉頁面後，在右上方點選「金鑰申請」。</p>\n<figure>\n  <img src=\"./fugle-api-2.png\" alt=\"圖 6\" align=\"center\">\n  <figcaption><em>圖 6</em></figcaption>\n  <br><br>\n</figure>\n\n<p><strong>STEP 3</strong>：「金鑰申請及管理」頁面下，即可新增行情 API 金鑰。</p>\n<figure>\n  <img src=\"./fugle-api-3.png\" alt=\"圖 7\" align=\"center\">\n  <figcaption><em>圖 7</em></figcaption>\n  <br><br>\n</figure>\n\n<p>取得 API 金鑰之後，即可開始使用富果行情 API。不同的 API 方案下，有不同的存取限制，請參考官方網站的 <a href=\"https://developer.fugle.tw/docs/pricing\">說明</a>。</p>\n<h3 id=\"取得-LINE-Notify-存取權杖\"><a href=\"#取得-LINE-Notify-存取權杖\" class=\"headerlink\" title=\"取得 LINE Notify 存取權杖\"></a>取得 LINE Notify 存取權杖</h3><p>請確認你已經註冊並認證了你的 LINE 帳號。如果沒有，請先在你的行動裝置下載 LINE App 來完成註冊和認證。</p>\n<p><strong>STEP 1</strong>：前往 LINE Notify 首頁（notify-bot.line.me），登入你的 LINE 帳號後，點選「個人頁面」。</p>\n<figure>\n  <img src=\"./line-notify-1.png\" alt=\"圖 8\" align=\"center\">\n  <figcaption><em>圖 8</em></figcaption>\n  <br><br>\n</figure>\n\n<p><strong>STEP 2</strong>：跳轉頁面後，選擇「發行權杖」。</p>\n<figure>\n  <img src=\"./line-notify-2.png\" alt=\"圖 9\" align=\"center\">\n  <figcaption><em>圖 9</em></figcaption>\n  <br><br>\n</figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">NOTE:</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">LINE Notify 授權是基於 OAuth 2.0 的授權碼（Authorization Code）模式。這種授權機制能讓你的應用程式能夠安全地取得其他使用者的同意。如果你只需要將訊息透過 LINE Notify 推播給自己，則直接選擇「發行權杖」即可。</td>\n</tr>\n</tbody></table>\n<p><strong>STEP 3</strong>：接著會跳出一個表單視窗。請填寫權杖名稱，然後接收通知的聊天室請選擇「透過1對1聊天接收Line Notify的通知」，然後點選「發行」。</p>\n<figure>\n  <img src=\"./line-notify-3.png\" alt=\"圖 10\" align=\"center\">\n  <figcaption><em>圖 10</em></figcaption>\n  <br><br>\n</figure>\n\n<p><strong>STEP 4</strong>：LINE Notify 將產生你的個人存取權杖（Access Token）。因為這段代碼只會出現一次，請務必記住這組權杖代碼。</p>\n<figure>\n  <img src=\"./line-notify-4.png\" alt=\"圖 11\" align=\"center\">\n  <figcaption><em>圖 11</em></figcaption>\n  <br><br>\n</figure>\n\n<p><strong>STEP 5</strong>：完成後，在「連動的服務」清單裡，就會出現我們剛剛所設定的服務。</p>\n<figure>\n  <img src=\"./line-notify-5.png\" alt=\"圖 12\" align=\"center\">\n  <figcaption><em>圖 12</em></figcaption>\n  <br><br>\n</figure>\n\n<h2 id=\"設定應用程式\"><a href=\"#設定應用程式\" class=\"headerlink\" title=\"設定應用程式\"></a>設定應用程式</h2><h3 id=\"建立-Nest-應用程式\"><a href=\"#建立-Nest-應用程式\" class=\"headerlink\" title=\"建立 Nest 應用程式\"></a>建立 Nest 應用程式</h3><p>首先，請打開終端機，使用 Nest CLI 建立一個名為 <code>trading-signal-notifier</code> 的 Nest 應用程式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ nest new trading-signal-notifier<br></code></pre></td></tr></table></figure>\n\n<p>應用程式建立後，我們需要調整 Nest CLI 預設產生的內容。請將應用程式 <code>AppModule</code> 修改如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123; Module &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@nestjs/common&#x27;</span>;<br><br><span class=\"hljs-meta\">@Module</span>(&#123;&#125;)<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppModule</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">NOTE:</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">我們不會用上預設建立的 <code>AppController</code> 與 <code>AppService</code>，你可以移除相關檔案。</td>\n</tr>\n</tbody></table>\n<h3 id=\"安裝依賴模組\"><a href=\"#安裝依賴模組\" class=\"headerlink\" title=\"安裝依賴模組\"></a>安裝依賴模組</h3><p>請在終端機輸入以下指令安裝相關套件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ npm install --save @fugle/marketdata @fugle/marketdata-nest @nestjs/config @nestjs/schedule kdj luxon nest-line-notify numeral<br>$ npm install --save-dev @types/luxon @types/numeral<br></code></pre></td></tr></table></figure>\n\n<p>以下是各個套件的簡要說明： </p>\n<ul>\n<li><code>@fugle/marketdata</code>: 富果行情 API 客戶端函式庫。</li>\n<li><code>@fugle/marketdata-nest</code>: 提供在 NestJS 應用程式中整合 <code>@fugle/marketdata</code> 的模組。 </li>\n<li><code>@nestjs/config</code>: NestJS 的配置模組，可用於管理應用程式中的配置參數。 </li>\n<li><code>@nestjs/schedule</code>: NestJS 中的任務調度模組，允許你在應用程式中定義和管理定期執行的任務，例如排程任務、定時執行等。 </li>\n<li><code>nest-line-notify</code>: 在 NestJS 應用程式中整合 Line Notify 服務的套件，可用於發送 Line 通知。 </li>\n<li><code>kdj</code>: 用於計算 KDJ 指標。你也可以使用其他技術指標套件，例如 <code>technicalindicators</code> 或 <code>tulind</code>。</li>\n<li><code>luxon</code>: 用於處理和解析日期和時間的工具。 </li>\n<li><code>numeral</code>: 用於格式化數值型態資料。 </li>\n<li><code>@types/luxon</code>: 這是 <code>luxon</code> 的 TypeScript 類型定義檔。 </li>\n<li><code>@types/numeral</code>: 這是 <code>numeral</code> 的 TypeScript 類型定義檔。</li>\n</ul>\n<p>安裝完成後，請在 <code>AppModule</code> 中匯入相關模組：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123; Module &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@nestjs/common&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; ConfigModule &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@nestjs/config&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; ScheduleModule &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@nestjs/schedule&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; FugleMarketDataModule &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@fugle/marketdata-nest&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; LineNotifyModule &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;nest-line-notify&#x27;</span>;<br><br><span class=\"hljs-meta\">@Module</span>(&#123;<br>  imports: [<br>    ConfigModule.forRoot(),<br>    ScheduleModule.forRoot(),<br>    FugleMarketDataModule.forRoot(&#123;<br>      apiKey: process.env.FUGLE_MARKETDATA_API_KEY,<br>    &#125;),<br>    LineNotifyModule.forRoot(&#123;<br>      accessToken: process.env.LINE_NOTIFY_ACCESS_TOKEN,<br>    &#125;),<br>  ],<br>&#125;)<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppModule</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"設定環境變數\"><a href=\"#設定環境變數\" class=\"headerlink\" title=\"設定環境變數\"></a>設定環境變數</h3><p>請在專案目錄下建立 <code>.env</code> 檔案，新增以下內容：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\">FUGLE_MARKETDATA_API_KEY=<br>LINE_NOTIFY_ACCESS_TOKEN=<br></code></pre></td></tr></table></figure>\n\n<p>這裡解釋上述變數的意義與用途：</p>\n<ul>\n<li><code>FUGLE_MARKETDATA_API_KEY</code>：你的富果行情 API 金鑰。</li>\n<li><code>LINE_NOTIFY_ACCESS_TOKEN</code>：你的 LINE Notify 存取權杖。</li>\n</ul>\n<p>應用程式將透過環境變數來讀取富果行情 API 金鑰以及 LINE Notify 存取權杖。</p>\n<h2 id=\"實作通知服務\"><a href=\"#實作通知服務\" class=\"headerlink\" title=\"實作通知服務\"></a>實作通知服務</h2><p>完成應用程式的設定後，我們要實作應用程式的核心功能。首先，建立一個模組來實作 LINE Notifier 通知功能。請使用 Nest CLI 執行以下指令來建立 <code>NotifierModule</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ nest g module notifier<br></code></pre></td></tr></table></figure>\n\n<p>執行上述指令後，Nest CLI 會在專案的 <code>src</code> 目錄下新增一個名為 <code>notifier</code> 的資料夾，並在其中建立 <code>notifier.module.ts</code> 檔案。</p>\n<p>接下來，請在 <code>NotifierModule</code> 下新增 <code>NotifierService</code>，這是用於實現 LINE Notifier 通知的核心服務，你可以使用以下 Nest CLI 指令來完成這個步驟：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ nest g service notifier --no-spec<br></code></pre></td></tr></table></figure>\n\n<p>執行後，請開啟建立的檔案，並完成以下的實作。</p>\n<h3 id=\"匯入模組與依賴注入\"><a href=\"#匯入模組與依賴注入\" class=\"headerlink\" title=\"匯入模組與依賴注入\"></a>匯入模組與依賴注入</h3><p>請在 <code>NotifierService</code> 建構式中注入 <code>@fugle/marketdata</code> 提供的 <code>RestClient</code> 和 <code>nest-line-notify</code> 提供的 <code>LineNotify</code>。這樣我們就可以使用這兩個服務來獲取股票行情資料並且發送 LINE Notify 訊息。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> numeral <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;numeral&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> kdj <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;kdj&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; DateTime &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;luxon&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; Injectable, Logger &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@nestjs/common&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; Cron &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@nestjs/schedule&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; RestClient &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@fugle/marketdata&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; InjectRestClient &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@fugle/marketdata-nest&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; InjectLineNotify, LineNotify &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;nest-line-notify&#x27;</span>;<br><br><span class=\"hljs-meta\">@Injectable</span>()<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NotifierService</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> symbol = <span class=\"hljs-string\">&#x27;0050&#x27;</span>;   <span class=\"hljs-comment\">// 股票代號</span><br>  <span class=\"hljs-keyword\">private</span> candles: Record&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">any</span>&gt;;<br><br>  <span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span><br><span class=\"hljs-params\">    <span class=\"hljs-meta\">@InjectRestClient</span>() <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> client: RestClient,</span><br><span class=\"hljs-params\">    <span class=\"hljs-meta\">@InjectLineNotify</span>() <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> lineNotify: LineNotify,</span><br><span class=\"hljs-params\">  </span>) &#123; &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"初始化應用程式與-K-線數據\"><a href=\"#初始化應用程式與-K-線數據\" class=\"headerlink\" title=\"初始化應用程式與 K 線數據\"></a>初始化應用程式與 K 線數據</h3><p>然後，我們在應用啟動時調用 <code>onApplicationBootstrap()</code> 方法，該方法會執行 <code>initCandles()</code> 方法，用於初始化歷史 K 線數據。</p>\n<p>當 <code>initCandles()</code> 方法被呼叫時，使用富果行情 API 獲取指定股票代號的最近三個月的歷史 K 線數據，然後將其保存在 <code>this.candles</code> 屬性中。</p>\n<p>此外，<code>initCandles()</code> 使用 <code>@Cron()</code> 裝飾器設定為定時任務，這個方法將會在每日上午 <code>08:00</code> 時自動執行。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\">...<br><span class=\"hljs-meta\">@Injectable</span>()<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NotifierService</span> </span>&#123;<br>  ...<br>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">onApplicationBootstrap</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.initCandles();<br>  &#125;<br><br>  <span class=\"hljs-meta\">@Cron</span>(<span class=\"hljs-string\">&#x27;0 0 8 * * *&#x27;</span>)<br>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">initCandles</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> symbol = <span class=\"hljs-built_in\">this</span>.symbol;<br>    <span class=\"hljs-keyword\">const</span> to = DateTime.local().toISODate();<br>    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">from</span> = DateTime.local().minus(&#123; <span class=\"hljs-attr\">month</span>: <span class=\"hljs-number\">3</span> &#125;).toISODate();<br>    <span class=\"hljs-keyword\">const</span> candles = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.client.stock.historical.candles(&#123;<br>      symbol, <span class=\"hljs-keyword\">from</span>, to,<br>    &#125;);<br><br>    <span class=\"hljs-built_in\">this</span>.candles = candles.data.reverse().reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">candles, candle</span>) =&gt;</span> (&#123;<br>      ...candles,<br>      date: [...candles.date, candle.date],<br>      open: [...candles.open, candle.open],<br>      high: [...candles.high, candle.high],<br>      low: [...candles.low, candle.low],<br>      close: [...candles.close, candle.close],<br>      volume: [...candles.volume, candle.volume],<br>    &#125;), &#123; <span class=\"hljs-attr\">date</span>: [], <span class=\"hljs-attr\">open</span>: [], <span class=\"hljs-attr\">high</span>: [], <span class=\"hljs-attr\">low</span>: [], <span class=\"hljs-attr\">close</span>: [], <span class=\"hljs-attr\">volume</span>: [] &#125;);<br><br>    Logger.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;symbol&#125;</span> candles data initialized`</span>, NotifierService.name);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"定時取得即時報價\"><a href=\"#定時取得即時報價\" class=\"headerlink\" title=\"定時取得即時報價\"></a>定時取得即時報價</h3><p>下一步實作 <code>fetchQuote()</code> 方法使用富果行情 API 獲取即時報價，並檢查報價日期是否與當前日期相符。如果符合，表示當天為交易日，則更新歷史 K 線數據，計算 KDJ 指標，並根據條件發送 LINE Notify 通知。</p>\n<p>我們在 <code>fetchQuote()</code> 聲明 <code>@Cron()</code> 裝飾器設定為定時任務，這個方法將會在每日下午 <code>13:25</code> 時自動執行。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\">...<br><span class=\"hljs-meta\">@Injectable</span>()<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NotifierService</span> </span>&#123;<br>  ...<br>  <span class=\"hljs-meta\">@Cron</span>(<span class=\"hljs-string\">&#x27;00 25 13 * * *&#x27;</span>)<br>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">fetchQuote</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> symbol = <span class=\"hljs-built_in\">this</span>.symbol;<br>    <span class=\"hljs-keyword\">const</span> quote = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.client.stock.intraday.quote(&#123; symbol &#125;);<br>    <span class=\"hljs-keyword\">if</span> (quote.date !== DateTime.local().toISODate()) <span class=\"hljs-keyword\">return</span>;  <span class=\"hljs-comment\">// 確認當天是否為交易日</span><br><br>    <span class=\"hljs-keyword\">const</span> index = <span class=\"hljs-built_in\">this</span>.candles.date.indexOf(quote.date);<br>    <span class=\"hljs-keyword\">if</span> (index === -<span class=\"hljs-number\">1</span>) &#123;<br>      <span class=\"hljs-built_in\">this</span>.candles.date.push(quote.date);<br>      <span class=\"hljs-built_in\">this</span>.candles.open.push(quote.openPrice);<br>      <span class=\"hljs-built_in\">this</span>.candles.high.push(quote.highPrice);<br>      <span class=\"hljs-built_in\">this</span>.candles.low.push(quote.lowPrice);<br>      <span class=\"hljs-built_in\">this</span>.candles.close.push(quote.closePrice);<br>      <span class=\"hljs-built_in\">this</span>.candles.volume.push(quote.total?.tradeVolume * <span class=\"hljs-number\">1000</span>);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-built_in\">this</span>.candles.date[index] = quote.date;<br>      <span class=\"hljs-built_in\">this</span>.candles.open[index] = quote.openPrice;<br>      <span class=\"hljs-built_in\">this</span>.candles.high[index] = quote.highPrice;<br>      <span class=\"hljs-built_in\">this</span>.candles.low[index] = quote.lowPrice;<br>      <span class=\"hljs-built_in\">this</span>.candles.close[index] = quote.closePrice;<br>      <span class=\"hljs-built_in\">this</span>.candles.volume[index] = quote.total.tradeVolume * <span class=\"hljs-number\">1000</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">const</span> &#123; close, low, high &#125; = <span class=\"hljs-built_in\">this</span>.candles;<br>    <span class=\"hljs-keyword\">const</span> indicator = kdj(close, low, high);<br>    <span class=\"hljs-keyword\">const</span> k = indicator.K.slice(-<span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">const</span> d = indicator.D.slice(-<span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">const</span> j = indicator.J.slice(-<span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>];<br><br>    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.sendNotification(&#123;<br>      symbol: quote.symbol,<br>      name: quote.name,<br>      price: numeral(quote.closePrice).format(<span class=\"hljs-string\">&#x27;0.00&#x27;</span>),<br>      volume: numeral(quote.total.tradeVolume).format(<span class=\"hljs-string\">&#x27;0&#x27;</span>),<br>      change: numeral(quote.change).format(<span class=\"hljs-string\">&#x27;+0.00&#x27;</span>),<br>      changePercent: numeral(quote.changePercent).format(<span class=\"hljs-string\">&#x27;+0.00&#x27;</span>),<br>      time: DateTime.fromMillis(<span class=\"hljs-built_in\">Math</span>.floor(quote.lastUpdated / <span class=\"hljs-number\">1000</span>)).toFormat(<span class=\"hljs-string\">&#x27;yyyy/MM/dd HH:mm:ss&#x27;</span>),<br>      k: numeral(k).format(<span class=\"hljs-string\">&#x27;0.00&#x27;</span>),<br>      d: numeral(d).format(<span class=\"hljs-string\">&#x27;0.00&#x27;</span>),<br>      j: numeral(j).format(<span class=\"hljs-string\">&#x27;0.00&#x27;</span>),<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"發送-LINE-Notify-通知\"><a href=\"#發送-LINE-Notify-通知\" class=\"headerlink\" title=\"發送 LINE Notify 通知\"></a>發送 LINE Notify 通知</h3><p>最後，實作 <code>sendNotification()</code> 方法用於建構 LINE Notify 訊息內容並發送通知。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\">...<br><span class=\"hljs-meta\">@Injectable</span>()<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NotifierService</span> </span>&#123;<br>  ...<br>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">sendNotification</span>(<span class=\"hljs-params\">payload: Record&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">any</span>&gt;</span>)</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> &#123; symbol, name, price, change, changePercent, time, k, d, j &#125; = payload;<br><br>    <span class=\"hljs-keyword\">const</span> message = [<span class=\"hljs-string\">&#x27;&#x27;</span>].concat([<br>      <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;name&#125;</span> (<span class=\"hljs-subst\">$&#123;symbol&#125;</span>)`</span>,<br>      <span class=\"hljs-string\">`---`</span>,<br>      <span class=\"hljs-string\">`成交: <span class=\"hljs-subst\">$&#123;price&#125;</span>`</span>,<br>      <span class=\"hljs-string\">`漲跌: <span class=\"hljs-subst\">$&#123;change&#125;</span> (<span class=\"hljs-subst\">$&#123;changePercent&#125;</span>)`</span>,<br>      <span class=\"hljs-string\">`K: <span class=\"hljs-subst\">$&#123;k&#125;</span> D: <span class=\"hljs-subst\">$&#123;d&#125;</span> J: <span class=\"hljs-subst\">$&#123;j&#125;</span>`</span>,<br>      <span class=\"hljs-string\">`---`</span>,<br>      <span class=\"hljs-string\">`時間: <span class=\"hljs-subst\">$&#123;time&#125;</span>`</span>,<br>    ]).join(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>);<br><br>    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.lineNotify.send(&#123; message &#125;)<br>      .then(<span class=\"hljs-function\">() =&gt;</span> Logger.log(message, NotifierService.name))<br>      .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> Logger.error(err.message, err.stack, NotifierService.name));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"執行應用程式\"><a href=\"#執行應用程式\" class=\"headerlink\" title=\"執行應用程式\"></a>執行應用程式</h3><p>完成上述實作後，你可以使用以下指令來執行應用程式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ npm start<br></code></pre></td></tr></table></figure>\n\n<p>應用程式會執行後或每天的早上 8 點初始化歷史 K 線數據，並在下午 1 點 25 分每天更新即時報價，檢查 KDJ 指標是否符合條件，如果符合則發送 LINE Notify 通知（圖 13）。</p>\n<figure>\n  <img src=\"./notification.png\" width=\"480\" alt=\"圖 13：LINE Notify 訊息推播\" align=\"center\">\n  <figcaption><em>圖 13：LINE Notify 訊息推播</em></figcaption>\n  <br><br>\n</figure>\n\n<p>在這個範例中，我們使用 NestJS 透過 Fugle API 結合 LINE Notify 服務，實作出股票進出場訊號通知系統。你可以根據自己的交易策略，決定進出場訊號，打造屬於你的投資利器。</p>\n<h2 id=\"Bonus：容器化應用程式部署\"><a href=\"#Bonus：容器化應用程式部署\" class=\"headerlink\" title=\"Bonus：容器化應用程式部署\"></a>Bonus：容器化應用程式部署</h2><p>當應用程式完成後，接下來是考慮如何部署及上線。我們會將開發完成的程式 dockerize，將應用程式與執行環境打包成為映像檔，只要部署的環境支援 Docker，就可以執行我們的應用程式。</p>\n<h3 id=\"容器化技術與-Docker\"><a href=\"#容器化技術與-Docker\" class=\"headerlink\" title=\"容器化技術與 Docker\"></a>容器化技術與 Docker</h3><p>部署應用程式是一項複雜而重要的任務，需要考量環境一致性、依賴管理和擴展性等議題。為了解決這些挑戰，容器化技術應運而生，這種技術允許開發者將應用程式及其所有相關的依賴項目打包成一個獨立的單元，稱為容器。這些容器具有輕量、可攜性以及一致的環境，能確保在不同的平台保持相同的運作方式。</p>\n<figure style=\"text-align: center;\">\n  <img src=\"./docker.png\" width=\"320\" alt=\"圖 14：Docker\" align=\"center\">\n  <figcaption><em>圖 14：Docker</em></figcaption>\n  <br><br>\n</figure>\n\n<p><strong>Docker</strong> 是容器化技術的一個代表性實現，它提供了一個平台，你可以將應用程式與執行環境打包成<strong>映像檔</strong>（image），並以<strong>容器</strong>（container）方式執行。每個容器都是相互隔離的，具有自己的檔案系統、執行環境和資源，可以在任何支援 Docker 的環境中運行。</p>\n<h3 id=\"準備-Docker-環境\"><a href=\"#準備-Docker-環境\" class=\"headerlink\" title=\"準備 Docker 環境\"></a>準備 Docker 環境</h3><p>我們要將應用程式打包成為映像檔，請確認好已經安裝 Docker 環境。</p>\n<ul>\n<li><p><strong>Docker Engine</strong>：Docker 的安裝方式，可參考官方文件 <a href=\"https://docs.docker.com/engine/install/\">Install Docker Engine</a> 的說明。在開發環境下，可以選用 Docker Desktop 版本，支援 Linux、Mac (macOS)、Windows 作業系統環境。</p>\n</li>\n<li><p><strong>Docker Compose</strong>：<a href=\"https://docs.docker.com/compose/\">Docker Compose</a> 是用於定義多容器 Docker 應用程式的工具，透過 YAML 檔設定要運行的服務，並且使用 <code>docker-compose</code> 指令啟動配置檔中定義的服務。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">NOTE:</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">如果安裝的 Docker Engine 是 Desktop 版本，它已經內置了 Docker Compose；如果 Docker Engine 安裝的是 Server 版本，則需要另安裝 Docker Compose。Docker Compose 的安裝方式，可參考官方文件 <a href=\"https://docs.docker.com/compose/install/\">Install Docker Compose</a> 的說明。</td>\n</tr>\n</tbody></table>\n<h3 id=\"建構-Docker-映像檔\"><a href=\"#建構-Docker-映像檔\" class=\"headerlink\" title=\"建構 Docker 映像檔\"></a>建構 Docker 映像檔</h3><p><a href=\"https://docs.docker.com/engine/reference/builder/\">Dockerfile</a> 是 Docker 用來建構 Docker 映像檔的檔案，它包含了一系列的指令，告訴 Docker 如何從基礎映像檔開始，安裝所需的軟體和套件，複製程式碼和資源，設定執行環境和參數等。</p>\n<p>請在專案目錄下新增 <code>Dockerfile</code> 檔案，並且編寫以下的指令：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> node:<span class=\"hljs-number\">18</span>-alpine as builder<br><br><span class=\"hljs-keyword\">ENV</span> NODE_ENV build<br><br><span class=\"hljs-keyword\">USER</span> node<br><span class=\"hljs-keyword\">WORKDIR</span><span class=\"bash\"> /home/node</span><br><br><span class=\"hljs-keyword\">COPY</span><span class=\"bash\"> --chown=node:node . /home/node</span><br><br><span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> npm install \\</span><br><span class=\"bash\">    &amp;&amp; npm run build</span><br><br><span class=\"hljs-comment\"># ---</span><br><br><span class=\"hljs-keyword\">FROM</span> node:<span class=\"hljs-number\">18</span>-alpine<br><br><span class=\"hljs-keyword\">ENV</span> NODE_ENV production<br><span class=\"hljs-keyword\">ENV</span> TZ Asia/Taipei<br><br><span class=\"hljs-keyword\">USER</span> node<br><span class=\"hljs-keyword\">WORKDIR</span><span class=\"bash\"> /home/node</span><br><br><span class=\"hljs-keyword\">COPY</span><span class=\"bash\"> --from=builder /home/node/package.json /home/node/</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"bash\"> --from=builder /home/node/package-lock.json /home/node/</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"bash\"> --from=builder /home/node/dist/ /home/node/dist/</span><br><br><span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> npm install --production</span><br><br><span class=\"hljs-keyword\">CMD</span><span class=\"bash\"> [<span class=\"hljs-string\">&quot;node&quot;</span>, <span class=\"hljs-string\">&quot;dist/main.js&quot;</span>]</span><br></code></pre></td></tr></table></figure>\n\n<p>這些指令會告訴 Docker 從 <code>node:18-alpine</code> 這個基礎映像檔開始，設定環境變數、使用者和工作目錄，複製程式碼和資源，安裝套件和建置程式，然後從新的 <code>node:18-alpine</code> 映像檔開始，設定環境變數、使用者和工作目錄，複製套件和程式碼，安裝生產環境所需的套件，最後執行應用程式。</p>\n<p>建立 Dockerfile 後，可在專案根目錄使用以下 <code>docker</code> 指令建構映像檔：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ docker build -t trading-signal-notifier:latest .<br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">NOTE:</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">在 <code>docker build</code> 指令中，<code>-t</code> 選項可指定映像檔名稱和標籤。</td>\n</tr>\n</tbody></table>\n<h3 id=\"使用-Docker-Compose-執行容器化應用程式\"><a href=\"#使用-Docker-Compose-執行容器化應用程式\" class=\"headerlink\" title=\"使用 Docker Compose 執行容器化應用程式\"></a>使用 Docker Compose 執行容器化應用程式</h3><p>為了管理應用程式，你可以使用 <a href=\"https://docs.docker.com/compose/compose-file/\">Docker Compose</a> 配置容器服務。請在專案根目錄下新增 <code>docker-compose.yml</code> 檔案，並加入以下內容：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&quot;3&quot;</span><br><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">trading-signal-notifier:</span><br>    <span class=\"hljs-attr\">build:</span><br>      <span class=\"hljs-attr\">context:</span> <span class=\"hljs-string\">.</span><br>      <span class=\"hljs-attr\">dockerfile:</span> <span class=\"hljs-string\">./Dockerfile</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">trading-signal-notifier:latest</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">FUGLE_MARKETDATA_API_KEY=$&#123;FUGLE_MARKETDATA_API_KEY&#125;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">LINE_NOTIFY_ACCESS_TOKEN=$&#123;LINE_NOTIFY_ACCESS_TOKEN&#125;</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span><br></code></pre></td></tr></table></figure>\n\n<p>完成配置設定後，在包含 <code>docker-compose.yml</code> 檔案的目錄中，使用以下指令，以啟動配置文件中定義的容器：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ docker-compose up -d<br></code></pre></td></tr></table></figure>\n\n<p>這個指令會讓 Docker Compose 啟動所有容器，指定 <code>-d</code> 選項代表容器在背景執行。如果服務的映像檔不存在，Docker Compose 會先建構或下載映像檔。</p>\n<p>要停止運行的容器，可以使用以下指令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ docker-compose down<br></code></pre></td></tr></table></figure>\n\n<p>這個指令會讓 Docker Compose 停止服務，並刪除所有容器。</p>\n<p>以上我們說明了如何建構應用程式映像檔與啟動容器服務的流程，你可以根據自己的需求自行設計 CI/CD pipeline，將應用程式以 Docker 映像檔形式發布，然後就可以在各種部署環境中，啟動容器執行應用程式。</p>\n<p>欲查看完整的程式碼，請參考我們的 GitHub <a href=\"https://github.com/chunkai1312/trading-signal-notifier\">repo</a>。</p>\n<h2 id=\"工商時間\"><a href=\"#工商時間\" class=\"headerlink\" title=\"工商時間\"></a>工商時間</h2><p>筆者著作《Node.js 量化投資全攻略：從資料收集到自動化交易系統建構實戰》已出版，這本書將是市面上第一本以 Node.js 為例的量化投資專書，並使用 NestJS 和 JS 生態圈工具來打造屬於自己的投資利器！本書的內容專為台灣股市特有的環境量身而寫，提供了豐富內容與實用範例，歡迎參考選購，開始你的量化投資之旅！</p>\n<p><strong>購書連結：</strong><br><a href=\"https://www.tenlong.com.tw/products/9786263336070\">天瓏網路書店</a> | <a href=\"https://www.books.com.tw/products/0010970613\">博客來網路書店</a> | <a href=\"https://www.eslite.com/product/10012011762682463156005\">誠品書店</a> | <a href=\"https://shopee.tw/product/728783014/22357449944/\">蝦皮購物</a> | <a href=\"https://www.momoshop.com.tw/goods/GoodsDetail.jsp?i_code=11954040\">momo購物網</a></p>\n<p><img src=\"./MP22331_banner_1800-410.jpg\"></p>\n","more":"<p>打造一個量身定制的行情監控系統，不僅能節省大量盯盤的時間，還能根據你的投資風格和目標，設定警示和提醒，更精準地捕捉符合策略的市場事件。這個系統能追蹤行情變化，即時地向你發送通知，讓你專注於更深入的投資研究，進而制定相應的交易策略。</p>\n<p>許多投資者選擇運用技術指標來決定進出場時機，在坊間流行一種以 <strong>KD 指標</strong> 來操作 <strong>元大台灣50</strong>（0050） 的交易策略。KD（KDJ）是一種擺盪指標，它是由隨機指標（Stochastic Oscillator）演變而來，由三個線構成：K 線（快速隨機線）、D 線（慢速隨機線）和 J 線。KD 指標的主要功能在於判斷市場的超買和超賣狀態，並提供進出場的參考。例如：</p>\n<ul>\n<li>當 K 值大於 80 時，表示市場處於超買狀態，投資者可以考慮賣出。</li>\n<li>當 K 值小於 20 時，表示市場處於超賣狀態，投資者可以考慮買進。</li>\n</ul>\n<p>本篇文章將以 NestJS 運用 Fugle API 及 LINE Notify 來打造股票進出場訊號通知系統，並以 <strong>元大台灣50</strong> 為例，使用 KD 指標作為進出場的參考，並在每個交易日的 <code>13:25</code> 時發送通知。這個時間點可供投資者運用收盤前 5 分鐘進行試撮期間，以便在考慮是否進行交易。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">WARNING:</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">本篇文章僅作為範例說明，而非投資建議。</td>\n</tr>\n</tbody></table>\n<h2 id=\"目錄\"><a href=\"#目錄\" class=\"headerlink\" title=\"目錄\"></a>目錄</h2><ul>\n<li><a href=\"#%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99\">事前準備</a><ul>\n<li><a href=\"#%E5%AE%89%E8%A3%9D-nodejs\">安裝 Node.js</a></li>\n<li><a href=\"#%E5%AE%89%E8%A3%9D-nest-cli\">安裝 Nest CLI</a></li>\n<li><a href=\"#%E5%8F%96%E5%BE%97-fugle-api-%E9%87%91%E9%91%B0\">取得 Fugle API 金鑰</a></li>\n<li><a href=\"#%E5%8F%96%E5%BE%97-line-notify-%E5%AD%98%E5%8F%96%E6%AC%8A%E6%9D%96\">取得 LINE Notify 存取權杖</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%A8%AD%E5%AE%9A%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F\">設定應用程式</a><ul>\n<li><a href=\"#%E5%BB%BA%E7%AB%8B-nest-%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F\">建立 Nest 應用程式</a></li>\n<li><a href=\"#%E5%AE%89%E8%A3%9D%E4%BE%9D%E8%B3%B4%E6%A8%A1%E7%B5%84\">安裝依賴模組</a></li>\n<li><a href=\"#%E8%A8%AD%E5%AE%9A%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8\">設定環境變數</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%AF%A6%E4%BD%9C%E9%80%9A%E7%9F%A5%E6%9C%8D%E5%8B%99\">實作通知服務</a><ul>\n<li><a href=\"#%E5%8C%AF%E5%85%A5%E6%A8%A1%E7%B5%84%E8%88%87%E4%BE%9D%E8%B3%B4%E6%B3%A8%E5%85%A5\">匯入模組與依賴注入</a></li>\n<li><a href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E8%88%87-k-%E7%B7%9A%E6%95%B8%E6%93%9A\">初始化應用程式與 K 線數據</a></li>\n<li><a href=\"#%E5%AE%9A%E6%99%82%E5%8F%96%E5%BE%97%E5%8D%B3%E6%99%82%E5%A0%B1%E5%83%B9\">定時取得即時報價</a></li>\n<li><a href=\"#%E7%99%BC%E9%80%81-line-notify-%E9%80%9A%E7%9F%A5\">發送 LINE Notify 通知</a></li>\n<li><a href=\"#%E5%9F%B7%E8%A1%8C%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F\">執行應用程式</a></li>\n</ul>\n</li>\n<li><a href=\"#bonus%E5%AE%B9%E5%99%A8%E5%8C%96%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E9%83%A8%E7%BD%B2\">Bonus：容器化應用程式部署</a><ul>\n<li><a href=\"#%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E8%A1%93%E8%88%87-docker\">容器化技術與 Docker</a></li>\n<li><a href=\"#%E6%BA%96%E5%82%99-docker-%E7%92%B0%E5%A2%83\">準備 Docker 環境</a></li>\n<li><a href=\"#%E5%BB%BA%E6%A7%8B-docker-%E6%98%A0%E5%83%8F%E6%AA%94\">建構 Docker 映像檔</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8-docker-compose-%E5%9F%B7%E8%A1%8C%E5%AE%B9%E5%99%A8%E5%8C%96%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F\">使用 Docker Compose 執行容器化應用程式</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"事前準備\"><a href=\"#事前準備\" class=\"headerlink\" title=\"事前準備\"></a>事前準備</h2><p>在開始實作前，請先準備好你的開發環境，正如俗話說：「工欲善其事，必先利其器。」</p>\n<p>安裝開發環境時，請留意不同作業系統和版本之間的差異，為確保安裝工具能順利運作，請先確認你的本機執行環境，詳細閱讀官方文件和教學後，再進行安裝及相關設定。</p>\n<h3 id=\"安裝-Node-js\"><a href=\"#安裝-Node-js\" class=\"headerlink\" title=\"安裝 Node.js\"></a>安裝 Node.js</h3><p><strong>Node.js</strong> 是基於 Chrome V8 JavaScript 引擎的開放原始碼、跨平台、可用於伺服器端應用程式的執行環境，它提供事件驅動、非阻塞的I/O 模型，讓你能有效率地建立可擴展的網路應用程式。</p>\n<figure>\n  <img src=\"./nodejs.png\" width=\"320\" alt=\"圖 1：Node.js\" align=\"center\">\n  <figcaption><em>圖 1：Node.js</em></figcaption>\n  <br><br>\n</figure>\n\n<p>首先，你需要安裝 Node.js 環境，請前往 Node.js <a href=\"https://nodejs.org/\">官方網站</a> 下載適合你作業系統的安裝檔，通常建議選擇 LTS（Long Term Support）版本，這是官方提供長期支援的穩定版本。當然，如果你想體驗 Node.js 最新功能，也可以選擇下載最新版。</p>\n<figure>\n  <img src=\"./nodejs-official-site.png\" alt=\"圖 2：Node.js 官方網站\" align=\"center\">\n  <figcaption><em>圖 2：Node.js 官方網站</em></figcaption>\n  <br><br>\n</figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">TIP:</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">你還可以使用 <a href=\"https://github.com/nvm-sh/nvm\">NVM</a>（Node Version Manager）這個版本管理工具來安裝 Node.js，它能讓你輕鬆切換不同版本的 Node.js。NVM 也有 <a href=\"https://github.com/coreybutler/nvm-windows\">Windows</a> 版本，你可以根據作業系統環境來進行安裝。</td>\n</tr>\n</tbody></table>\n<h3 id=\"安裝-Nest-CLI\"><a href=\"#安裝-Nest-CLI\" class=\"headerlink\" title=\"安裝 Nest CLI\"></a>安裝 Nest CLI</h3><p><strong>Nest</strong>（NestJS）是基於 Node.js 和 TypeScript 開發的框架，能幫助你打造高效、可靠且易於擴展的應用程式，它提供了多種實用功能，支援常用的伺服端技術。透過模組化的結構，你能更方便地管理和組織程式碼。</p>\n<figure>\n  <img src=\"./nestjs.png\" width=\"248\" alt=\"圖 3：NestJS\" align=\"center\">\n  <figcaption><em>圖 3：NestJS</em></figcaption>\n  <br><br>\n</figure>\n\n<p>Nest CLI 是由 NestJS 提供的命令列工具，能讓你輕鬆地建立、執行和管理 Nest 應用程式的各種操作。只要你已安裝好 Node.js，打開終端機並執行以下指令，即可安裝 Nest CLI：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ npm install -g @nestjs/cli<br></code></pre></td></tr></table></figure>\n\n<p>安裝完成後，你可以輸入以下指令，查看 Nest CLI 提供的指令及其使用方式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ nest -h<br></code></pre></td></tr></table></figure>\n\n<figure>\n  <img src=\"./nest-cli.png\" alt=\"圖 4：Nest CLI 指令列表\" align=\"center\">\n  <figcaption><em>圖 4：Nest CLI 指令列表</em></figcaption>\n  <br><br>\n</figure>\n\n<h3 id=\"取得-Fugle-API-金鑰\"><a href=\"#取得-Fugle-API-金鑰\" class=\"headerlink\" title=\"取得 Fugle API 金鑰\"></a>取得 Fugle API 金鑰</h3><p>在使用 Fugle API 之前，你必須註冊成為富果會員。請至富果網站完成會員註冊並且登入後 ，然後進行以下步驟。</p>\n<p><strong>STEP 1</strong>：前往富果帳戶開發者網站首頁（developer.fugle.tw），點選「文件」→「行情」。</p>\n<figure>\n  <img src=\"./fugle-api-1.png\" alt=\"圖 5\" align=\"center\">\n  <figcaption><em>圖 5</em></figcaption>\n  <br><br>\n</figure>\n\n<p><strong>STEP 2</strong>：跳轉頁面後，在右上方點選「金鑰申請」。</p>\n<figure>\n  <img src=\"./fugle-api-2.png\" alt=\"圖 6\" align=\"center\">\n  <figcaption><em>圖 6</em></figcaption>\n  <br><br>\n</figure>\n\n<p><strong>STEP 3</strong>：「金鑰申請及管理」頁面下，即可新增行情 API 金鑰。</p>\n<figure>\n  <img src=\"./fugle-api-3.png\" alt=\"圖 7\" align=\"center\">\n  <figcaption><em>圖 7</em></figcaption>\n  <br><br>\n</figure>\n\n<p>取得 API 金鑰之後，即可開始使用富果行情 API。不同的 API 方案下，有不同的存取限制，請參考官方網站的 <a href=\"https://developer.fugle.tw/docs/pricing\">說明</a>。</p>\n<h3 id=\"取得-LINE-Notify-存取權杖\"><a href=\"#取得-LINE-Notify-存取權杖\" class=\"headerlink\" title=\"取得 LINE Notify 存取權杖\"></a>取得 LINE Notify 存取權杖</h3><p>請確認你已經註冊並認證了你的 LINE 帳號。如果沒有，請先在你的行動裝置下載 LINE App 來完成註冊和認證。</p>\n<p><strong>STEP 1</strong>：前往 LINE Notify 首頁（notify-bot.line.me），登入你的 LINE 帳號後，點選「個人頁面」。</p>\n<figure>\n  <img src=\"./line-notify-1.png\" alt=\"圖 8\" align=\"center\">\n  <figcaption><em>圖 8</em></figcaption>\n  <br><br>\n</figure>\n\n<p><strong>STEP 2</strong>：跳轉頁面後，選擇「發行權杖」。</p>\n<figure>\n  <img src=\"./line-notify-2.png\" alt=\"圖 9\" align=\"center\">\n  <figcaption><em>圖 9</em></figcaption>\n  <br><br>\n</figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">NOTE:</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">LINE Notify 授權是基於 OAuth 2.0 的授權碼（Authorization Code）模式。這種授權機制能讓你的應用程式能夠安全地取得其他使用者的同意。如果你只需要將訊息透過 LINE Notify 推播給自己，則直接選擇「發行權杖」即可。</td>\n</tr>\n</tbody></table>\n<p><strong>STEP 3</strong>：接著會跳出一個表單視窗。請填寫權杖名稱，然後接收通知的聊天室請選擇「透過1對1聊天接收Line Notify的通知」，然後點選「發行」。</p>\n<figure>\n  <img src=\"./line-notify-3.png\" alt=\"圖 10\" align=\"center\">\n  <figcaption><em>圖 10</em></figcaption>\n  <br><br>\n</figure>\n\n<p><strong>STEP 4</strong>：LINE Notify 將產生你的個人存取權杖（Access Token）。因為這段代碼只會出現一次，請務必記住這組權杖代碼。</p>\n<figure>\n  <img src=\"./line-notify-4.png\" alt=\"圖 11\" align=\"center\">\n  <figcaption><em>圖 11</em></figcaption>\n  <br><br>\n</figure>\n\n<p><strong>STEP 5</strong>：完成後，在「連動的服務」清單裡，就會出現我們剛剛所設定的服務。</p>\n<figure>\n  <img src=\"./line-notify-5.png\" alt=\"圖 12\" align=\"center\">\n  <figcaption><em>圖 12</em></figcaption>\n  <br><br>\n</figure>\n\n<h2 id=\"設定應用程式\"><a href=\"#設定應用程式\" class=\"headerlink\" title=\"設定應用程式\"></a>設定應用程式</h2><h3 id=\"建立-Nest-應用程式\"><a href=\"#建立-Nest-應用程式\" class=\"headerlink\" title=\"建立 Nest 應用程式\"></a>建立 Nest 應用程式</h3><p>首先，請打開終端機，使用 Nest CLI 建立一個名為 <code>trading-signal-notifier</code> 的 Nest 應用程式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ nest new trading-signal-notifier<br></code></pre></td></tr></table></figure>\n\n<p>應用程式建立後，我們需要調整 Nest CLI 預設產生的內容。請將應用程式 <code>AppModule</code> 修改如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123; Module &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@nestjs/common&#x27;</span>;<br><br><span class=\"hljs-meta\">@Module</span>(&#123;&#125;)<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppModule</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">NOTE:</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">我們不會用上預設建立的 <code>AppController</code> 與 <code>AppService</code>，你可以移除相關檔案。</td>\n</tr>\n</tbody></table>\n<h3 id=\"安裝依賴模組\"><a href=\"#安裝依賴模組\" class=\"headerlink\" title=\"安裝依賴模組\"></a>安裝依賴模組</h3><p>請在終端機輸入以下指令安裝相關套件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ npm install --save @fugle/marketdata @fugle/marketdata-nest @nestjs/config @nestjs/schedule kdj luxon nest-line-notify numeral<br>$ npm install --save-dev @types/luxon @types/numeral<br></code></pre></td></tr></table></figure>\n\n<p>以下是各個套件的簡要說明： </p>\n<ul>\n<li><code>@fugle/marketdata</code>: 富果行情 API 客戶端函式庫。</li>\n<li><code>@fugle/marketdata-nest</code>: 提供在 NestJS 應用程式中整合 <code>@fugle/marketdata</code> 的模組。 </li>\n<li><code>@nestjs/config</code>: NestJS 的配置模組，可用於管理應用程式中的配置參數。 </li>\n<li><code>@nestjs/schedule</code>: NestJS 中的任務調度模組，允許你在應用程式中定義和管理定期執行的任務，例如排程任務、定時執行等。 </li>\n<li><code>nest-line-notify</code>: 在 NestJS 應用程式中整合 Line Notify 服務的套件，可用於發送 Line 通知。 </li>\n<li><code>kdj</code>: 用於計算 KDJ 指標。你也可以使用其他技術指標套件，例如 <code>technicalindicators</code> 或 <code>tulind</code>。</li>\n<li><code>luxon</code>: 用於處理和解析日期和時間的工具。 </li>\n<li><code>numeral</code>: 用於格式化數值型態資料。 </li>\n<li><code>@types/luxon</code>: 這是 <code>luxon</code> 的 TypeScript 類型定義檔。 </li>\n<li><code>@types/numeral</code>: 這是 <code>numeral</code> 的 TypeScript 類型定義檔。</li>\n</ul>\n<p>安裝完成後，請在 <code>AppModule</code> 中匯入相關模組：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123; Module &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@nestjs/common&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; ConfigModule &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@nestjs/config&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; ScheduleModule &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@nestjs/schedule&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; FugleMarketDataModule &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@fugle/marketdata-nest&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; LineNotifyModule &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;nest-line-notify&#x27;</span>;<br><br><span class=\"hljs-meta\">@Module</span>(&#123;<br>  imports: [<br>    ConfigModule.forRoot(),<br>    ScheduleModule.forRoot(),<br>    FugleMarketDataModule.forRoot(&#123;<br>      apiKey: process.env.FUGLE_MARKETDATA_API_KEY,<br>    &#125;),<br>    LineNotifyModule.forRoot(&#123;<br>      accessToken: process.env.LINE_NOTIFY_ACCESS_TOKEN,<br>    &#125;),<br>  ],<br>&#125;)<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppModule</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"設定環境變數\"><a href=\"#設定環境變數\" class=\"headerlink\" title=\"設定環境變數\"></a>設定環境變數</h3><p>請在專案目錄下建立 <code>.env</code> 檔案，新增以下內容：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\">FUGLE_MARKETDATA_API_KEY=<br>LINE_NOTIFY_ACCESS_TOKEN=<br></code></pre></td></tr></table></figure>\n\n<p>這裡解釋上述變數的意義與用途：</p>\n<ul>\n<li><code>FUGLE_MARKETDATA_API_KEY</code>：你的富果行情 API 金鑰。</li>\n<li><code>LINE_NOTIFY_ACCESS_TOKEN</code>：你的 LINE Notify 存取權杖。</li>\n</ul>\n<p>應用程式將透過環境變數來讀取富果行情 API 金鑰以及 LINE Notify 存取權杖。</p>\n<h2 id=\"實作通知服務\"><a href=\"#實作通知服務\" class=\"headerlink\" title=\"實作通知服務\"></a>實作通知服務</h2><p>完成應用程式的設定後，我們要實作應用程式的核心功能。首先，建立一個模組來實作 LINE Notifier 通知功能。請使用 Nest CLI 執行以下指令來建立 <code>NotifierModule</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ nest g module notifier<br></code></pre></td></tr></table></figure>\n\n<p>執行上述指令後，Nest CLI 會在專案的 <code>src</code> 目錄下新增一個名為 <code>notifier</code> 的資料夾，並在其中建立 <code>notifier.module.ts</code> 檔案。</p>\n<p>接下來，請在 <code>NotifierModule</code> 下新增 <code>NotifierService</code>，這是用於實現 LINE Notifier 通知的核心服務，你可以使用以下 Nest CLI 指令來完成這個步驟：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ nest g service notifier --no-spec<br></code></pre></td></tr></table></figure>\n\n<p>執行後，請開啟建立的檔案，並完成以下的實作。</p>\n<h3 id=\"匯入模組與依賴注入\"><a href=\"#匯入模組與依賴注入\" class=\"headerlink\" title=\"匯入模組與依賴注入\"></a>匯入模組與依賴注入</h3><p>請在 <code>NotifierService</code> 建構式中注入 <code>@fugle/marketdata</code> 提供的 <code>RestClient</code> 和 <code>nest-line-notify</code> 提供的 <code>LineNotify</code>。這樣我們就可以使用這兩個服務來獲取股票行情資料並且發送 LINE Notify 訊息。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> numeral <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;numeral&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> kdj <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;kdj&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; DateTime &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;luxon&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; Injectable, Logger &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@nestjs/common&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; Cron &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@nestjs/schedule&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; RestClient &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@fugle/marketdata&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; InjectRestClient &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@fugle/marketdata-nest&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; InjectLineNotify, LineNotify &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;nest-line-notify&#x27;</span>;<br><br><span class=\"hljs-meta\">@Injectable</span>()<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NotifierService</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> symbol = <span class=\"hljs-string\">&#x27;0050&#x27;</span>;   <span class=\"hljs-comment\">// 股票代號</span><br>  <span class=\"hljs-keyword\">private</span> candles: Record&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">any</span>&gt;;<br><br>  <span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span><br><span class=\"hljs-params\">    <span class=\"hljs-meta\">@InjectRestClient</span>() <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> client: RestClient,</span><br><span class=\"hljs-params\">    <span class=\"hljs-meta\">@InjectLineNotify</span>() <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> lineNotify: LineNotify,</span><br><span class=\"hljs-params\">  </span>) &#123; &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"初始化應用程式與-K-線數據\"><a href=\"#初始化應用程式與-K-線數據\" class=\"headerlink\" title=\"初始化應用程式與 K 線數據\"></a>初始化應用程式與 K 線數據</h3><p>然後，我們在應用啟動時調用 <code>onApplicationBootstrap()</code> 方法，該方法會執行 <code>initCandles()</code> 方法，用於初始化歷史 K 線數據。</p>\n<p>當 <code>initCandles()</code> 方法被呼叫時，使用富果行情 API 獲取指定股票代號的最近三個月的歷史 K 線數據，然後將其保存在 <code>this.candles</code> 屬性中。</p>\n<p>此外，<code>initCandles()</code> 使用 <code>@Cron()</code> 裝飾器設定為定時任務，這個方法將會在每日上午 <code>08:00</code> 時自動執行。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\">...<br><span class=\"hljs-meta\">@Injectable</span>()<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NotifierService</span> </span>&#123;<br>  ...<br>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">onApplicationBootstrap</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.initCandles();<br>  &#125;<br><br>  <span class=\"hljs-meta\">@Cron</span>(<span class=\"hljs-string\">&#x27;0 0 8 * * *&#x27;</span>)<br>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">initCandles</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> symbol = <span class=\"hljs-built_in\">this</span>.symbol;<br>    <span class=\"hljs-keyword\">const</span> to = DateTime.local().toISODate();<br>    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">from</span> = DateTime.local().minus(&#123; <span class=\"hljs-attr\">month</span>: <span class=\"hljs-number\">3</span> &#125;).toISODate();<br>    <span class=\"hljs-keyword\">const</span> candles = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.client.stock.historical.candles(&#123;<br>      symbol, <span class=\"hljs-keyword\">from</span>, to,<br>    &#125;);<br><br>    <span class=\"hljs-built_in\">this</span>.candles = candles.data.reverse().reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">candles, candle</span>) =&gt;</span> (&#123;<br>      ...candles,<br>      date: [...candles.date, candle.date],<br>      open: [...candles.open, candle.open],<br>      high: [...candles.high, candle.high],<br>      low: [...candles.low, candle.low],<br>      close: [...candles.close, candle.close],<br>      volume: [...candles.volume, candle.volume],<br>    &#125;), &#123; <span class=\"hljs-attr\">date</span>: [], <span class=\"hljs-attr\">open</span>: [], <span class=\"hljs-attr\">high</span>: [], <span class=\"hljs-attr\">low</span>: [], <span class=\"hljs-attr\">close</span>: [], <span class=\"hljs-attr\">volume</span>: [] &#125;);<br><br>    Logger.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;symbol&#125;</span> candles data initialized`</span>, NotifierService.name);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"定時取得即時報價\"><a href=\"#定時取得即時報價\" class=\"headerlink\" title=\"定時取得即時報價\"></a>定時取得即時報價</h3><p>下一步實作 <code>fetchQuote()</code> 方法使用富果行情 API 獲取即時報價，並檢查報價日期是否與當前日期相符。如果符合，表示當天為交易日，則更新歷史 K 線數據，計算 KDJ 指標，並根據條件發送 LINE Notify 通知。</p>\n<p>我們在 <code>fetchQuote()</code> 聲明 <code>@Cron()</code> 裝飾器設定為定時任務，這個方法將會在每日下午 <code>13:25</code> 時自動執行。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\">...<br><span class=\"hljs-meta\">@Injectable</span>()<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NotifierService</span> </span>&#123;<br>  ...<br>  <span class=\"hljs-meta\">@Cron</span>(<span class=\"hljs-string\">&#x27;00 25 13 * * *&#x27;</span>)<br>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">fetchQuote</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> symbol = <span class=\"hljs-built_in\">this</span>.symbol;<br>    <span class=\"hljs-keyword\">const</span> quote = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.client.stock.intraday.quote(&#123; symbol &#125;);<br>    <span class=\"hljs-keyword\">if</span> (quote.date !== DateTime.local().toISODate()) <span class=\"hljs-keyword\">return</span>;  <span class=\"hljs-comment\">// 確認當天是否為交易日</span><br><br>    <span class=\"hljs-keyword\">const</span> index = <span class=\"hljs-built_in\">this</span>.candles.date.indexOf(quote.date);<br>    <span class=\"hljs-keyword\">if</span> (index === -<span class=\"hljs-number\">1</span>) &#123;<br>      <span class=\"hljs-built_in\">this</span>.candles.date.push(quote.date);<br>      <span class=\"hljs-built_in\">this</span>.candles.open.push(quote.openPrice);<br>      <span class=\"hljs-built_in\">this</span>.candles.high.push(quote.highPrice);<br>      <span class=\"hljs-built_in\">this</span>.candles.low.push(quote.lowPrice);<br>      <span class=\"hljs-built_in\">this</span>.candles.close.push(quote.closePrice);<br>      <span class=\"hljs-built_in\">this</span>.candles.volume.push(quote.total?.tradeVolume * <span class=\"hljs-number\">1000</span>);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-built_in\">this</span>.candles.date[index] = quote.date;<br>      <span class=\"hljs-built_in\">this</span>.candles.open[index] = quote.openPrice;<br>      <span class=\"hljs-built_in\">this</span>.candles.high[index] = quote.highPrice;<br>      <span class=\"hljs-built_in\">this</span>.candles.low[index] = quote.lowPrice;<br>      <span class=\"hljs-built_in\">this</span>.candles.close[index] = quote.closePrice;<br>      <span class=\"hljs-built_in\">this</span>.candles.volume[index] = quote.total.tradeVolume * <span class=\"hljs-number\">1000</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">const</span> &#123; close, low, high &#125; = <span class=\"hljs-built_in\">this</span>.candles;<br>    <span class=\"hljs-keyword\">const</span> indicator = kdj(close, low, high);<br>    <span class=\"hljs-keyword\">const</span> k = indicator.K.slice(-<span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">const</span> d = indicator.D.slice(-<span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">const</span> j = indicator.J.slice(-<span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>];<br><br>    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.sendNotification(&#123;<br>      symbol: quote.symbol,<br>      name: quote.name,<br>      price: numeral(quote.closePrice).format(<span class=\"hljs-string\">&#x27;0.00&#x27;</span>),<br>      volume: numeral(quote.total.tradeVolume).format(<span class=\"hljs-string\">&#x27;0&#x27;</span>),<br>      change: numeral(quote.change).format(<span class=\"hljs-string\">&#x27;+0.00&#x27;</span>),<br>      changePercent: numeral(quote.changePercent).format(<span class=\"hljs-string\">&#x27;+0.00&#x27;</span>),<br>      time: DateTime.fromMillis(<span class=\"hljs-built_in\">Math</span>.floor(quote.lastUpdated / <span class=\"hljs-number\">1000</span>)).toFormat(<span class=\"hljs-string\">&#x27;yyyy/MM/dd HH:mm:ss&#x27;</span>),<br>      k: numeral(k).format(<span class=\"hljs-string\">&#x27;0.00&#x27;</span>),<br>      d: numeral(d).format(<span class=\"hljs-string\">&#x27;0.00&#x27;</span>),<br>      j: numeral(j).format(<span class=\"hljs-string\">&#x27;0.00&#x27;</span>),<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"發送-LINE-Notify-通知\"><a href=\"#發送-LINE-Notify-通知\" class=\"headerlink\" title=\"發送 LINE Notify 通知\"></a>發送 LINE Notify 通知</h3><p>最後，實作 <code>sendNotification()</code> 方法用於建構 LINE Notify 訊息內容並發送通知。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\">...<br><span class=\"hljs-meta\">@Injectable</span>()<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NotifierService</span> </span>&#123;<br>  ...<br>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">sendNotification</span>(<span class=\"hljs-params\">payload: Record&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">any</span>&gt;</span>)</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> &#123; symbol, name, price, change, changePercent, time, k, d, j &#125; = payload;<br><br>    <span class=\"hljs-keyword\">const</span> message = [<span class=\"hljs-string\">&#x27;&#x27;</span>].concat([<br>      <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;name&#125;</span> (<span class=\"hljs-subst\">$&#123;symbol&#125;</span>)`</span>,<br>      <span class=\"hljs-string\">`---`</span>,<br>      <span class=\"hljs-string\">`成交: <span class=\"hljs-subst\">$&#123;price&#125;</span>`</span>,<br>      <span class=\"hljs-string\">`漲跌: <span class=\"hljs-subst\">$&#123;change&#125;</span> (<span class=\"hljs-subst\">$&#123;changePercent&#125;</span>)`</span>,<br>      <span class=\"hljs-string\">`K: <span class=\"hljs-subst\">$&#123;k&#125;</span> D: <span class=\"hljs-subst\">$&#123;d&#125;</span> J: <span class=\"hljs-subst\">$&#123;j&#125;</span>`</span>,<br>      <span class=\"hljs-string\">`---`</span>,<br>      <span class=\"hljs-string\">`時間: <span class=\"hljs-subst\">$&#123;time&#125;</span>`</span>,<br>    ]).join(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>);<br><br>    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.lineNotify.send(&#123; message &#125;)<br>      .then(<span class=\"hljs-function\">() =&gt;</span> Logger.log(message, NotifierService.name))<br>      .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> Logger.error(err.message, err.stack, NotifierService.name));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"執行應用程式\"><a href=\"#執行應用程式\" class=\"headerlink\" title=\"執行應用程式\"></a>執行應用程式</h3><p>完成上述實作後，你可以使用以下指令來執行應用程式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ npm start<br></code></pre></td></tr></table></figure>\n\n<p>應用程式會執行後或每天的早上 8 點初始化歷史 K 線數據，並在下午 1 點 25 分每天更新即時報價，檢查 KDJ 指標是否符合條件，如果符合則發送 LINE Notify 通知（圖 13）。</p>\n<figure>\n  <img src=\"./notification.png\" width=\"480\" alt=\"圖 13：LINE Notify 訊息推播\" align=\"center\">\n  <figcaption><em>圖 13：LINE Notify 訊息推播</em></figcaption>\n  <br><br>\n</figure>\n\n<p>在這個範例中，我們使用 NestJS 透過 Fugle API 結合 LINE Notify 服務，實作出股票進出場訊號通知系統。你可以根據自己的交易策略，決定進出場訊號，打造屬於你的投資利器。</p>\n<h2 id=\"Bonus：容器化應用程式部署\"><a href=\"#Bonus：容器化應用程式部署\" class=\"headerlink\" title=\"Bonus：容器化應用程式部署\"></a>Bonus：容器化應用程式部署</h2><p>當應用程式完成後，接下來是考慮如何部署及上線。我們會將開發完成的程式 dockerize，將應用程式與執行環境打包成為映像檔，只要部署的環境支援 Docker，就可以執行我們的應用程式。</p>\n<h3 id=\"容器化技術與-Docker\"><a href=\"#容器化技術與-Docker\" class=\"headerlink\" title=\"容器化技術與 Docker\"></a>容器化技術與 Docker</h3><p>部署應用程式是一項複雜而重要的任務，需要考量環境一致性、依賴管理和擴展性等議題。為了解決這些挑戰，容器化技術應運而生，這種技術允許開發者將應用程式及其所有相關的依賴項目打包成一個獨立的單元，稱為容器。這些容器具有輕量、可攜性以及一致的環境，能確保在不同的平台保持相同的運作方式。</p>\n<figure style=\"text-align: center;\">\n  <img src=\"./docker.png\" width=\"320\" alt=\"圖 14：Docker\" align=\"center\">\n  <figcaption><em>圖 14：Docker</em></figcaption>\n  <br><br>\n</figure>\n\n<p><strong>Docker</strong> 是容器化技術的一個代表性實現，它提供了一個平台，你可以將應用程式與執行環境打包成<strong>映像檔</strong>（image），並以<strong>容器</strong>（container）方式執行。每個容器都是相互隔離的，具有自己的檔案系統、執行環境和資源，可以在任何支援 Docker 的環境中運行。</p>\n<h3 id=\"準備-Docker-環境\"><a href=\"#準備-Docker-環境\" class=\"headerlink\" title=\"準備 Docker 環境\"></a>準備 Docker 環境</h3><p>我們要將應用程式打包成為映像檔，請確認好已經安裝 Docker 環境。</p>\n<ul>\n<li><p><strong>Docker Engine</strong>：Docker 的安裝方式，可參考官方文件 <a href=\"https://docs.docker.com/engine/install/\">Install Docker Engine</a> 的說明。在開發環境下，可以選用 Docker Desktop 版本，支援 Linux、Mac (macOS)、Windows 作業系統環境。</p>\n</li>\n<li><p><strong>Docker Compose</strong>：<a href=\"https://docs.docker.com/compose/\">Docker Compose</a> 是用於定義多容器 Docker 應用程式的工具，透過 YAML 檔設定要運行的服務，並且使用 <code>docker-compose</code> 指令啟動配置檔中定義的服務。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">NOTE:</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">如果安裝的 Docker Engine 是 Desktop 版本，它已經內置了 Docker Compose；如果 Docker Engine 安裝的是 Server 版本，則需要另安裝 Docker Compose。Docker Compose 的安裝方式，可參考官方文件 <a href=\"https://docs.docker.com/compose/install/\">Install Docker Compose</a> 的說明。</td>\n</tr>\n</tbody></table>\n<h3 id=\"建構-Docker-映像檔\"><a href=\"#建構-Docker-映像檔\" class=\"headerlink\" title=\"建構 Docker 映像檔\"></a>建構 Docker 映像檔</h3><p><a href=\"https://docs.docker.com/engine/reference/builder/\">Dockerfile</a> 是 Docker 用來建構 Docker 映像檔的檔案，它包含了一系列的指令，告訴 Docker 如何從基礎映像檔開始，安裝所需的軟體和套件，複製程式碼和資源，設定執行環境和參數等。</p>\n<p>請在專案目錄下新增 <code>Dockerfile</code> 檔案，並且編寫以下的指令：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> node:<span class=\"hljs-number\">18</span>-alpine as builder<br><br><span class=\"hljs-keyword\">ENV</span> NODE_ENV build<br><br><span class=\"hljs-keyword\">USER</span> node<br><span class=\"hljs-keyword\">WORKDIR</span><span class=\"bash\"> /home/node</span><br><br><span class=\"hljs-keyword\">COPY</span><span class=\"bash\"> --chown=node:node . /home/node</span><br><br><span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> npm install \\</span><br><span class=\"bash\">    &amp;&amp; npm run build</span><br><br><span class=\"hljs-comment\"># ---</span><br><br><span class=\"hljs-keyword\">FROM</span> node:<span class=\"hljs-number\">18</span>-alpine<br><br><span class=\"hljs-keyword\">ENV</span> NODE_ENV production<br><span class=\"hljs-keyword\">ENV</span> TZ Asia/Taipei<br><br><span class=\"hljs-keyword\">USER</span> node<br><span class=\"hljs-keyword\">WORKDIR</span><span class=\"bash\"> /home/node</span><br><br><span class=\"hljs-keyword\">COPY</span><span class=\"bash\"> --from=builder /home/node/package.json /home/node/</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"bash\"> --from=builder /home/node/package-lock.json /home/node/</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"bash\"> --from=builder /home/node/dist/ /home/node/dist/</span><br><br><span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> npm install --production</span><br><br><span class=\"hljs-keyword\">CMD</span><span class=\"bash\"> [<span class=\"hljs-string\">&quot;node&quot;</span>, <span class=\"hljs-string\">&quot;dist/main.js&quot;</span>]</span><br></code></pre></td></tr></table></figure>\n\n<p>這些指令會告訴 Docker 從 <code>node:18-alpine</code> 這個基礎映像檔開始，設定環境變數、使用者和工作目錄，複製程式碼和資源，安裝套件和建置程式，然後從新的 <code>node:18-alpine</code> 映像檔開始，設定環境變數、使用者和工作目錄，複製套件和程式碼，安裝生產環境所需的套件，最後執行應用程式。</p>\n<p>建立 Dockerfile 後，可在專案根目錄使用以下 <code>docker</code> 指令建構映像檔：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ docker build -t trading-signal-notifier:latest .<br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">NOTE:</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">在 <code>docker build</code> 指令中，<code>-t</code> 選項可指定映像檔名稱和標籤。</td>\n</tr>\n</tbody></table>\n<h3 id=\"使用-Docker-Compose-執行容器化應用程式\"><a href=\"#使用-Docker-Compose-執行容器化應用程式\" class=\"headerlink\" title=\"使用 Docker Compose 執行容器化應用程式\"></a>使用 Docker Compose 執行容器化應用程式</h3><p>為了管理應用程式，你可以使用 <a href=\"https://docs.docker.com/compose/compose-file/\">Docker Compose</a> 配置容器服務。請在專案根目錄下新增 <code>docker-compose.yml</code> 檔案，並加入以下內容：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&quot;3&quot;</span><br><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">trading-signal-notifier:</span><br>    <span class=\"hljs-attr\">build:</span><br>      <span class=\"hljs-attr\">context:</span> <span class=\"hljs-string\">.</span><br>      <span class=\"hljs-attr\">dockerfile:</span> <span class=\"hljs-string\">./Dockerfile</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">trading-signal-notifier:latest</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">FUGLE_MARKETDATA_API_KEY=$&#123;FUGLE_MARKETDATA_API_KEY&#125;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">LINE_NOTIFY_ACCESS_TOKEN=$&#123;LINE_NOTIFY_ACCESS_TOKEN&#125;</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span><br></code></pre></td></tr></table></figure>\n\n<p>完成配置設定後，在包含 <code>docker-compose.yml</code> 檔案的目錄中，使用以下指令，以啟動配置文件中定義的容器：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ docker-compose up -d<br></code></pre></td></tr></table></figure>\n\n<p>這個指令會讓 Docker Compose 啟動所有容器，指定 <code>-d</code> 選項代表容器在背景執行。如果服務的映像檔不存在，Docker Compose 會先建構或下載映像檔。</p>\n<p>要停止運行的容器，可以使用以下指令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ docker-compose down<br></code></pre></td></tr></table></figure>\n\n<p>這個指令會讓 Docker Compose 停止服務，並刪除所有容器。</p>\n<p>以上我們說明了如何建構應用程式映像檔與啟動容器服務的流程，你可以根據自己的需求自行設計 CI/CD pipeline，將應用程式以 Docker 映像檔形式發布，然後就可以在各種部署環境中，啟動容器執行應用程式。</p>\n<p>欲查看完整的程式碼，請參考我們的 GitHub <a href=\"https://github.com/chunkai1312/trading-signal-notifier\">repo</a>。</p>\n<h2 id=\"工商時間\"><a href=\"#工商時間\" class=\"headerlink\" title=\"工商時間\"></a>工商時間</h2><p>筆者著作《Node.js 量化投資全攻略：從資料收集到自動化交易系統建構實戰》已出版，這本書將是市面上第一本以 Node.js 為例的量化投資專書，並使用 NestJS 和 JS 生態圈工具來打造屬於自己的投資利器！本書的內容專為台灣股市特有的環境量身而寫，提供了豐富內容與實用範例，歡迎參考選購，開始你的量化投資之旅！</p>\n<p><strong>購書連結：</strong><br><a href=\"https://www.tenlong.com.tw/products/9786263336070\">天瓏網路書店</a> | <a href=\"https://www.books.com.tw/products/0010970613\">博客來網路書店</a> | <a href=\"https://www.eslite.com/product/10012011762682463156005\">誠品書店</a> | <a href=\"https://shopee.tw/product/728783014/22357449944/\">蝦皮購物</a> | <a href=\"https://www.momoshop.com.tw/goods/GoodsDetail.jsp?i_code=11954040\">momo購物網</a></p>\n<p><img src=\"./MP22331_banner_1800-410.jpg\"></p>","categories":[{"name":"技術分享","path":"api/categories/技術分享.json"}],"tags":[{"name":"NodeJS","path":"api/tags/NodeJS.json"},{"name":"NestJS","path":"api/tags/NestJS.json"},{"name":"Fugle API","path":"api/tags/Fugle API.json"},{"name":"LINE Notify","path":"api/tags/LINE Notify.json"}]}
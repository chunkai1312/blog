{"title":"使用 Rollup 打包 JavaScript 模組","slug":"using-rollup-to-bundle-javascript-modules","date":"2020-03-10T16:00:00.000Z","updated":"2021-09-05T09:21:32.899Z","comments":true,"path":"api/articles/using-rollup-to-bundle-javascript-modules.json","excerpt":"Rollup 是一個 JavaScript 的 module bundler，並提供豐富的插件 (plugins) 將程式碼進行處理，適合用來建構函式庫或應用程式。 [Figure] ","covers":["/2020/03/11/using-rollup-to-bundle-javascript-modules/cover.jpg"],"content":"<blockquote>\n<p>Rollup 是一個 JavaScript 的 module bundler，並提供豐富的插件 (plugins) 將程式碼進行處理，適合用來建構函式庫或應用程式。</p>\n</blockquote>\n<p><img src=\"/2020/03/11/using-rollup-to-bundle-javascript-modules/cover.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"打包-JavaScript-模組\"><a href=\"#打包-JavaScript-模組\" class=\"headerlink\" title=\"打包 JavaScript 模組\"></a>打包 JavaScript 模組</h2><p>這裡假設已經建立好一個 JavaScript 專案，如下結構：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">example-lib/<br>├── dist/<br>├── src/<br>│   └── <span class=\"hljs-keyword\">index</span>.js<br>└── package.json<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"安裝依賴\"><a href=\"#安裝依賴\" class=\"headerlink\" title=\"安裝依賴\"></a>安裝依賴</h3><p>使用以下命令安裝 Rollup：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ npm install --save-dev rollup<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"配置檔案\"><a href=\"#配置檔案\" class=\"headerlink\" title=\"配置檔案\"></a>配置檔案</h3><p>然後在專案目錄下建立一個名為 <code>rollup.config.js</code> 的檔案，並加入以下內容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  input: <span class=\"hljs-string\">&#x27;src/index.js&#x27;</span>,<br>  output: &#123;<br>    name: <span class=\"hljs-string\">&#x27;example&#x27;</span>,<br>    file: <span class=\"hljs-string\">&#x27;dist/bundle.js&#x27;</span>,<br>    format: <span class=\"hljs-string\">&#x27;umd&#x27;</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>input</code> - 定義函式庫或應用程式的進入點</li>\n<li><code>output.name</code> - 輸出打包模組的全域變數名稱</li>\n<li><code>output.file</code> - 輸出打包模組的檔案名稱</li>\n<li><code>output.format</code> - 輸出打包模組的檔案格式，適用瀏覽器環境可用 <code>iife</code>；適用 Node.js 環境可用 <code>cjs</code>；瀏覽器與 Node.js 環境通用可用 <code>umd</code></li>\n</ul>\n<h3 id=\"編譯模組\"><a href=\"#編譯模組\" class=\"headerlink\" title=\"編譯模組\"></a>編譯模組</h3><p>在專案下的 <code>package.json</code> 內容中的 <code>scripts</code> 的加入：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;scripts&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;build&quot;</span>: <span class=\"hljs-string\">&quot;rollup -c&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>上述 <code>-c</code> 為選項 <code>--config</code> 的簡寫，代表使用 <code>rollup.config.js</code> 的配置進行打包處理。然後執行以下命令即可進行打包程序：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ npm run build<br></code></pre></td></tr></table></figure>\n\n<p>打包好的模組會輸出至 <code>dist/bundle.js</code>。</p>\n<h3 id=\"使用插件\"><a href=\"#使用插件\" class=\"headerlink\" title=\"使用插件\"></a>使用插件</h3><p>Rollup 提供了許多豐富的 <a href=\"https://github.com/rollup/plugins\">plugins</a> 來處理文件，以下列舉比較常用的幾項：</p>\n<ul>\n<li><a href=\"https://github.com/rollup/rollup-plugin-node-resolve\">rollup-plugin-node-resolve</a> - 允許在 <code>node_modules</code> 中載入第三方模組</li>\n<li><a href=\"https://github.com/rollup/rollup-plugin-commonjs\">rollup-plugin-commonjs</a> - 將 CommonJS 模組轉換至 ES6 以讓 Rollup 進行處理</li>\n<li><a href=\"https://github.com/rollup/rollup-plugin-babel\">rollup-plugin-bable</a> - 支援 Babel 進行編譯處理</li>\n<li><a href=\"https://github.com/ezolenko/rollup-plugin-typescript2\">rollup-plugin-typescript2</a> - 支援 TypeScript 進行編譯處理</li>\n<li><a href=\"https://github.com/TrySound/rollup-plugin-terser\">rollup-plugin-terser</a> - 將打包的檔案進行 minify 處理</li>\n</ul>\n<h3 id=\"官方範例\"><a href=\"#官方範例\" class=\"headerlink\" title=\"官方範例\"></a>官方範例</h3><p>Rollup 官方提供了建構函式庫與應用程式的範例可作為配置上參考：</p>\n<ul>\n<li><a href=\"https://github.com/rollup/rollup-starter-lib\">rollup-starter-lib</a></li>\n<li><a href=\"https://github.com/rollup/rollup-starter-app\">rollup-starter-app</a></li>\n</ul>\n<h2 id=\"Rollup-與-Webpack-有什麼不同？\"><a href=\"#Rollup-與-Webpack-有什麼不同？\" class=\"headerlink\" title=\"Rollup 與 Webpack 有什麼不同？\"></a>Rollup 與 Webpack 有什麼不同？</h2><p>Rollup 與 Webpack 同樣作為打包器，有相同也有不相同的特性。</p>\n<p>Webpack 幾乎可以說是開發 SPA 的標準配備，對於程式碼分割 (Code-splitting) 和靜態資源 (Static assets) 導入具有先天優勢，並且支持熱模組替換 (HMR)；而 Rollup 對於程式碼的 Tree-shaking 和 ES6 模組擁有演算法優勢上的支持。它們都有不同的用途。結論一句話就是：</p>\n<blockquote>\n<p>Use webpack for apps, and Rollup for libraries</p>\n</blockquote>\n<p>這不是一個絕對的規則，實際上有很多網站和應用程式使用 Rollup 構建，也有大量的函式庫使用 Webpack。但是，對於應用程式使用 Webpack，而對於 函式庫使用 Rollup 是一個很好的經驗法則。</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://rollupjs.org/\">rollup.js</a></li>\n<li><a href=\"https://medium.com/webpack/webpack-and-rollup-the-same-but-different-a41ad427058c\">Webpack and Rollup: the same but different</a></li>\n</ul>\n","more":"<h2 id=\"打包-JavaScript-模組\"><a href=\"#打包-JavaScript-模組\" class=\"headerlink\" title=\"打包 JavaScript 模組\"></a>打包 JavaScript 模組</h2><p>這裡假設已經建立好一個 JavaScript 專案，如下結構：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">example-lib/<br>├── dist/<br>├── src/<br>│   └── <span class=\"hljs-keyword\">index</span>.js<br>└── package.json<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"安裝依賴\"><a href=\"#安裝依賴\" class=\"headerlink\" title=\"安裝依賴\"></a>安裝依賴</h3><p>使用以下命令安裝 Rollup：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ npm install --save-dev rollup<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"配置檔案\"><a href=\"#配置檔案\" class=\"headerlink\" title=\"配置檔案\"></a>配置檔案</h3><p>然後在專案目錄下建立一個名為 <code>rollup.config.js</code> 的檔案，並加入以下內容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  input: <span class=\"hljs-string\">&#x27;src/index.js&#x27;</span>,<br>  output: &#123;<br>    name: <span class=\"hljs-string\">&#x27;example&#x27;</span>,<br>    file: <span class=\"hljs-string\">&#x27;dist/bundle.js&#x27;</span>,<br>    format: <span class=\"hljs-string\">&#x27;umd&#x27;</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>input</code> - 定義函式庫或應用程式的進入點</li>\n<li><code>output.name</code> - 輸出打包模組的全域變數名稱</li>\n<li><code>output.file</code> - 輸出打包模組的檔案名稱</li>\n<li><code>output.format</code> - 輸出打包模組的檔案格式，適用瀏覽器環境可用 <code>iife</code>；適用 Node.js 環境可用 <code>cjs</code>；瀏覽器與 Node.js 環境通用可用 <code>umd</code></li>\n</ul>\n<h3 id=\"編譯模組\"><a href=\"#編譯模組\" class=\"headerlink\" title=\"編譯模組\"></a>編譯模組</h3><p>在專案下的 <code>package.json</code> 內容中的 <code>scripts</code> 的加入：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;scripts&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;build&quot;</span>: <span class=\"hljs-string\">&quot;rollup -c&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>上述 <code>-c</code> 為選項 <code>--config</code> 的簡寫，代表使用 <code>rollup.config.js</code> 的配置進行打包處理。然後執行以下命令即可進行打包程序：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ npm run build<br></code></pre></td></tr></table></figure>\n\n<p>打包好的模組會輸出至 <code>dist/bundle.js</code>。</p>\n<h3 id=\"使用插件\"><a href=\"#使用插件\" class=\"headerlink\" title=\"使用插件\"></a>使用插件</h3><p>Rollup 提供了許多豐富的 <a href=\"https://github.com/rollup/plugins\">plugins</a> 來處理文件，以下列舉比較常用的幾項：</p>\n<ul>\n<li><a href=\"https://github.com/rollup/rollup-plugin-node-resolve\">rollup-plugin-node-resolve</a> - 允許在 <code>node_modules</code> 中載入第三方模組</li>\n<li><a href=\"https://github.com/rollup/rollup-plugin-commonjs\">rollup-plugin-commonjs</a> - 將 CommonJS 模組轉換至 ES6 以讓 Rollup 進行處理</li>\n<li><a href=\"https://github.com/rollup/rollup-plugin-babel\">rollup-plugin-bable</a> - 支援 Babel 進行編譯處理</li>\n<li><a href=\"https://github.com/ezolenko/rollup-plugin-typescript2\">rollup-plugin-typescript2</a> - 支援 TypeScript 進行編譯處理</li>\n<li><a href=\"https://github.com/TrySound/rollup-plugin-terser\">rollup-plugin-terser</a> - 將打包的檔案進行 minify 處理</li>\n</ul>\n<h3 id=\"官方範例\"><a href=\"#官方範例\" class=\"headerlink\" title=\"官方範例\"></a>官方範例</h3><p>Rollup 官方提供了建構函式庫與應用程式的範例可作為配置上參考：</p>\n<ul>\n<li><a href=\"https://github.com/rollup/rollup-starter-lib\">rollup-starter-lib</a></li>\n<li><a href=\"https://github.com/rollup/rollup-starter-app\">rollup-starter-app</a></li>\n</ul>\n<h2 id=\"Rollup-與-Webpack-有什麼不同？\"><a href=\"#Rollup-與-Webpack-有什麼不同？\" class=\"headerlink\" title=\"Rollup 與 Webpack 有什麼不同？\"></a>Rollup 與 Webpack 有什麼不同？</h2><p>Rollup 與 Webpack 同樣作為打包器，有相同也有不相同的特性。</p>\n<p>Webpack 幾乎可以說是開發 SPA 的標準配備，對於程式碼分割 (Code-splitting) 和靜態資源 (Static assets) 導入具有先天優勢，並且支持熱模組替換 (HMR)；而 Rollup 對於程式碼的 Tree-shaking 和 ES6 模組擁有演算法優勢上的支持。它們都有不同的用途。結論一句話就是：</p>\n<blockquote>\n<p>Use webpack for apps, and Rollup for libraries</p>\n</blockquote>\n<p>這不是一個絕對的規則，實際上有很多網站和應用程式使用 Rollup 構建，也有大量的函式庫使用 Webpack。但是，對於應用程式使用 Webpack，而對於 函式庫使用 Rollup 是一個很好的經驗法則。</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://rollupjs.org/\">rollup.js</a></li>\n<li><a href=\"https://medium.com/webpack/webpack-and-rollup-the-same-but-different-a41ad427058c\">Webpack and Rollup: the same but different</a></li>\n</ul>","categories":[{"name":"工具應用","path":"api/categories/工具應用.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"},{"name":"Rollup","path":"api/tags/Rollup.json"},{"name":"Webpack","path":"api/tags/Webpack.json"}]}
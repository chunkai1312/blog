{"title":"Redbird：適用於 Node.js 的反向代理伺服器","slug":"redbird-reverse-proxy","date":"2019-12-11T03:20:57.000Z","updated":"2021-09-05T09:21:41.625Z","comments":true,"path":"api/articles/redbird-reverse-proxy.json","excerpt":" [Figure] Redbird 一個以 Node.js 開發的輕量級反向代理 (Reverse Proxy) 伺服器，並支援 LetsEncrypt  及 Docker。可以很方便地對應用程式進行反向路由，適合在一台主機的處理來自不同網域的應用程式、處理 SSL 等。","covers":["/2019/12/11/redbird-reverse-proxy/cover.jpg"],"content":"<p><img src=\"/2019/12/11/redbird-reverse-proxy/cover.jpg\"></p>\n<blockquote>\n<p><a href=\"https://github.com/OptimalBits/redbird\">Redbird</a> 一個以 Node.js 開發的輕量級反向代理 (Reverse Proxy) 伺服器，並支援 <a href=\"https://letsencrypt.org/\">LetsEncrypt </a> 及 <a href=\"https://www.docker.com/\">Docker</a>。可以很方便地對應用程式進行反向路由，適合在一台主機的處理來自不同網域的應用程式、處理 SSL 等。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h2><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">$ npm install <span class=\"hljs-comment\">--save redbird</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>以下是簡單的使用例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> proxy = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;redbird&#x27;</span>)(&#123;<span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">80</span>&#125;);<br><br><span class=\"hljs-comment\">// Route to any global ip</span><br>proxy.register(<span class=\"hljs-string\">&quot;optimalbits.com&quot;</span>, <span class=\"hljs-string\">&quot;http://167.23.42.67:8000&quot;</span>);<br><br><span class=\"hljs-comment\">// Route to any local ip, for example from docker containers.</span><br>proxy.register(<span class=\"hljs-string\">&quot;example.com&quot;</span>, <span class=\"hljs-string\">&quot;http://172.17.42.1:8001&quot;</span>);<br><br><span class=\"hljs-comment\">// Route from hostnames as well as paths</span><br>proxy.register(<span class=\"hljs-string\">&quot;example.com/static&quot;</span>, <span class=\"hljs-string\">&quot;http://172.17.42.1:8002&quot;</span>);<br>proxy.register(<span class=\"hljs-string\">&quot;example.com/media&quot;</span>, <span class=\"hljs-string\">&quot;http://172.17.42.1:8003&quot;</span>);<br><br><span class=\"hljs-comment\">// Subdomains, paths, everything just works as expected</span><br>proxy.register(<span class=\"hljs-string\">&quot;abc.example.com&quot;</span>, <span class=\"hljs-string\">&quot;http://172.17.42.4:8080&quot;</span>);<br>proxy.register(<span class=\"hljs-string\">&quot;abc.example.com/media&quot;</span>, <span class=\"hljs-string\">&quot;http://172.17.42.5:8080&quot;</span>);<br><br><span class=\"hljs-comment\">// Route to any href including a target path</span><br>proxy.register(<span class=\"hljs-string\">&quot;foobar.example.com&quot;</span>, <span class=\"hljs-string\">&quot;http://172.17.42.6:8080/foobar&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<p>其他進階設定請參考 <a href=\"https://github.com/OptimalBits/redbird\">Redbird</a> 文件說明。</p>\n<h2 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h2><p><a href=\"https://github.com/OptimalBits/redbird\">Redbird</a> 用法相當直覺且容易，如果你是一個 Node.js 開發者，我認為非常適合使用在開發環境或者需要<a href=\"/2017/04/03/simulating-multiple-domains-at-local-for-third-party-javascript-development/\">在本地端模擬多個網域名稱以用於第三方 JavaScript 開發</a>的情境。</p>\n<p>如果要使用在生產環境，現階段建議使用 <a href=\"https://www.nginx.com/\">Nginx</a> 或 <a href=\"https://docs.traefik.io/\">Traefik</a> 依然會是比較穩定可靠的選擇。</p>\n","more":"<h2 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h2><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">$ npm install <span class=\"hljs-comment\">--save redbird</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>以下是簡單的使用例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> proxy = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;redbird&#x27;</span>)(&#123;<span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">80</span>&#125;);<br><br><span class=\"hljs-comment\">// Route to any global ip</span><br>proxy.register(<span class=\"hljs-string\">&quot;optimalbits.com&quot;</span>, <span class=\"hljs-string\">&quot;http://167.23.42.67:8000&quot;</span>);<br><br><span class=\"hljs-comment\">// Route to any local ip, for example from docker containers.</span><br>proxy.register(<span class=\"hljs-string\">&quot;example.com&quot;</span>, <span class=\"hljs-string\">&quot;http://172.17.42.1:8001&quot;</span>);<br><br><span class=\"hljs-comment\">// Route from hostnames as well as paths</span><br>proxy.register(<span class=\"hljs-string\">&quot;example.com/static&quot;</span>, <span class=\"hljs-string\">&quot;http://172.17.42.1:8002&quot;</span>);<br>proxy.register(<span class=\"hljs-string\">&quot;example.com/media&quot;</span>, <span class=\"hljs-string\">&quot;http://172.17.42.1:8003&quot;</span>);<br><br><span class=\"hljs-comment\">// Subdomains, paths, everything just works as expected</span><br>proxy.register(<span class=\"hljs-string\">&quot;abc.example.com&quot;</span>, <span class=\"hljs-string\">&quot;http://172.17.42.4:8080&quot;</span>);<br>proxy.register(<span class=\"hljs-string\">&quot;abc.example.com/media&quot;</span>, <span class=\"hljs-string\">&quot;http://172.17.42.5:8080&quot;</span>);<br><br><span class=\"hljs-comment\">// Route to any href including a target path</span><br>proxy.register(<span class=\"hljs-string\">&quot;foobar.example.com&quot;</span>, <span class=\"hljs-string\">&quot;http://172.17.42.6:8080/foobar&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<p>其他進階設定請參考 <a href=\"https://github.com/OptimalBits/redbird\">Redbird</a> 文件說明。</p>\n<h2 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h2><p><a href=\"https://github.com/OptimalBits/redbird\">Redbird</a> 用法相當直覺且容易，如果你是一個 Node.js 開發者，我認為非常適合使用在開發環境或者需要<a href=\"/2017/04/03/simulating-multiple-domains-at-local-for-third-party-javascript-development/\">在本地端模擬多個網域名稱以用於第三方 JavaScript 開發</a>的情境。</p>\n<p>如果要使用在生產環境，現階段建議使用 <a href=\"https://www.nginx.com/\">Nginx</a> 或 <a href=\"https://docs.traefik.io/\">Traefik</a> 依然會是比較穩定可靠的選擇。</p>","categories":[{"name":"工具應用","path":"api/categories/工具應用.json"}],"tags":[{"name":"NodeJS","path":"api/tags/NodeJS.json"},{"name":"Reverse Proxy","path":"api/tags/Reverse Proxy.json"}]}